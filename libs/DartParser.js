// Generated from Dart.g4 by ANTLR 4.12.0
// jshint ignore: start
import antlr4 from 'antlr4';
import DartListener from './DartListener.js';
const serializedATN = [4,1,199,2476,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,1,0,5,0,482,8,0,10,0,12,0,485,9,0,1,0,1,0,1,1,3,
1,490,8,1,1,1,1,1,1,1,1,2,3,2,496,8,2,1,2,1,2,3,2,500,8,2,1,2,1,2,3,2,504,
8,2,1,2,3,2,507,8,2,1,2,3,2,510,8,2,1,3,1,3,3,3,514,8,3,1,3,3,3,517,8,3,
1,4,1,4,3,4,521,8,4,1,5,1,5,1,5,3,5,526,8,5,1,5,1,5,5,5,530,8,5,10,5,12,
5,533,9,5,1,6,1,6,1,6,3,6,538,8,6,1,7,1,7,1,7,5,7,543,8,7,10,7,12,7,546,
9,7,1,8,1,8,3,8,550,8,8,1,8,1,8,1,8,1,9,3,9,556,8,9,1,9,1,9,1,10,1,10,1,
10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,574,8,10,
1,10,1,10,3,10,578,8,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,3,12,
589,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
603,8,12,1,13,1,13,1,13,5,13,608,8,13,10,13,12,13,611,9,13,1,14,1,14,1,14,
1,14,1,14,3,14,618,8,14,1,15,1,15,1,15,1,15,5,15,624,8,15,10,15,12,15,627,
9,15,1,15,3,15,630,8,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,638,8,16,10,16,
12,16,641,9,16,1,16,3,16,644,8,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,3,17,657,8,17,1,18,3,18,660,8,18,1,18,3,18,663,8,18,1,18,
1,18,1,18,3,18,668,8,18,1,19,1,19,3,19,672,8,19,1,19,3,19,675,8,19,1,20,
3,20,678,8,20,1,20,1,20,1,20,1,20,1,20,3,20,685,8,20,3,20,687,8,20,1,21,
1,21,1,21,3,21,692,8,21,1,22,3,22,695,8,22,1,22,1,22,1,22,3,22,700,8,22,
1,23,1,23,3,23,704,8,23,1,24,1,24,3,24,708,8,24,1,24,1,24,1,24,3,24,713,
8,24,1,24,3,24,716,8,24,1,24,3,24,719,8,24,1,24,1,24,1,24,1,24,5,24,725,
8,24,10,24,12,24,728,9,24,1,24,1,24,1,24,1,24,3,24,734,8,24,1,24,1,24,1,
24,3,24,739,8,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,747,8,25,1,26,1,26,1,
26,1,26,1,26,3,26,754,8,26,1,26,1,26,3,26,758,8,26,1,26,1,26,3,26,762,8,
26,1,26,1,26,1,26,1,26,1,26,3,26,769,8,26,1,27,1,27,1,27,1,27,1,27,1,27,
1,27,1,27,3,27,779,8,27,3,27,781,8,27,1,27,1,27,1,27,3,27,786,8,27,3,27,
788,8,27,1,27,1,27,1,27,3,27,793,8,27,3,27,795,8,27,1,27,1,27,1,27,3,27,
800,8,27,1,27,1,27,1,27,3,27,805,8,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
813,8,27,1,27,1,27,1,27,3,27,818,8,27,1,27,1,27,1,27,1,27,3,27,824,8,27,
1,27,1,27,1,27,1,27,1,27,3,27,831,8,27,1,27,1,27,1,27,3,27,836,8,27,1,27,
1,27,1,27,1,27,3,27,842,8,27,1,27,1,27,3,27,846,8,27,1,27,3,27,849,8,27,
1,27,1,27,1,27,1,27,1,27,3,27,856,8,27,1,27,1,27,1,27,3,27,861,8,27,3,27,
863,8,27,1,28,1,28,1,28,5,28,868,8,28,10,28,12,28,871,9,28,1,29,1,29,1,29,
1,29,1,30,3,30,878,8,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
1,31,3,31,891,8,31,1,32,1,32,1,32,1,32,1,32,1,32,3,32,899,8,32,1,33,3,33,
902,8,33,1,33,1,33,1,33,1,34,3,34,908,8,34,1,34,1,34,1,34,1,34,1,35,1,35,
1,35,1,36,1,36,1,36,3,36,920,8,36,1,37,1,37,1,37,1,37,3,37,926,8,37,1,37,
1,37,1,38,1,38,1,38,1,38,5,38,934,8,38,10,38,12,38,937,9,38,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,948,8,39,1,40,1,40,3,40,952,8,40,1,
40,1,40,1,40,1,40,1,41,1,41,3,41,960,8,41,1,42,3,42,963,8,42,1,42,1,42,1,
42,1,42,1,43,3,43,970,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,
1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
48,1,49,1,49,1,49,3,49,999,8,49,1,50,1,50,1,50,3,50,1004,8,50,1,50,1,50,
3,50,1008,8,50,1,50,3,50,1011,8,50,1,50,1,50,1,50,1,50,5,50,1017,8,50,10,
50,12,50,1020,9,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,5,51,1030,8,51,
10,51,12,51,1033,9,51,1,51,3,51,1036,8,51,1,51,1,51,1,52,1,52,1,52,1,52,
3,52,1044,8,52,1,53,1,53,1,53,1,53,5,53,1050,8,53,10,53,12,53,1053,9,53,
1,53,1,53,1,54,1,54,1,54,1,55,1,55,5,55,1062,8,55,10,55,12,55,1065,9,55,
1,56,1,56,1,56,1,56,1,56,3,56,1072,8,56,1,57,1,57,1,57,1,57,1,57,1,57,1,
57,1,57,1,57,3,57,1083,8,57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1102,8,58,1,59,1,59,1,59,1,
60,1,60,1,60,1,61,1,61,1,61,1,62,1,62,1,62,1,63,1,63,1,63,1,64,1,64,1,64,
1,65,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,
69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,
1,73,1,73,1,74,1,74,1,75,1,75,5,75,1157,8,75,10,75,12,75,1160,9,75,1,75,
1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
76,1,76,3,76,1179,8,76,1,76,1,76,1,76,5,76,1184,8,76,10,76,12,76,1187,9,
76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1211,8,76,1,76,1,76,1,76,1,
76,3,76,1217,8,76,1,76,1,76,1,76,1,76,3,76,1223,8,76,1,76,1,76,1,76,1,76,
3,76,1229,8,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,
76,1,76,1,76,1,76,1,76,3,76,1247,8,76,1,76,1,76,1,76,1,76,3,76,1253,8,76,
1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1262,8,76,1,77,1,77,1,78,1,78,1,
78,1,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,
1,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,1,89,1,
89,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,92,1,92,1,93,1,93,1,93,1,93,
1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,1,
98,1,98,1,98,1,98,1,98,1,98,3,98,1332,8,98,1,99,1,99,1,99,5,99,1337,8,99,
10,99,12,99,1340,9,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,
100,1,100,1,100,1,100,1,100,3,100,1355,8,100,1,101,1,101,1,101,1,101,1,101,
1,101,1,101,3,101,1364,8,101,1,102,1,102,1,103,1,103,1,104,1,104,1,105,4,
105,1373,8,105,11,105,12,105,1374,1,106,1,106,1,106,1,106,1,106,5,106,1382,
8,106,10,106,12,106,1385,9,106,3,106,1387,8,106,1,107,3,107,1390,8,107,1,
107,3,107,1393,8,107,1,107,1,107,3,107,1397,8,107,1,107,1,107,1,108,3,108,
1402,8,108,1,108,3,108,1405,8,108,1,108,1,108,3,108,1409,8,108,1,108,1,108,
1,109,1,109,1,109,5,109,1416,8,109,10,109,12,109,1419,9,109,1,109,3,109,
1422,8,109,1,110,1,110,1,110,1,110,1,110,3,110,1429,8,110,1,111,1,111,1,
112,1,112,1,112,1,112,1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,
114,1,114,3,114,1447,8,114,1,115,3,115,1450,8,115,1,115,1,115,1,115,1,115,
1,115,1,115,1,116,1,116,1,116,1,117,1,117,1,117,1,118,1,118,1,118,1,119,
1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,3,119,
1479,8,119,1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,3,121,1489,8,
121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,123,1,123,3,123,1500,8,123,
1,123,3,123,1503,8,123,1,124,1,124,1,125,1,125,1,125,1,125,1,126,1,126,1,
126,1,126,1,127,1,127,3,127,1517,8,127,1,127,1,127,1,128,1,128,1,128,5,128,
1524,8,128,10,128,12,128,1527,9,128,1,128,1,128,1,128,5,128,1532,8,128,10,
128,12,128,1535,9,128,3,128,1537,8,128,1,129,1,129,1,129,1,130,1,130,1,130,
1,130,1,130,1,130,1,130,1,130,5,130,1550,8,130,10,130,12,130,1553,9,130,
1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,132,3,132,1563,8,132,1,133,1,
133,5,133,1567,8,133,10,133,12,133,1570,9,133,1,133,1,133,1,133,3,133,1575,
8,133,3,133,1577,8,133,1,134,1,134,1,134,1,135,1,135,3,135,1584,8,135,1,
136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,
136,1,136,1,136,1,136,1,136,1,136,3,136,1604,8,136,1,137,1,137,1,137,1,137,
1,137,1,137,3,137,1612,8,137,1,138,1,138,1,138,5,138,1617,8,138,10,138,12,
138,1620,9,138,1,139,1,139,1,139,5,139,1625,8,139,10,139,12,139,1628,9,139,
1,140,1,140,1,140,5,140,1633,8,140,10,140,12,140,1636,9,140,1,141,1,141,
1,141,1,141,3,141,1642,8,141,1,141,1,141,1,141,1,141,3,141,1648,8,141,1,
142,1,142,1,143,1,143,1,143,1,143,1,143,1,143,3,143,1658,8,143,1,143,1,143,
1,143,1,143,3,143,1664,8,143,1,144,1,144,1,144,1,144,3,144,1670,8,144,1,
145,1,145,1,145,5,145,1675,8,145,10,145,12,145,1678,9,145,1,145,1,145,1,
145,4,145,1683,8,145,11,145,12,145,1684,3,145,1687,8,145,1,146,1,146,1,146,
5,146,1692,8,146,10,146,12,146,1695,9,146,1,146,1,146,1,146,4,146,1700,8,
146,11,146,12,146,1701,3,146,1704,8,146,1,147,1,147,1,147,5,147,1709,8,147,
10,147,12,147,1712,9,147,1,147,1,147,1,147,4,147,1717,8,147,11,147,12,147,
1718,3,147,1721,8,147,1,148,1,148,1,149,1,149,1,149,1,149,5,149,1729,8,149,
10,149,12,149,1732,9,149,1,149,1,149,1,149,1,149,4,149,1738,8,149,11,149,
12,149,1739,3,149,1742,8,149,1,150,1,150,1,150,1,150,1,150,1,150,3,150,1750,
8,150,1,151,1,151,1,151,1,151,5,151,1756,8,151,10,151,12,151,1759,9,151,
1,151,1,151,1,151,1,151,4,151,1765,8,151,11,151,12,151,1766,3,151,1769,8,
151,1,152,1,152,1,153,1,153,1,153,1,153,5,153,1777,8,153,10,153,12,153,1780,
9,153,1,153,1,153,1,153,1,153,4,153,1786,8,153,11,153,12,153,1787,3,153,
1790,8,153,1,154,1,154,1,155,1,155,1,155,1,155,1,155,1,155,1,155,3,155,1801,
8,155,1,155,1,155,1,155,1,155,1,155,3,155,1808,8,155,1,156,1,156,1,156,3,
156,1813,8,156,1,157,1,157,1,158,1,158,1,159,1,159,1,160,1,160,1,160,1,161,
1,161,1,161,1,161,1,161,5,161,1829,8,161,10,161,12,161,1832,9,161,3,161,
1834,8,161,1,162,1,162,1,163,1,163,1,163,1,163,1,163,1,163,1,164,1,164,1,
164,3,164,1847,8,164,1,165,3,165,1850,8,165,1,165,1,165,1,166,1,166,1,167,
1,167,1,167,1,167,1,167,1,167,3,167,1862,8,167,1,168,5,168,1865,8,168,10,
168,12,168,1868,9,168,1,168,1,168,1,169,1,169,1,169,1,169,1,169,1,169,3,
169,1878,8,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,3,170,1888,
8,170,1,171,1,171,1,172,1,172,3,172,1894,8,172,1,173,1,173,1,173,1,173,1,
173,1,173,1,173,1,173,1,173,1,173,3,173,1906,8,173,1,174,1,174,1,175,1,175,
1,175,1,176,1,176,3,176,1915,8,176,1,177,1,177,1,177,1,178,1,178,1,179,5,
179,1923,8,179,10,179,12,179,1926,9,179,1,180,5,180,1929,8,180,10,180,12,
180,1932,9,180,1,180,1,180,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,
1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,1,181,3,181,1954,8,
181,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,182,1,
182,1,182,1,183,1,183,1,183,1,183,1,183,1,183,1,183,3,183,1976,8,183,1,183,
1,183,1,183,1,183,5,183,1982,8,183,10,183,12,183,1985,9,183,1,183,1,183,
1,183,3,183,1990,8,183,1,184,1,184,1,185,1,185,1,185,1,185,1,186,1,186,1,
187,1,187,3,187,2002,8,187,1,188,1,188,1,188,1,189,3,189,2008,8,189,1,189,
1,189,1,190,1,190,1,190,1,190,1,191,1,191,1,191,1,191,1,192,1,192,1,192,
1,192,1,192,1,192,1,192,3,192,2027,8,192,1,193,3,193,2030,8,193,1,193,1,
193,1,193,1,193,1,193,1,193,1,194,1,194,1,194,1,194,1,194,1,194,1,194,1,
194,1,194,1,194,1,194,1,194,3,194,2050,8,194,1,194,1,194,3,194,2054,8,194,
3,194,2056,8,194,1,195,1,195,3,195,2060,8,195,1,195,3,195,2063,8,195,1,196,
1,196,1,196,1,196,1,196,1,196,1,197,1,197,1,197,1,197,1,197,1,197,1,197,
1,197,1,198,1,198,1,198,1,198,1,198,1,198,5,198,2085,8,198,10,198,12,198,
2088,9,198,1,198,3,198,2091,8,198,1,198,1,198,1,199,5,199,2096,8,199,10,
199,12,199,2099,9,199,1,199,1,199,1,199,1,199,1,199,1,200,5,200,2107,8,200,
10,200,12,200,2110,9,200,1,200,1,200,1,200,1,200,1,201,1,201,1,201,1,202,
1,202,1,202,4,202,2122,8,202,11,202,12,202,2123,1,202,3,202,2127,8,202,1,
202,3,202,2130,8,202,1,203,1,203,1,203,1,203,1,203,1,203,3,203,2138,8,203,
1,203,1,203,3,203,2142,8,203,1,204,1,204,1,204,1,204,1,204,3,204,2149,8,
204,1,204,1,204,1,205,1,205,1,205,1,206,1,206,3,206,2158,8,206,1,206,1,206,
1,207,1,207,1,207,1,208,1,208,3,208,2167,8,208,1,208,1,208,1,209,1,209,3,
209,2173,8,209,1,209,1,209,1,210,1,210,1,210,1,210,1,211,1,211,1,211,1,211,
1,212,1,212,1,212,1,213,1,213,1,213,1,213,1,213,3,213,2193,8,213,1,213,3,
213,2196,8,213,1,213,1,213,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,
3,214,2232,8,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,2240,8,214,1,
214,1,214,1,214,1,214,3,214,2246,8,214,1,214,1,214,1,214,1,214,3,214,2252,
8,214,1,214,1,214,5,214,2256,8,214,10,214,12,214,2259,9,214,1,214,1,214,
3,214,2263,8,214,1,215,1,215,1,215,5,215,2268,8,215,10,215,12,215,2271,9,
215,1,216,1,216,3,216,2275,8,216,1,216,3,216,2278,8,216,1,217,1,217,3,217,
2282,8,217,1,217,3,217,2285,8,217,1,218,1,218,3,218,2289,8,218,1,219,1,219,
3,219,2293,8,219,1,219,3,219,2296,8,219,1,219,1,219,3,219,2300,8,219,3,219,
2302,8,219,1,220,1,220,1,220,3,220,2307,8,220,1,221,1,221,1,221,1,221,1,
222,1,222,1,222,5,222,2316,8,222,10,222,12,222,2319,9,222,1,223,1,223,1,
223,5,223,2324,8,223,10,223,12,223,2327,9,223,1,224,1,224,3,224,2331,8,224,
1,224,1,224,1,225,1,225,3,225,2337,8,225,1,225,1,225,1,225,3,225,2342,8,
225,1,226,1,226,1,226,1,226,3,226,2348,8,226,1,227,1,227,1,227,1,227,1,227,
1,227,1,227,1,227,1,227,1,227,1,227,3,227,2361,8,227,1,227,1,227,1,227,1,
227,1,227,1,227,3,227,2369,8,227,1,228,1,228,1,228,5,228,2374,8,228,10,228,
12,228,2377,9,228,1,229,1,229,3,229,2381,8,229,1,230,1,230,3,230,2385,8,
230,1,231,1,231,1,231,3,231,2390,8,231,1,231,1,231,1,232,1,232,1,232,1,232,
5,232,2398,8,232,10,232,12,232,2401,9,232,1,232,3,232,2404,8,232,1,232,1,
232,1,233,3,233,2409,8,233,1,233,1,233,1,234,1,234,1,234,1,235,1,235,1,235,
1,235,1,235,1,235,3,235,2422,8,235,3,235,2424,8,235,1,236,1,236,1,236,3,
236,2429,8,236,1,236,1,236,1,236,1,236,1,236,1,236,3,236,2437,8,236,1,237,
1,237,1,237,1,237,1,238,1,238,1,238,1,238,3,238,2447,8,238,1,239,1,239,1,
239,1,239,1,239,1,239,5,239,2455,8,239,10,239,12,239,2458,9,239,1,239,1,
239,1,239,1,239,1,239,1,239,1,239,5,239,2467,8,239,10,239,12,239,2470,9,
239,1,239,1,239,3,239,2474,8,239,1,239,0,1,260,240,0,2,4,6,8,10,12,14,16,
18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
472,474,476,478,0,14,2,0,1,1,14,14,2,0,64,64,72,72,2,0,94,94,113,113,1,0,
181,182,2,0,71,71,86,86,1,0,23,24,1,0,25,26,2,0,16,16,41,41,1,0,44,46,1,
0,48,49,2,0,5,5,50,52,1,0,54,55,6,0,92,97,99,100,102,114,117,122,125,125,
195,195,4,0,96,96,117,124,126,126,195,195,2649,0,483,1,0,0,0,2,489,1,0,0,
0,4,509,1,0,0,0,6,516,1,0,0,0,8,520,1,0,0,0,10,522,1,0,0,0,12,534,1,0,0,
0,14,539,1,0,0,0,16,547,1,0,0,0,18,555,1,0,0,0,20,577,1,0,0,0,22,579,1,0,
0,0,24,602,1,0,0,0,26,604,1,0,0,0,28,617,1,0,0,0,30,619,1,0,0,0,32,633,1,
0,0,0,34,656,1,0,0,0,36,659,1,0,0,0,38,674,1,0,0,0,40,677,1,0,0,0,42,688,
1,0,0,0,44,694,1,0,0,0,46,701,1,0,0,0,48,738,1,0,0,0,50,746,1,0,0,0,52,768,
1,0,0,0,54,862,1,0,0,0,56,864,1,0,0,0,58,872,1,0,0,0,60,877,1,0,0,0,62,890,
1,0,0,0,64,898,1,0,0,0,66,901,1,0,0,0,68,907,1,0,0,0,70,913,1,0,0,0,72,916,
1,0,0,0,74,921,1,0,0,0,76,929,1,0,0,0,78,947,1,0,0,0,80,951,1,0,0,0,82,959,
1,0,0,0,84,962,1,0,0,0,86,969,1,0,0,0,88,977,1,0,0,0,90,981,1,0,0,0,92,984,
1,0,0,0,94,987,1,0,0,0,96,990,1,0,0,0,98,995,1,0,0,0,100,1000,1,0,0,0,102,
1023,1,0,0,0,104,1039,1,0,0,0,106,1045,1,0,0,0,108,1056,1,0,0,0,110,1063,
1,0,0,0,112,1071,1,0,0,0,114,1082,1,0,0,0,116,1101,1,0,0,0,118,1103,1,0,
0,0,120,1106,1,0,0,0,122,1109,1,0,0,0,124,1112,1,0,0,0,126,1115,1,0,0,0,
128,1118,1,0,0,0,130,1121,1,0,0,0,132,1124,1,0,0,0,134,1127,1,0,0,0,136,
1130,1,0,0,0,138,1133,1,0,0,0,140,1136,1,0,0,0,142,1139,1,0,0,0,144,1142,
1,0,0,0,146,1145,1,0,0,0,148,1152,1,0,0,0,150,1154,1,0,0,0,152,1261,1,0,
0,0,154,1263,1,0,0,0,156,1265,1,0,0,0,158,1269,1,0,0,0,160,1274,1,0,0,0,
162,1276,1,0,0,0,164,1281,1,0,0,0,166,1283,1,0,0,0,168,1285,1,0,0,0,170,
1287,1,0,0,0,172,1289,1,0,0,0,174,1291,1,0,0,0,176,1293,1,0,0,0,178,1295,
1,0,0,0,180,1299,1,0,0,0,182,1301,1,0,0,0,184,1303,1,0,0,0,186,1307,1,0,
0,0,188,1311,1,0,0,0,190,1318,1,0,0,0,192,1320,1,0,0,0,194,1322,1,0,0,0,
196,1331,1,0,0,0,198,1333,1,0,0,0,200,1354,1,0,0,0,202,1363,1,0,0,0,204,
1365,1,0,0,0,206,1367,1,0,0,0,208,1369,1,0,0,0,210,1372,1,0,0,0,212,1376,
1,0,0,0,214,1389,1,0,0,0,216,1401,1,0,0,0,218,1412,1,0,0,0,220,1428,1,0,
0,0,222,1430,1,0,0,0,224,1432,1,0,0,0,226,1436,1,0,0,0,228,1439,1,0,0,0,
230,1449,1,0,0,0,232,1457,1,0,0,0,234,1460,1,0,0,0,236,1463,1,0,0,0,238,
1478,1,0,0,0,240,1480,1,0,0,0,242,1488,1,0,0,0,244,1490,1,0,0,0,246,1502,
1,0,0,0,248,1504,1,0,0,0,250,1506,1,0,0,0,252,1510,1,0,0,0,254,1514,1,0,
0,0,256,1536,1,0,0,0,258,1538,1,0,0,0,260,1541,1,0,0,0,262,1554,1,0,0,0,
264,1562,1,0,0,0,266,1576,1,0,0,0,268,1578,1,0,0,0,270,1583,1,0,0,0,272,
1603,1,0,0,0,274,1605,1,0,0,0,276,1613,1,0,0,0,278,1621,1,0,0,0,280,1629,
1,0,0,0,282,1647,1,0,0,0,284,1649,1,0,0,0,286,1663,1,0,0,0,288,1669,1,0,
0,0,290,1686,1,0,0,0,292,1703,1,0,0,0,294,1720,1,0,0,0,296,1722,1,0,0,0,
298,1741,1,0,0,0,300,1749,1,0,0,0,302,1768,1,0,0,0,304,1770,1,0,0,0,306,
1789,1,0,0,0,308,1791,1,0,0,0,310,1807,1,0,0,0,312,1812,1,0,0,0,314,1814,
1,0,0,0,316,1816,1,0,0,0,318,1818,1,0,0,0,320,1820,1,0,0,0,322,1833,1,0,
0,0,324,1835,1,0,0,0,326,1837,1,0,0,0,328,1846,1,0,0,0,330,1849,1,0,0,0,
332,1853,1,0,0,0,334,1861,1,0,0,0,336,1866,1,0,0,0,338,1877,1,0,0,0,340,
1887,1,0,0,0,342,1889,1,0,0,0,344,1893,1,0,0,0,346,1905,1,0,0,0,348,1907,
1,0,0,0,350,1909,1,0,0,0,352,1912,1,0,0,0,354,1916,1,0,0,0,356,1919,1,0,
0,0,358,1924,1,0,0,0,360,1930,1,0,0,0,362,1953,1,0,0,0,364,1955,1,0,0,0,
366,1968,1,0,0,0,368,1991,1,0,0,0,370,1993,1,0,0,0,372,1997,1,0,0,0,374,
2001,1,0,0,0,376,2003,1,0,0,0,378,2007,1,0,0,0,380,2011,1,0,0,0,382,2015,
1,0,0,0,384,2019,1,0,0,0,386,2029,1,0,0,0,388,2055,1,0,0,0,390,2062,1,0,
0,0,392,2064,1,0,0,0,394,2070,1,0,0,0,396,2078,1,0,0,0,398,2097,1,0,0,0,
400,2108,1,0,0,0,402,2115,1,0,0,0,404,2118,1,0,0,0,406,2141,1,0,0,0,408,
2143,1,0,0,0,410,2152,1,0,0,0,412,2155,1,0,0,0,414,2161,1,0,0,0,416,2164,
1,0,0,0,418,2170,1,0,0,0,420,2176,1,0,0,0,422,2180,1,0,0,0,424,2184,1,0,
0,0,426,2187,1,0,0,0,428,2262,1,0,0,0,430,2264,1,0,0,0,432,2277,1,0,0,0,
434,2284,1,0,0,0,436,2288,1,0,0,0,438,2301,1,0,0,0,440,2303,1,0,0,0,442,
2308,1,0,0,0,444,2312,1,0,0,0,446,2320,1,0,0,0,448,2328,1,0,0,0,450,2341,
1,0,0,0,452,2347,1,0,0,0,454,2368,1,0,0,0,456,2370,1,0,0,0,458,2380,1,0,
0,0,460,2384,1,0,0,0,462,2386,1,0,0,0,464,2393,1,0,0,0,466,2408,1,0,0,0,
468,2412,1,0,0,0,470,2423,1,0,0,0,472,2436,1,0,0,0,474,2438,1,0,0,0,476,
2446,1,0,0,0,478,2473,1,0,0,0,480,482,3,428,214,0,481,480,1,0,0,0,482,485,
1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,483,1,0,0,0,
486,487,5,0,0,1,487,1,1,0,0,0,488,490,5,94,0,0,489,488,1,0,0,0,489,490,1,
0,0,0,490,491,1,0,0,0,491,492,3,4,2,0,492,493,3,344,172,0,493,3,1,0,0,0,
494,496,5,106,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,499,
5,72,0,0,498,500,3,432,216,0,499,498,1,0,0,0,499,500,1,0,0,0,500,510,1,0,
0,0,501,503,5,64,0,0,502,504,3,432,216,0,503,502,1,0,0,0,503,504,1,0,0,0,
504,510,1,0,0,0,505,507,5,106,0,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,
1,0,0,0,508,510,3,8,4,0,509,495,1,0,0,0,509,501,1,0,0,0,509,506,1,0,0,0,
510,5,1,0,0,0,511,513,5,72,0,0,512,514,3,432,216,0,513,512,1,0,0,0,513,514,
1,0,0,0,514,517,1,0,0,0,515,517,3,8,4,0,516,511,1,0,0,0,516,515,1,0,0,0,
517,7,1,0,0,0,518,521,5,88,0,0,519,521,3,432,216,0,520,518,1,0,0,0,520,519,
1,0,0,0,521,9,1,0,0,0,522,525,3,2,1,0,523,524,5,1,0,0,524,526,3,114,57,0,
525,523,1,0,0,0,525,526,1,0,0,0,526,531,1,0,0,0,527,528,5,2,0,0,528,530,
3,12,6,0,529,527,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,
532,11,1,0,0,0,533,531,1,0,0,0,534,537,3,344,172,0,535,536,5,1,0,0,536,538,
3,114,57,0,537,535,1,0,0,0,537,538,1,0,0,0,538,13,1,0,0,0,539,544,3,12,6,
0,540,541,5,2,0,0,541,543,3,12,6,0,542,540,1,0,0,0,543,546,1,0,0,0,544,542,
1,0,0,0,544,545,1,0,0,0,545,15,1,0,0,0,546,544,1,0,0,0,547,549,3,110,55,
0,548,550,3,432,216,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,
552,3,342,171,0,552,553,3,18,9,0,553,17,1,0,0,0,554,556,3,106,53,0,555,554,
1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,3,24,12,0,558,19,1,0,0,0,
559,560,5,3,0,0,560,561,3,114,57,0,561,562,5,4,0,0,562,578,1,0,0,0,563,564,
5,117,0,0,564,565,5,3,0,0,565,566,3,114,57,0,566,567,5,4,0,0,567,578,1,0,
0,0,568,574,5,117,0,0,569,570,5,117,0,0,570,574,5,5,0,0,571,572,5,122,0,
0,572,574,5,5,0,0,573,568,1,0,0,0,573,569,1,0,0,0,573,571,1,0,0,0,574,575,
1,0,0,0,575,578,3,22,11,0,576,578,3,22,11,0,577,559,1,0,0,0,577,563,1,0,
0,0,577,573,1,0,0,0,577,576,1,0,0,0,578,21,1,0,0,0,579,580,5,184,0,0,580,
581,3,358,179,0,581,582,5,185,0,0,582,23,1,0,0,0,583,584,5,6,0,0,584,603,
5,7,0,0,585,586,5,6,0,0,586,588,3,26,13,0,587,589,5,2,0,0,588,587,1,0,0,
0,588,589,1,0,0,0,589,590,1,0,0,0,590,591,5,7,0,0,591,603,1,0,0,0,592,593,
5,6,0,0,593,594,3,26,13,0,594,595,5,2,0,0,595,596,3,28,14,0,596,597,5,7,
0,0,597,603,1,0,0,0,598,599,5,6,0,0,599,600,3,28,14,0,600,601,5,7,0,0,601,
603,1,0,0,0,602,583,1,0,0,0,602,585,1,0,0,0,602,592,1,0,0,0,602,598,1,0,
0,0,603,25,1,0,0,0,604,609,3,34,17,0,605,606,5,2,0,0,606,608,3,34,17,0,607,
605,1,0,0,0,608,611,1,0,0,0,609,607,1,0,0,0,609,610,1,0,0,0,610,27,1,0,0,
0,611,609,1,0,0,0,612,618,3,30,15,0,613,618,5,8,0,0,614,618,5,177,0,0,615,
618,5,9,0,0,616,618,3,32,16,0,617,612,1,0,0,0,617,613,1,0,0,0,617,614,1,
0,0,0,617,615,1,0,0,0,617,616,1,0,0,0,618,29,1,0,0,0,619,620,5,10,0,0,620,
625,3,42,21,0,621,622,5,2,0,0,622,624,3,42,21,0,623,621,1,0,0,0,624,627,
1,0,0,0,625,623,1,0,0,0,625,626,1,0,0,0,626,629,1,0,0,0,627,625,1,0,0,0,
628,630,5,2,0,0,629,628,1,0,0,0,629,630,1,0,0,0,630,631,1,0,0,0,631,632,
5,11,0,0,632,31,1,0,0,0,633,634,5,184,0,0,634,639,3,44,22,0,635,636,5,2,
0,0,636,638,3,44,22,0,637,635,1,0,0,0,638,641,1,0,0,0,639,637,1,0,0,0,639,
640,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,642,644,5,2,0,0,643,642,1,0,
0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,646,5,185,0,0,646,33,1,0,0,0,647,
648,3,110,55,0,648,649,3,36,18,0,649,657,1,0,0,0,650,651,3,110,55,0,651,
652,3,40,20,0,652,657,1,0,0,0,653,654,3,110,55,0,654,655,3,38,19,0,655,657,
1,0,0,0,656,647,1,0,0,0,656,650,1,0,0,0,656,653,1,0,0,0,657,35,1,0,0,0,658,
660,5,94,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,662,1,0,0,0,661,663,3,432,
216,0,662,661,1,0,0,0,662,663,1,0,0,0,663,664,1,0,0,0,664,665,3,342,171,
0,665,667,3,18,9,0,666,668,5,12,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,
37,1,0,0,0,669,675,3,2,1,0,670,672,5,94,0,0,671,670,1,0,0,0,671,672,1,0,
0,0,672,673,1,0,0,0,673,675,3,344,172,0,674,669,1,0,0,0,674,671,1,0,0,0,
675,39,1,0,0,0,676,678,3,4,2,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,
0,0,0,679,680,5,84,0,0,680,681,5,13,0,0,681,686,3,344,172,0,682,684,3,18,
9,0,683,685,5,12,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,687,1,0,0,0,686,
682,1,0,0,0,686,687,1,0,0,0,687,41,1,0,0,0,688,691,3,34,17,0,689,690,5,1,
0,0,690,692,3,114,57,0,691,689,1,0,0,0,691,692,1,0,0,0,692,43,1,0,0,0,693,
695,5,111,0,0,694,693,1,0,0,0,694,695,1,0,0,0,695,696,1,0,0,0,696,699,3,
34,17,0,697,698,7,0,0,0,698,700,3,114,57,0,699,697,1,0,0,0,699,700,1,0,0,
0,700,45,1,0,0,0,701,703,3,348,174,0,702,704,3,106,53,0,703,702,1,0,0,0,
703,704,1,0,0,0,704,47,1,0,0,0,705,707,3,110,55,0,706,708,5,92,0,0,707,706,
1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,710,5,63,0,0,710,712,3,46,23,
0,711,713,3,90,45,0,712,711,1,0,0,0,712,713,1,0,0,0,713,715,1,0,0,0,714,
716,3,92,46,0,715,714,1,0,0,0,715,716,1,0,0,0,716,718,1,0,0,0,717,719,3,
94,47,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,726,5,184,0,
0,721,722,3,110,55,0,722,723,3,50,25,0,723,725,1,0,0,0,724,721,1,0,0,0,725,
728,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,729,1,0,0,0,728,726,1,0,
0,0,729,730,5,185,0,0,730,739,1,0,0,0,731,733,3,110,55,0,732,734,5,92,0,
0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,736,5,63,0,0,736,737,
3,96,48,0,737,739,1,0,0,0,738,705,1,0,0,0,738,731,1,0,0,0,739,49,1,0,0,0,
740,741,3,52,26,0,741,742,3,20,10,0,742,747,1,0,0,0,743,744,3,54,27,0,744,
745,5,4,0,0,745,747,1,0,0,0,746,740,1,0,0,0,746,743,1,0,0,0,747,51,1,0,0,
0,748,749,3,70,35,0,749,750,3,76,38,0,750,769,1,0,0,0,751,769,3,84,42,0,
752,754,5,113,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,0,0,0,755,769,
3,16,8,0,756,758,5,113,0,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,
0,759,769,3,66,33,0,760,762,5,113,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,
763,1,0,0,0,763,769,3,68,34,0,764,769,3,60,30,0,765,766,5,199,0,0,766,769,
3,16,8,0,767,769,3,70,35,0,768,748,1,0,0,0,768,751,1,0,0,0,768,753,1,0,0,
0,768,757,1,0,0,0,768,761,1,0,0,0,768,764,1,0,0,0,768,765,1,0,0,0,768,767,
1,0,0,0,769,53,1,0,0,0,770,771,5,99,0,0,771,863,3,84,42,0,772,773,5,99,0,
0,773,863,3,88,44,0,774,775,5,99,0,0,775,863,3,70,35,0,776,778,5,99,0,0,
777,779,5,113,0,0,778,777,1,0,0,0,778,779,1,0,0,0,779,781,1,0,0,0,780,776,
1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,863,3,66,33,0,783,785,5,99,0,
0,784,786,5,113,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,
783,1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,863,3,68,34,0,790,792,5,
99,0,0,791,793,5,113,0,0,792,791,1,0,0,0,792,793,1,0,0,0,793,795,1,0,0,0,
794,790,1,0,0,0,794,795,1,0,0,0,795,796,1,0,0,0,796,863,3,16,8,0,797,804,
5,99,0,0,798,800,5,113,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,
0,801,805,3,6,3,0,802,803,5,94,0,0,803,805,3,8,4,0,804,799,1,0,0,0,804,802,
1,0,0,0,805,806,1,0,0,0,806,807,3,430,215,0,807,863,1,0,0,0,808,812,5,92,
0,0,809,813,3,6,3,0,810,811,5,94,0,0,811,813,3,8,4,0,812,809,1,0,0,0,812,
810,1,0,0,0,813,814,1,0,0,0,814,815,3,430,215,0,815,863,1,0,0,0,816,818,
5,99,0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,863,3,60,30,
0,820,821,5,113,0,0,821,823,7,1,0,0,822,824,3,432,216,0,823,822,1,0,0,0,
823,824,1,0,0,0,824,825,1,0,0,0,825,863,3,56,28,0,826,827,5,113,0,0,827,
828,5,106,0,0,828,830,5,72,0,0,829,831,3,432,216,0,830,829,1,0,0,0,830,831,
1,0,0,0,831,832,1,0,0,0,832,863,3,14,7,0,833,835,7,2,0,0,834,836,5,106,0,
0,835,834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,838,3,8,4,0,838,839,
3,14,7,0,839,863,1,0,0,0,840,842,5,106,0,0,841,840,1,0,0,0,841,842,1,0,0,
0,842,848,1,0,0,0,843,845,5,72,0,0,844,846,3,432,216,0,845,844,1,0,0,0,845,
846,1,0,0,0,846,849,1,0,0,0,847,849,3,8,4,0,848,843,1,0,0,0,848,847,1,0,
0,0,849,850,1,0,0,0,850,863,3,14,7,0,851,863,3,86,43,0,852,855,3,88,44,0,
853,856,3,74,37,0,854,856,3,76,38,0,855,853,1,0,0,0,855,854,1,0,0,0,855,
856,1,0,0,0,856,863,1,0,0,0,857,860,3,70,35,0,858,861,3,74,37,0,859,861,
3,76,38,0,860,858,1,0,0,0,860,859,1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,
0,862,770,1,0,0,0,862,772,1,0,0,0,862,774,1,0,0,0,862,780,1,0,0,0,862,787,
1,0,0,0,862,794,1,0,0,0,862,797,1,0,0,0,862,808,1,0,0,0,862,817,1,0,0,0,
862,820,1,0,0,0,862,826,1,0,0,0,862,833,1,0,0,0,862,841,1,0,0,0,862,851,
1,0,0,0,862,852,1,0,0,0,862,857,1,0,0,0,863,55,1,0,0,0,864,869,3,58,29,0,
865,866,5,2,0,0,866,868,3,58,29,0,867,865,1,0,0,0,868,871,1,0,0,0,869,867,
1,0,0,0,869,870,1,0,0,0,870,57,1,0,0,0,871,869,1,0,0,0,872,873,3,344,172,
0,873,874,5,1,0,0,874,875,3,114,57,0,875,59,1,0,0,0,876,878,3,432,216,0,
877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,880,5,108,0,0,880,881,
3,62,31,0,881,882,3,24,12,0,882,61,1,0,0,0,883,891,5,15,0,0,884,891,3,64,
32,0,885,886,5,10,0,0,886,891,5,11,0,0,887,888,5,10,0,0,888,889,5,11,0,0,
889,891,5,1,0,0,890,883,1,0,0,0,890,884,1,0,0,0,890,885,1,0,0,0,890,887,
1,0,0,0,891,63,1,0,0,0,892,899,3,308,154,0,893,899,3,304,152,0,894,899,3,
300,150,0,895,899,3,288,144,0,896,899,5,16,0,0,897,899,3,296,148,0,898,892,
1,0,0,0,898,893,1,0,0,0,898,894,1,0,0,0,898,895,1,0,0,0,898,896,1,0,0,0,
898,897,1,0,0,0,899,65,1,0,0,0,900,902,3,432,216,0,901,900,1,0,0,0,901,902,
1,0,0,0,902,903,1,0,0,0,903,904,5,102,0,0,904,905,3,344,172,0,905,67,1,0,
0,0,906,908,3,432,216,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,
909,910,5,112,0,0,910,911,3,344,172,0,911,912,3,24,12,0,912,69,1,0,0,0,913,
914,3,72,36,0,914,915,3,24,12,0,915,71,1,0,0,0,916,919,3,348,174,0,917,918,
5,13,0,0,918,920,3,344,172,0,919,917,1,0,0,0,919,920,1,0,0,0,920,73,1,0,
0,0,921,922,5,14,0,0,922,925,5,84,0,0,923,924,5,13,0,0,924,926,3,344,172,
0,925,923,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,3,254,127,0,928,
75,1,0,0,0,929,930,5,14,0,0,930,935,3,78,39,0,931,932,5,2,0,0,932,934,3,
78,39,0,933,931,1,0,0,0,934,937,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,
936,77,1,0,0,0,937,935,1,0,0,0,938,939,5,82,0,0,939,948,3,254,127,0,940,
941,5,82,0,0,941,942,5,13,0,0,942,943,3,344,172,0,943,944,3,254,127,0,944,
948,1,0,0,0,945,948,3,80,40,0,946,948,3,426,213,0,947,938,1,0,0,0,947,940,
1,0,0,0,947,945,1,0,0,0,947,946,1,0,0,0,948,79,1,0,0,0,949,950,5,84,0,0,
950,952,5,13,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,953,1,0,0,0,953,954,
3,344,172,0,954,955,5,1,0,0,955,956,3,82,41,0,956,81,1,0,0,0,957,960,3,274,
137,0,958,960,3,260,130,0,959,957,1,0,0,0,959,958,1,0,0,0,960,83,1,0,0,0,
961,963,5,64,0,0,962,961,1,0,0,0,962,963,1,0,0,0,963,964,1,0,0,0,964,965,
5,100,0,0,965,966,3,72,36,0,966,967,3,24,12,0,967,85,1,0,0,0,968,970,5,64,
0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,1,0,0,0,971,972,5,100,0,0,972,
973,3,72,36,0,973,974,3,24,12,0,974,975,5,1,0,0,975,976,3,470,235,0,976,
87,1,0,0,0,977,978,5,64,0,0,978,979,3,72,36,0,979,980,3,24,12,0,980,89,1,
0,0,0,981,982,5,70,0,0,982,983,3,438,219,0,983,91,1,0,0,0,984,985,5,91,0,
0,985,986,3,446,223,0,986,93,1,0,0,0,987,988,5,103,0,0,988,989,3,446,223,
0,989,95,1,0,0,0,990,991,3,46,23,0,991,992,5,1,0,0,992,993,3,98,49,0,993,
994,5,4,0,0,994,97,1,0,0,0,995,996,3,438,219,0,996,998,3,92,46,0,997,999,
3,94,47,0,998,997,1,0,0,0,998,999,1,0,0,0,999,99,1,0,0,0,1000,1001,5,109,
0,0,1001,1003,3,348,174,0,1002,1004,3,106,53,0,1003,1002,1,0,0,0,1003,1004,
1,0,0,0,1004,1007,1,0,0,0,1005,1006,5,120,0,0,1006,1008,3,446,223,0,1007,
1005,1,0,0,0,1007,1008,1,0,0,0,1008,1010,1,0,0,0,1009,1011,3,94,47,0,1010,
1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,0,0,1012,1018,5,184,0,0,1013,
1014,3,110,55,0,1014,1015,3,50,25,0,1015,1017,1,0,0,0,1016,1013,1,0,0,0,
1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,1021,1,0,0,0,
1020,1018,1,0,0,0,1021,1022,5,185,0,0,1022,101,1,0,0,0,1023,1024,5,69,0,
0,1024,1025,3,348,174,0,1025,1026,5,184,0,0,1026,1031,3,108,54,0,1027,1028,
5,2,0,0,1028,1030,3,108,54,0,1029,1027,1,0,0,0,1030,1033,1,0,0,0,1031,1029,
1,0,0,0,1031,1032,1,0,0,0,1032,1035,1,0,0,0,1033,1031,1,0,0,0,1034,1036,
5,2,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,
5,185,0,0,1038,103,1,0,0,0,1039,1040,3,110,55,0,1040,1043,3,348,174,0,1041,
1042,5,70,0,0,1042,1044,3,434,217,0,1043,1041,1,0,0,0,1043,1044,1,0,0,0,
1044,105,1,0,0,0,1045,1046,5,17,0,0,1046,1051,3,104,52,0,1047,1048,5,2,0,
0,1048,1050,3,104,52,0,1049,1047,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,
0,0,1051,1052,1,0,0,0,1052,1054,1,0,0,0,1053,1051,1,0,0,0,1054,1055,5,18,
0,0,1055,107,1,0,0,0,1056,1057,3,110,55,0,1057,1058,3,344,172,0,1058,109,
1,0,0,0,1059,1060,5,19,0,0,1060,1062,3,112,56,0,1061,1059,1,0,0,0,1062,1065,
1,0,0,0,1063,1061,1,0,0,0,1063,1064,1,0,0,0,1064,111,1,0,0,0,1065,1063,1,
0,0,0,1066,1067,3,470,235,0,1067,1068,3,254,127,0,1068,1072,1,0,0,0,1069,
1072,3,344,172,0,1070,1072,3,346,173,0,1071,1066,1,0,0,0,1071,1069,1,0,0,
0,1071,1070,1,0,0,0,1072,113,1,0,0,0,1073,1083,3,236,118,0,1074,1083,3,232,
116,0,1075,1076,3,334,167,0,1076,1077,3,270,135,0,1077,1078,3,114,57,0,1078,
1083,1,0,0,0,1079,1083,3,274,137,0,1080,1083,3,116,58,0,1081,1083,3,260,
130,0,1082,1073,1,0,0,0,1082,1074,1,0,0,0,1082,1075,1,0,0,0,1082,1079,1,
0,0,0,1082,1080,1,0,0,0,1082,1081,1,0,0,0,1083,115,1,0,0,0,1084,1085,5,20,
0,0,1085,1102,3,116,58,0,1086,1102,3,118,59,0,1087,1102,3,122,61,0,1088,
1102,3,130,65,0,1089,1102,3,132,66,0,1090,1102,3,120,60,0,1091,1102,3,128,
64,0,1092,1102,3,124,62,0,1093,1102,3,134,67,0,1094,1102,3,136,68,0,1095,
1102,3,138,69,0,1096,1102,3,140,70,0,1097,1102,3,142,71,0,1098,1102,3,146,
73,0,1099,1102,3,126,63,0,1100,1102,3,144,72,0,1101,1084,1,0,0,0,1101,1086,
1,0,0,0,1101,1087,1,0,0,0,1101,1088,1,0,0,0,1101,1089,1,0,0,0,1101,1090,
1,0,0,0,1101,1091,1,0,0,0,1101,1092,1,0,0,0,1101,1093,1,0,0,0,1101,1094,
1,0,0,0,1101,1095,1,0,0,0,1101,1096,1,0,0,0,1101,1097,1,0,0,0,1101,1098,
1,0,0,0,1101,1099,1,0,0,0,1101,1100,1,0,0,0,1102,117,1,0,0,0,1103,1104,5,
131,0,0,1104,1105,3,150,75,0,1105,119,1,0,0,0,1106,1107,5,128,0,0,1107,1108,
3,150,75,0,1108,121,1,0,0,0,1109,1110,5,132,0,0,1110,1111,3,150,75,0,1111,
123,1,0,0,0,1112,1113,5,133,0,0,1113,1114,3,150,75,0,1114,125,1,0,0,0,1115,
1116,5,134,0,0,1116,1117,3,150,75,0,1117,127,1,0,0,0,1118,1119,5,135,0,0,
1119,1120,3,150,75,0,1120,129,1,0,0,0,1121,1122,5,127,0,0,1122,1123,3,150,
75,0,1123,131,1,0,0,0,1124,1125,5,136,0,0,1125,1126,3,150,75,0,1126,133,
1,0,0,0,1127,1128,5,129,0,0,1128,1129,3,150,75,0,1129,135,1,0,0,0,1130,1131,
5,130,0,0,1131,1132,3,150,75,0,1132,137,1,0,0,0,1133,1134,5,137,0,0,1134,
1135,3,150,75,0,1135,139,1,0,0,0,1136,1137,5,138,0,0,1137,1138,3,150,75,
0,1138,141,1,0,0,0,1139,1140,5,139,0,0,1140,1141,3,150,75,0,1141,143,1,0,
0,0,1142,1143,5,140,0,0,1143,1144,3,150,75,0,1144,145,1,0,0,0,1145,1146,
5,141,0,0,1146,1147,5,13,0,0,1147,1148,5,142,0,0,1148,1149,5,6,0,0,1149,
1150,3,148,74,0,1150,1151,5,7,0,0,1151,147,1,0,0,0,1152,1153,3,478,239,0,
1153,149,1,0,0,0,1154,1158,5,6,0,0,1155,1157,3,152,76,0,1156,1155,1,0,0,
0,1157,1160,1,0,0,0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1161,1,0,0,
0,1160,1158,1,0,0,0,1161,1162,5,7,0,0,1162,151,1,0,0,0,1163,1164,5,153,0,
0,1164,1165,5,14,0,0,1165,1262,3,116,58,0,1166,1167,5,144,0,0,1167,1168,
5,14,0,0,1168,1262,3,116,58,0,1169,1170,5,145,0,0,1170,1171,5,14,0,0,1171,
1262,3,116,58,0,1172,1173,5,151,0,0,1173,1174,5,14,0,0,1174,1262,3,116,58,
0,1175,1176,5,152,0,0,1176,1178,5,14,0,0,1177,1179,5,21,0,0,1178,1177,1,
0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1185,5,10,0,0,1181,1184,3,
116,58,0,1182,1184,5,2,0,0,1183,1181,1,0,0,0,1183,1182,1,0,0,0,1184,1187,
1,0,0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,1188,1,0,0,0,1187,1185,
1,0,0,0,1188,1262,5,11,0,0,1189,1190,5,146,0,0,1190,1191,5,14,0,0,1191,1262,
3,174,87,0,1192,1193,5,169,0,0,1193,1194,5,14,0,0,1194,1262,3,176,88,0,1195,
1196,5,147,0,0,1196,1197,5,14,0,0,1197,1262,3,194,97,0,1198,1199,5,148,0,
0,1199,1200,5,14,0,0,1200,1262,3,166,83,0,1201,1202,5,149,0,0,1202,1203,
5,14,0,0,1203,1262,3,168,84,0,1204,1205,5,150,0,0,1205,1206,5,14,0,0,1206,
1262,3,236,118,0,1207,1208,5,154,0,0,1208,1210,5,14,0,0,1209,1211,5,20,0,
0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,1262,3,188,
94,0,1213,1214,5,170,0,0,1214,1216,5,14,0,0,1215,1217,5,20,0,0,1216,1215,
1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,0,1218,1262,3,154,77,0,1219,1220,
5,174,0,0,1220,1222,5,14,0,0,1221,1223,5,20,0,0,1222,1221,1,0,0,0,1222,1223,
1,0,0,0,1223,1224,1,0,0,0,1224,1262,3,162,81,0,1225,1226,5,171,0,0,1226,
1228,5,14,0,0,1227,1229,5,20,0,0,1228,1227,1,0,0,0,1228,1229,1,0,0,0,1229,
1230,1,0,0,0,1230,1262,3,156,78,0,1231,1232,5,163,0,0,1232,1233,5,14,0,0,
1233,1262,3,116,58,0,1234,1235,5,164,0,0,1235,1236,5,14,0,0,1236,1262,3,
172,86,0,1237,1238,5,166,0,0,1238,1239,5,14,0,0,1239,1262,3,170,85,0,1240,
1241,5,165,0,0,1241,1242,5,14,0,0,1242,1262,3,116,58,0,1243,1244,5,159,0,
0,1244,1246,5,14,0,0,1245,1247,5,20,0,0,1246,1245,1,0,0,0,1246,1247,1,0,
0,0,1247,1248,1,0,0,0,1248,1262,3,180,90,0,1249,1250,5,162,0,0,1250,1252,
5,14,0,0,1251,1253,5,20,0,0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1254,
1,0,0,0,1254,1262,3,182,91,0,1255,1262,5,2,0,0,1256,1262,3,210,105,0,1257,
1262,3,192,96,0,1258,1259,5,143,0,0,1259,1260,5,14,0,0,1260,1262,3,116,58,
0,1261,1163,1,0,0,0,1261,1166,1,0,0,0,1261,1169,1,0,0,0,1261,1172,1,0,0,
0,1261,1175,1,0,0,0,1261,1189,1,0,0,0,1261,1192,1,0,0,0,1261,1195,1,0,0,
0,1261,1198,1,0,0,0,1261,1201,1,0,0,0,1261,1204,1,0,0,0,1261,1207,1,0,0,
0,1261,1213,1,0,0,0,1261,1219,1,0,0,0,1261,1225,1,0,0,0,1261,1231,1,0,0,
0,1261,1234,1,0,0,0,1261,1237,1,0,0,0,1261,1240,1,0,0,0,1261,1243,1,0,0,
0,1261,1249,1,0,0,0,1261,1255,1,0,0,0,1261,1256,1,0,0,0,1261,1257,1,0,0,
0,1261,1258,1,0,0,0,1262,153,1,0,0,0,1263,1264,3,188,94,0,1264,155,1,0,0,
0,1265,1266,5,172,0,0,1266,1267,5,13,0,0,1267,1268,3,158,79,0,1268,157,1,
0,0,0,1269,1270,5,173,0,0,1270,1271,5,6,0,0,1271,1272,3,160,80,0,1272,1273,
5,7,0,0,1273,159,1,0,0,0,1274,1275,3,206,103,0,1275,161,1,0,0,0,1276,1277,
5,175,0,0,1277,1278,5,6,0,0,1278,1279,3,164,82,0,1279,1280,5,7,0,0,1280,
163,1,0,0,0,1281,1282,3,206,103,0,1282,165,1,0,0,0,1283,1284,3,206,103,0,
1284,167,1,0,0,0,1285,1286,3,206,103,0,1286,169,1,0,0,0,1287,1288,3,208,
104,0,1288,171,1,0,0,0,1289,1290,3,478,239,0,1290,173,1,0,0,0,1291,1292,
3,206,103,0,1292,175,1,0,0,0,1293,1294,3,178,89,0,1294,177,1,0,0,0,1295,
1296,5,167,0,0,1296,1297,5,13,0,0,1297,1298,5,168,0,0,1298,179,1,0,0,0,1299,
1300,3,186,93,0,1300,181,1,0,0,0,1301,1302,3,184,92,0,1302,183,1,0,0,0,1303,
1304,5,160,0,0,1304,1305,5,13,0,0,1305,1306,5,161,0,0,1306,185,1,0,0,0,1307,
1308,5,157,0,0,1308,1309,5,13,0,0,1309,1310,5,158,0,0,1310,187,1,0,0,0,1311,
1312,5,155,0,0,1312,1313,5,13,0,0,1313,1314,5,156,0,0,1314,1315,5,6,0,0,
1315,1316,3,190,95,0,1316,1317,5,7,0,0,1317,189,1,0,0,0,1318,1319,3,206,
103,0,1319,191,1,0,0,0,1320,1321,5,195,0,0,1321,193,1,0,0,0,1322,1323,5,
195,0,0,1323,195,1,0,0,0,1324,1332,3,240,120,0,1325,1332,3,234,117,0,1326,
1327,3,334,167,0,1327,1328,3,270,135,0,1328,1329,3,196,98,0,1329,1332,1,
0,0,0,1330,1332,3,274,137,0,1331,1324,1,0,0,0,1331,1325,1,0,0,0,1331,1326,
1,0,0,0,1331,1330,1,0,0,0,1332,197,1,0,0,0,1333,1338,3,114,57,0,1334,1335,
5,2,0,0,1335,1337,3,114,57,0,1336,1334,1,0,0,0,1337,1340,1,0,0,0,1338,1336,
1,0,0,0,1338,1339,1,0,0,0,1339,199,1,0,0,0,1340,1338,1,0,0,0,1341,1355,3,
248,124,0,1342,1343,5,82,0,0,1343,1355,3,338,169,0,1344,1355,3,252,126,0,
1345,1355,3,250,125,0,1346,1355,3,326,163,0,1347,1355,3,244,122,0,1348,1349,
5,6,0,0,1349,1350,3,114,57,0,1350,1351,5,7,0,0,1351,1355,1,0,0,0,1352,1355,
3,202,101,0,1353,1355,3,344,172,0,1354,1341,1,0,0,0,1354,1342,1,0,0,0,1354,
1344,1,0,0,0,1354,1345,1,0,0,0,1354,1346,1,0,0,0,1354,1347,1,0,0,0,1354,
1348,1,0,0,0,1354,1352,1,0,0,0,1354,1353,1,0,0,0,1355,201,1,0,0,0,1356,1364,
3,204,102,0,1357,1364,3,208,104,0,1358,1364,3,206,103,0,1359,1364,3,210,
105,0,1360,1364,3,212,106,0,1361,1364,3,216,108,0,1362,1364,3,214,107,0,
1363,1356,1,0,0,0,1363,1357,1,0,0,0,1363,1358,1,0,0,0,1363,1359,1,0,0,0,
1363,1360,1,0,0,0,1363,1361,1,0,0,0,1363,1362,1,0,0,0,1364,203,1,0,0,0,1365,
1366,5,79,0,0,1366,205,1,0,0,0,1367,1368,7,3,0,0,1368,207,1,0,0,0,1369,1370,
7,4,0,0,1370,209,1,0,0,0,1371,1373,3,478,239,0,1372,1371,1,0,0,0,1373,1374,
1,0,0,0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,211,1,0,0,0,1376,1386,5,
22,0,0,1377,1387,3,62,31,0,1378,1383,3,344,172,0,1379,1380,5,13,0,0,1380,
1382,3,344,172,0,1381,1379,1,0,0,0,1382,1385,1,0,0,0,1383,1381,1,0,0,0,1383,
1384,1,0,0,0,1384,1387,1,0,0,0,1385,1383,1,0,0,0,1386,1377,1,0,0,0,1386,
1378,1,0,0,0,1387,213,1,0,0,0,1388,1390,5,64,0,0,1389,1388,1,0,0,0,1389,
1390,1,0,0,0,1390,1392,1,0,0,0,1391,1393,3,442,221,0,1392,1391,1,0,0,0,1392,
1393,1,0,0,0,1393,1394,1,0,0,0,1394,1396,5,10,0,0,1395,1397,3,218,109,0,
1396,1395,1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,0,0,1398,1399,5,11,0,0,
1399,215,1,0,0,0,1400,1402,5,64,0,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,
1402,1404,1,0,0,0,1403,1405,3,442,221,0,1404,1403,1,0,0,0,1404,1405,1,0,
0,0,1405,1406,1,0,0,0,1406,1408,5,184,0,0,1407,1409,3,218,109,0,1408,1407,
1,0,0,0,1408,1409,1,0,0,0,1409,1410,1,0,0,0,1410,1411,5,185,0,0,1411,217,
1,0,0,0,1412,1417,3,220,110,0,1413,1414,5,2,0,0,1414,1416,3,220,110,0,1415,
1413,1,0,0,0,1416,1419,1,0,0,0,1417,1415,1,0,0,0,1417,1418,1,0,0,0,1418,
1421,1,0,0,0,1419,1417,1,0,0,0,1420,1422,5,2,0,0,1421,1420,1,0,0,0,1421,
1422,1,0,0,0,1422,219,1,0,0,0,1423,1429,3,222,111,0,1424,1429,3,224,112,
0,1425,1429,3,226,113,0,1426,1429,3,228,114,0,1427,1429,3,230,115,0,1428,
1423,1,0,0,0,1428,1424,1,0,0,0,1428,1425,1,0,0,0,1428,1426,1,0,0,0,1428,
1427,1,0,0,0,1429,221,1,0,0,0,1430,1431,3,114,57,0,1431,223,1,0,0,0,1432,
1433,3,114,57,0,1433,1434,5,14,0,0,1434,1435,3,114,57,0,1435,225,1,0,0,0,
1436,1437,7,5,0,0,1437,1438,3,114,57,0,1438,227,1,0,0,0,1439,1440,5,75,0,
0,1440,1441,5,6,0,0,1441,1442,3,114,57,0,1442,1443,5,7,0,0,1443,1446,3,220,
110,0,1444,1445,5,68,0,0,1445,1447,3,220,110,0,1446,1444,1,0,0,0,1446,1447,
1,0,0,0,1447,229,1,0,0,0,1448,1450,5,115,0,0,1449,1448,1,0,0,0,1449,1450,
1,0,0,0,1450,1451,1,0,0,0,1451,1452,5,74,0,0,1452,1453,5,6,0,0,1453,1454,
3,388,194,0,1454,1455,5,7,0,0,1455,1456,3,220,110,0,1456,231,1,0,0,0,1457,
1458,5,85,0,0,1458,1459,3,114,57,0,1459,233,1,0,0,0,1460,1461,5,85,0,0,1461,
1462,3,196,98,0,1462,235,1,0,0,0,1463,1464,3,18,9,0,1464,1465,3,238,119,
0,1465,237,1,0,0,0,1466,1467,5,3,0,0,1467,1479,3,114,57,0,1468,1469,5,6,
0,0,1469,1470,3,26,13,0,1470,1471,5,7,0,0,1471,1472,5,3,0,0,1472,1473,3,
114,57,0,1473,1479,1,0,0,0,1474,1479,3,22,11,0,1475,1476,5,117,0,0,1476,
1477,5,3,0,0,1477,1479,3,114,57,0,1478,1466,1,0,0,0,1478,1468,1,0,0,0,1478,
1474,1,0,0,0,1478,1475,1,0,0,0,1479,239,1,0,0,0,1480,1481,3,18,9,0,1481,
1482,3,242,121,0,1482,241,1,0,0,0,1483,1484,5,3,0,0,1484,1489,3,196,98,0,
1485,1486,5,117,0,0,1486,1487,5,3,0,0,1487,1489,3,196,98,0,1488,1483,1,0,
0,0,1488,1485,1,0,0,0,1489,243,1,0,0,0,1490,1491,3,18,9,0,1491,1492,3,246,
123,0,1492,245,1,0,0,0,1493,1503,3,22,11,0,1494,1500,5,117,0,0,1495,1496,
5,117,0,0,1496,1500,5,5,0,0,1497,1498,5,122,0,0,1498,1500,5,5,0,0,1499,1494,
1,0,0,0,1499,1495,1,0,0,0,1499,1497,1,0,0,0,1500,1501,1,0,0,0,1501,1503,
3,22,11,0,1502,1493,1,0,0,0,1502,1499,1,0,0,0,1503,247,1,0,0,0,1504,1505,
5,84,0,0,1505,249,1,0,0,0,1506,1507,5,78,0,0,1507,1508,3,470,235,0,1508,
1509,3,254,127,0,1509,251,1,0,0,0,1510,1511,5,64,0,0,1511,1512,3,470,235,
0,1512,1513,3,254,127,0,1513,253,1,0,0,0,1514,1516,5,6,0,0,1515,1517,3,256,
128,0,1516,1515,1,0,0,0,1516,1517,1,0,0,0,1517,1518,1,0,0,0,1518,1519,5,
7,0,0,1519,255,1,0,0,0,1520,1525,3,258,129,0,1521,1522,5,2,0,0,1522,1524,
3,258,129,0,1523,1521,1,0,0,0,1524,1527,1,0,0,0,1525,1523,1,0,0,0,1525,1526,
1,0,0,0,1526,1537,1,0,0,0,1527,1525,1,0,0,0,1528,1533,3,198,99,0,1529,1530,
5,2,0,0,1530,1532,3,258,129,0,1531,1529,1,0,0,0,1532,1535,1,0,0,0,1533,1531,
1,0,0,0,1533,1534,1,0,0,0,1534,1537,1,0,0,0,1535,1533,1,0,0,0,1536,1520,
1,0,0,0,1536,1528,1,0,0,0,1537,257,1,0,0,0,1538,1539,3,414,207,0,1539,1540,
3,114,57,0,1540,259,1,0,0,0,1541,1542,6,130,-1,0,1542,1543,3,274,137,0,1543,
1544,7,6,0,0,1544,1545,3,262,131,0,1545,1551,1,0,0,0,1546,1547,10,2,0,0,
1547,1548,5,25,0,0,1548,1550,3,262,131,0,1549,1546,1,0,0,0,1550,1553,1,0,
0,0,1551,1549,1,0,0,0,1551,1552,1,0,0,0,1552,261,1,0,0,0,1553,1551,1,0,0,
0,1554,1555,3,264,132,0,1555,1556,3,266,133,0,1556,263,1,0,0,0,1557,1558,
5,10,0,0,1558,1559,3,114,57,0,1559,1560,5,11,0,0,1560,1563,1,0,0,0,1561,
1563,3,344,172,0,1562,1557,1,0,0,0,1562,1561,1,0,0,0,1563,265,1,0,0,0,1564,
1577,3,268,134,0,1565,1567,3,328,164,0,1566,1565,1,0,0,0,1567,1570,1,0,0,
0,1568,1566,1,0,0,0,1568,1569,1,0,0,0,1569,1574,1,0,0,0,1570,1568,1,0,0,
0,1571,1572,3,340,170,0,1572,1573,3,268,134,0,1573,1575,1,0,0,0,1574,1571,
1,0,0,0,1574,1575,1,0,0,0,1575,1577,1,0,0,0,1576,1564,1,0,0,0,1576,1568,
1,0,0,0,1577,267,1,0,0,0,1578,1579,3,270,135,0,1579,1580,3,196,98,0,1580,
269,1,0,0,0,1581,1584,5,1,0,0,1582,1584,3,272,136,0,1583,1581,1,0,0,0,1583,
1582,1,0,0,0,1584,271,1,0,0,0,1585,1604,5,27,0,0,1586,1604,5,28,0,0,1587,
1604,5,29,0,0,1588,1604,5,30,0,0,1589,1604,5,31,0,0,1590,1604,5,32,0,0,1591,
1604,5,33,0,0,1592,1593,5,18,0,0,1593,1594,5,18,0,0,1594,1595,5,18,0,0,1595,
1604,5,1,0,0,1596,1597,5,18,0,0,1597,1598,5,18,0,0,1598,1604,5,1,0,0,1599,
1604,5,34,0,0,1600,1604,5,35,0,0,1601,1604,5,36,0,0,1602,1604,5,37,0,0,1603,
1585,1,0,0,0,1603,1586,1,0,0,0,1603,1587,1,0,0,0,1603,1588,1,0,0,0,1603,
1589,1,0,0,0,1603,1590,1,0,0,0,1603,1591,1,0,0,0,1603,1592,1,0,0,0,1603,
1596,1,0,0,0,1603,1599,1,0,0,0,1603,1600,1,0,0,0,1603,1601,1,0,0,0,1603,
1602,1,0,0,0,1604,273,1,0,0,0,1605,1611,3,276,138,0,1606,1607,5,12,0,0,1607,
1608,3,196,98,0,1608,1609,5,14,0,0,1609,1610,3,196,98,0,1610,1612,1,0,0,
0,1611,1606,1,0,0,0,1611,1612,1,0,0,0,1612,275,1,0,0,0,1613,1618,3,278,139,
0,1614,1615,5,38,0,0,1615,1617,3,278,139,0,1616,1614,1,0,0,0,1617,1620,1,
0,0,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,277,1,0,0,0,1620,1618,1,0,
0,0,1621,1626,3,280,140,0,1622,1623,5,39,0,0,1623,1625,3,280,140,0,1624,
1622,1,0,0,0,1625,1628,1,0,0,0,1626,1624,1,0,0,0,1626,1627,1,0,0,0,1627,
279,1,0,0,0,1628,1626,1,0,0,0,1629,1634,3,282,141,0,1630,1631,5,40,0,0,1631,
1633,3,282,141,0,1632,1630,1,0,0,0,1633,1636,1,0,0,0,1634,1632,1,0,0,0,1634,
1635,1,0,0,0,1635,281,1,0,0,0,1636,1634,1,0,0,0,1637,1641,3,286,143,0,1638,
1639,3,284,142,0,1639,1640,3,286,143,0,1640,1642,1,0,0,0,1641,1638,1,0,0,
0,1641,1642,1,0,0,0,1642,1648,1,0,0,0,1643,1644,5,82,0,0,1644,1645,3,284,
142,0,1645,1646,3,286,143,0,1646,1648,1,0,0,0,1647,1637,1,0,0,0,1647,1643,
1,0,0,0,1648,283,1,0,0,0,1649,1650,7,7,0,0,1650,285,1,0,0,0,1651,1657,3,
290,145,0,1652,1658,3,350,175,0,1653,1658,3,354,177,0,1654,1655,3,288,144,
0,1655,1656,3,290,145,0,1656,1658,1,0,0,0,1657,1652,1,0,0,0,1657,1653,1,
0,0,0,1657,1654,1,0,0,0,1657,1658,1,0,0,0,1658,1664,1,0,0,0,1659,1660,5,
82,0,0,1660,1661,3,288,144,0,1661,1662,3,290,145,0,1662,1664,1,0,0,0,1663,
1651,1,0,0,0,1663,1659,1,0,0,0,1664,287,1,0,0,0,1665,1670,5,42,0,0,1666,
1670,5,18,0,0,1667,1670,5,43,0,0,1668,1670,5,17,0,0,1669,1665,1,0,0,0,1669,
1666,1,0,0,0,1669,1667,1,0,0,0,1669,1668,1,0,0,0,1670,289,1,0,0,0,1671,1676,
3,292,146,0,1672,1673,5,44,0,0,1673,1675,3,292,146,0,1674,1672,1,0,0,0,1675,
1678,1,0,0,0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,1687,1,0,0,0,1678,
1676,1,0,0,0,1679,1682,5,82,0,0,1680,1681,5,44,0,0,1681,1683,3,292,146,0,
1682,1680,1,0,0,0,1683,1684,1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,
1685,1687,1,0,0,0,1686,1671,1,0,0,0,1686,1679,1,0,0,0,1687,291,1,0,0,0,1688,
1693,3,294,147,0,1689,1690,5,45,0,0,1690,1692,3,294,147,0,1691,1689,1,0,
0,0,1692,1695,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,1704,1,0,
0,0,1695,1693,1,0,0,0,1696,1699,5,82,0,0,1697,1698,5,45,0,0,1698,1700,3,
294,147,0,1699,1697,1,0,0,0,1700,1701,1,0,0,0,1701,1699,1,0,0,0,1701,1702,
1,0,0,0,1702,1704,1,0,0,0,1703,1688,1,0,0,0,1703,1696,1,0,0,0,1704,293,1,
0,0,0,1705,1710,3,298,149,0,1706,1707,5,46,0,0,1707,1709,3,298,149,0,1708,
1706,1,0,0,0,1709,1712,1,0,0,0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,
1721,1,0,0,0,1712,1710,1,0,0,0,1713,1716,5,82,0,0,1714,1715,5,46,0,0,1715,
1717,3,298,149,0,1716,1714,1,0,0,0,1717,1718,1,0,0,0,1718,1716,1,0,0,0,1718,
1719,1,0,0,0,1719,1721,1,0,0,0,1720,1705,1,0,0,0,1720,1713,1,0,0,0,1721,
295,1,0,0,0,1722,1723,7,8,0,0,1723,297,1,0,0,0,1724,1730,3,302,151,0,1725,
1726,3,300,150,0,1726,1727,3,302,151,0,1727,1729,1,0,0,0,1728,1725,1,0,0,
0,1729,1732,1,0,0,0,1730,1728,1,0,0,0,1730,1731,1,0,0,0,1731,1742,1,0,0,
0,1732,1730,1,0,0,0,1733,1737,5,82,0,0,1734,1735,3,300,150,0,1735,1736,3,
302,151,0,1736,1738,1,0,0,0,1737,1734,1,0,0,0,1738,1739,1,0,0,0,1739,1737,
1,0,0,0,1739,1740,1,0,0,0,1740,1742,1,0,0,0,1741,1724,1,0,0,0,1741,1733,
1,0,0,0,1742,299,1,0,0,0,1743,1750,5,47,0,0,1744,1745,5,18,0,0,1745,1746,
5,18,0,0,1746,1750,5,18,0,0,1747,1748,5,18,0,0,1748,1750,5,18,0,0,1749,1743,
1,0,0,0,1749,1744,1,0,0,0,1749,1747,1,0,0,0,1750,301,1,0,0,0,1751,1757,3,
306,153,0,1752,1753,3,304,152,0,1753,1754,3,306,153,0,1754,1756,1,0,0,0,
1755,1752,1,0,0,0,1756,1759,1,0,0,0,1757,1755,1,0,0,0,1757,1758,1,0,0,0,
1758,1769,1,0,0,0,1759,1757,1,0,0,0,1760,1764,5,82,0,0,1761,1762,3,304,152,
0,1762,1763,3,306,153,0,1763,1765,1,0,0,0,1764,1761,1,0,0,0,1765,1766,1,
0,0,0,1766,1764,1,0,0,0,1766,1767,1,0,0,0,1767,1769,1,0,0,0,1768,1751,1,
0,0,0,1768,1760,1,0,0,0,1769,303,1,0,0,0,1770,1771,7,9,0,0,1771,305,1,0,
0,0,1772,1778,3,310,155,0,1773,1774,3,308,154,0,1774,1775,3,310,155,0,1775,
1777,1,0,0,0,1776,1773,1,0,0,0,1777,1780,1,0,0,0,1778,1776,1,0,0,0,1778,
1779,1,0,0,0,1779,1790,1,0,0,0,1780,1778,1,0,0,0,1781,1785,5,82,0,0,1782,
1783,3,308,154,0,1783,1784,3,310,155,0,1784,1786,1,0,0,0,1785,1782,1,0,0,
0,1786,1787,1,0,0,0,1787,1785,1,0,0,0,1787,1788,1,0,0,0,1788,1790,1,0,0,
0,1789,1772,1,0,0,0,1789,1781,1,0,0,0,1790,307,1,0,0,0,1791,1792,7,10,0,
0,1792,309,1,0,0,0,1793,1794,3,312,156,0,1794,1795,3,310,155,0,1795,1808,
1,0,0,0,1796,1808,3,320,160,0,1797,1808,3,322,161,0,1798,1801,3,314,157,
0,1799,1801,3,318,159,0,1800,1798,1,0,0,0,1800,1799,1,0,0,0,1801,1802,1,
0,0,0,1802,1803,5,82,0,0,1803,1808,1,0,0,0,1804,1805,3,332,166,0,1805,1806,
3,334,167,0,1806,1808,1,0,0,0,1807,1793,1,0,0,0,1807,1796,1,0,0,0,1807,1797,
1,0,0,0,1807,1800,1,0,0,0,1807,1804,1,0,0,0,1808,311,1,0,0,0,1809,1813,3,
314,157,0,1810,1813,3,316,158,0,1811,1813,3,318,159,0,1812,1809,1,0,0,0,
1812,1810,1,0,0,0,1812,1811,1,0,0,0,1813,313,1,0,0,0,1814,1815,5,49,0,0,
1815,315,1,0,0,0,1816,1817,5,53,0,0,1817,317,1,0,0,0,1818,1819,5,15,0,0,
1819,319,1,0,0,0,1820,1821,5,115,0,0,1821,1822,3,310,155,0,1822,321,1,0,
0,0,1823,1824,3,334,167,0,1824,1825,3,324,162,0,1825,1834,1,0,0,0,1826,1830,
3,200,100,0,1827,1829,3,328,164,0,1828,1827,1,0,0,0,1829,1832,1,0,0,0,1830,
1828,1,0,0,0,1830,1831,1,0,0,0,1831,1834,1,0,0,0,1832,1830,1,0,0,0,1833,
1823,1,0,0,0,1833,1826,1,0,0,0,1834,323,1,0,0,0,1835,1836,3,332,166,0,1836,
325,1,0,0,0,1837,1838,3,440,220,0,1838,1839,3,442,221,0,1839,1840,5,13,0,
0,1840,1841,3,344,172,0,1841,1842,3,254,127,0,1842,327,1,0,0,0,1843,1847,
5,53,0,0,1844,1847,3,340,170,0,1845,1847,3,330,165,0,1846,1843,1,0,0,0,1846,
1844,1,0,0,0,1846,1845,1,0,0,0,1847,329,1,0,0,0,1848,1850,3,442,221,0,1849,
1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,1852,3,254,127,0,1852,
331,1,0,0,0,1853,1854,7,11,0,0,1854,333,1,0,0,0,1855,1856,5,82,0,0,1856,
1862,3,338,169,0,1857,1858,3,200,100,0,1858,1859,3,336,168,0,1859,1862,1,
0,0,0,1860,1862,3,344,172,0,1861,1855,1,0,0,0,1861,1857,1,0,0,0,1861,1860,
1,0,0,0,1862,335,1,0,0,0,1863,1865,3,328,164,0,1864,1863,1,0,0,0,1865,1868,
1,0,0,0,1866,1864,1,0,0,0,1866,1867,1,0,0,0,1867,1869,1,0,0,0,1868,1866,
1,0,0,0,1869,1870,3,340,170,0,1870,337,1,0,0,0,1871,1872,5,10,0,0,1872,1873,
3,114,57,0,1873,1874,5,11,0,0,1874,1878,1,0,0,0,1875,1876,5,13,0,0,1876,
1878,3,344,172,0,1877,1871,1,0,0,0,1877,1875,1,0,0,0,1878,339,1,0,0,0,1879,
1888,3,338,169,0,1880,1881,5,56,0,0,1881,1888,3,344,172,0,1882,1883,5,12,
0,0,1883,1884,5,10,0,0,1884,1885,3,114,57,0,1885,1886,5,11,0,0,1886,1888,
1,0,0,0,1887,1879,1,0,0,0,1887,1880,1,0,0,0,1887,1882,1,0,0,0,1888,341,1,
0,0,0,1889,1890,7,12,0,0,1890,343,1,0,0,0,1891,1894,3,342,171,0,1892,1894,
5,101,0,0,1893,1891,1,0,0,0,1893,1892,1,0,0,0,1894,345,1,0,0,0,1895,1896,
3,348,174,0,1896,1897,5,13,0,0,1897,1898,3,344,172,0,1898,1906,1,0,0,0,1899,
1900,3,348,174,0,1900,1901,5,13,0,0,1901,1902,3,348,174,0,1902,1903,5,13,
0,0,1903,1904,3,344,172,0,1904,1906,1,0,0,0,1905,1895,1,0,0,0,1905,1899,
1,0,0,0,1906,347,1,0,0,0,1907,1908,7,13,0,0,1908,349,1,0,0,0,1909,1910,3,
352,176,0,1910,1911,3,434,217,0,1911,351,1,0,0,0,1912,1914,5,77,0,0,1913,
1915,5,53,0,0,1914,1913,1,0,0,0,1914,1915,1,0,0,0,1915,353,1,0,0,0,1916,
1917,3,356,178,0,1917,1918,3,434,217,0,1918,355,1,0,0,0,1919,1920,5,93,0,
0,1920,357,1,0,0,0,1921,1923,3,360,180,0,1922,1921,1,0,0,0,1923,1926,1,0,
0,0,1924,1922,1,0,0,0,1924,1925,1,0,0,0,1925,359,1,0,0,0,1926,1924,1,0,0,
0,1927,1929,3,414,207,0,1928,1927,1,0,0,0,1929,1932,1,0,0,0,1930,1928,1,
0,0,0,1930,1931,1,0,0,0,1931,1933,1,0,0,0,1932,1930,1,0,0,0,1933,1934,3,
362,181,0,1934,361,1,0,0,0,1935,1954,3,22,11,0,1936,1954,3,380,190,0,1937,
1954,3,386,193,0,1938,1954,3,392,196,0,1939,1954,3,394,197,0,1940,1954,3,
396,198,0,1941,1954,3,384,192,0,1942,1954,3,402,201,0,1943,1954,3,404,202,
0,1944,1954,3,416,208,0,1945,1954,3,418,209,0,1946,1954,3,412,206,0,1947,
1954,3,382,191,0,1948,1954,3,424,212,0,1949,1954,3,420,210,0,1950,1954,3,
422,211,0,1951,1954,3,364,182,0,1952,1954,3,378,189,0,1953,1935,1,0,0,0,
1953,1936,1,0,0,0,1953,1937,1,0,0,0,1953,1938,1,0,0,0,1953,1939,1,0,0,0,
1953,1940,1,0,0,0,1953,1941,1,0,0,0,1953,1942,1,0,0,0,1953,1943,1,0,0,0,
1953,1944,1,0,0,0,1953,1945,1,0,0,0,1953,1946,1,0,0,0,1953,1947,1,0,0,0,
1953,1948,1,0,0,0,1953,1949,1,0,0,0,1953,1950,1,0,0,0,1953,1951,1,0,0,0,
1953,1952,1,0,0,0,1954,363,1,0,0,0,1955,1956,5,176,0,0,1956,1957,5,13,0,
0,1957,1958,5,119,0,0,1958,1959,5,6,0,0,1959,1960,5,177,0,0,1960,1961,5,
7,0,0,1961,1962,5,13,0,0,1962,1963,5,178,0,0,1963,1964,5,6,0,0,1964,1965,
3,366,183,0,1965,1966,5,7,0,0,1966,1967,5,4,0,0,1967,365,1,0,0,0,1968,1969,
5,179,0,0,1969,1970,5,6,0,0,1970,1971,5,180,0,0,1971,1972,5,14,0,0,1972,
1973,3,18,9,0,1973,1975,5,3,0,0,1974,1976,5,20,0,0,1975,1974,1,0,0,0,1975,
1976,1,0,0,0,1976,1977,1,0,0,0,1977,1978,3,368,184,0,1978,1983,5,6,0,0,1979,
1982,3,370,185,0,1980,1982,5,2,0,0,1981,1979,1,0,0,0,1981,1980,1,0,0,0,1982,
1985,1,0,0,0,1983,1981,1,0,0,0,1983,1984,1,0,0,0,1984,1986,1,0,0,0,1985,
1983,1,0,0,0,1986,1987,5,7,0,0,1987,1989,5,7,0,0,1988,1990,5,2,0,0,1989,
1988,1,0,0,0,1989,1990,1,0,0,0,1990,367,1,0,0,0,1991,1992,5,195,0,0,1992,
369,1,0,0,0,1993,1994,3,372,186,0,1994,1995,5,14,0,0,1995,1996,3,374,187,
0,1996,371,1,0,0,0,1997,1998,5,195,0,0,1998,373,1,0,0,0,1999,2002,5,195,
0,0,2000,2002,3,376,188,0,2001,1999,1,0,0,0,2001,2000,1,0,0,0,2002,375,1,
0,0,0,2003,2004,3,194,97,0,2004,2005,5,57,0,0,2005,377,1,0,0,0,2006,2008,
3,114,57,0,2007,2006,1,0,0,0,2007,2008,1,0,0,0,2008,2009,1,0,0,0,2009,2010,
5,4,0,0,2010,379,1,0,0,0,2011,2012,3,110,55,0,2012,2013,3,10,5,0,2013,2014,
5,4,0,0,2014,381,1,0,0,0,2015,2016,3,110,55,0,2016,2017,3,16,8,0,2017,2018,
3,20,10,0,2018,383,1,0,0,0,2019,2020,5,75,0,0,2020,2021,5,6,0,0,2021,2022,
3,114,57,0,2022,2023,5,7,0,0,2023,2026,3,22,11,0,2024,2025,5,68,0,0,2025,
2027,3,22,11,0,2026,2024,1,0,0,0,2026,2027,1,0,0,0,2027,385,1,0,0,0,2028,
2030,5,115,0,0,2029,2028,1,0,0,0,2029,2030,1,0,0,0,2030,2031,1,0,0,0,2031,
2032,5,74,0,0,2032,2033,5,6,0,0,2033,2034,3,388,194,0,2034,2035,5,7,0,0,
2035,2036,3,360,180,0,2036,387,1,0,0,0,2037,2038,3,110,55,0,2038,2039,3,
2,1,0,2039,2040,5,76,0,0,2040,2041,3,114,57,0,2041,2056,1,0,0,0,2042,2043,
3,110,55,0,2043,2044,3,344,172,0,2044,2045,5,76,0,0,2045,2046,3,114,57,0,
2046,2056,1,0,0,0,2047,2049,3,390,195,0,2048,2050,3,114,57,0,2049,2048,1,
0,0,0,2049,2050,1,0,0,0,2050,2051,1,0,0,0,2051,2053,5,4,0,0,2052,2054,3,
198,99,0,2053,2052,1,0,0,0,2053,2054,1,0,0,0,2054,2056,1,0,0,0,2055,2037,
1,0,0,0,2055,2042,1,0,0,0,2055,2047,1,0,0,0,2056,389,1,0,0,0,2057,2063,3,
380,190,0,2058,2060,3,114,57,0,2059,2058,1,0,0,0,2059,2060,1,0,0,0,2060,
2061,1,0,0,0,2061,2063,5,4,0,0,2062,2057,1,0,0,0,2062,2059,1,0,0,0,2063,
391,1,0,0,0,2064,2065,5,90,0,0,2065,2066,5,6,0,0,2066,2067,3,114,57,0,2067,
2068,5,7,0,0,2068,2069,3,22,11,0,2069,393,1,0,0,0,2070,2071,5,67,0,0,2071,
2072,3,360,180,0,2072,2073,5,90,0,0,2073,2074,5,6,0,0,2074,2075,3,114,57,
0,2075,2076,5,7,0,0,2076,2077,5,4,0,0,2077,395,1,0,0,0,2078,2079,5,83,0,
0,2079,2080,5,6,0,0,2080,2081,3,114,57,0,2081,2082,5,7,0,0,2082,2086,5,184,
0,0,2083,2085,3,398,199,0,2084,2083,1,0,0,0,2085,2088,1,0,0,0,2086,2084,
1,0,0,0,2086,2087,1,0,0,0,2087,2090,1,0,0,0,2088,2086,1,0,0,0,2089,2091,
3,400,200,0,2090,2089,1,0,0,0,2090,2091,1,0,0,0,2091,2092,1,0,0,0,2092,2093,
5,185,0,0,2093,397,1,0,0,0,2094,2096,3,414,207,0,2095,2094,1,0,0,0,2096,
2099,1,0,0,0,2097,2095,1,0,0,0,2097,2098,1,0,0,0,2098,2100,1,0,0,0,2099,
2097,1,0,0,0,2100,2101,5,61,0,0,2101,2102,3,114,57,0,2102,2103,5,14,0,0,
2103,2104,3,358,179,0,2104,399,1,0,0,0,2105,2107,3,414,207,0,2106,2105,1,
0,0,0,2107,2110,1,0,0,0,2108,2106,1,0,0,0,2108,2109,1,0,0,0,2109,2111,1,
0,0,0,2110,2108,1,0,0,0,2111,2112,5,66,0,0,2112,2113,5,14,0,0,2113,2114,
3,358,179,0,2114,401,1,0,0,0,2115,2116,5,80,0,0,2116,2117,5,4,0,0,2117,403,
1,0,0,0,2118,2119,5,87,0,0,2119,2129,3,22,11,0,2120,2122,3,406,203,0,2121,
2120,1,0,0,0,2122,2123,1,0,0,0,2123,2121,1,0,0,0,2123,2124,1,0,0,0,2124,
2126,1,0,0,0,2125,2127,3,410,205,0,2126,2125,1,0,0,0,2126,2127,1,0,0,0,2127,
2130,1,0,0,0,2128,2130,3,410,205,0,2129,2121,1,0,0,0,2129,2128,1,0,0,0,2130,
405,1,0,0,0,2131,2132,3,408,204,0,2132,2133,3,22,11,0,2133,2142,1,0,0,0,
2134,2135,5,120,0,0,2135,2137,3,434,217,0,2136,2138,3,408,204,0,2137,2136,
1,0,0,0,2137,2138,1,0,0,0,2138,2139,1,0,0,0,2139,2140,3,22,11,0,2140,2142,
1,0,0,0,2141,2131,1,0,0,0,2141,2134,1,0,0,0,2142,407,1,0,0,0,2143,2144,5,
62,0,0,2144,2145,5,6,0,0,2145,2148,3,344,172,0,2146,2147,5,2,0,0,2147,2149,
3,344,172,0,2148,2146,1,0,0,0,2148,2149,1,0,0,0,2149,2150,1,0,0,0,2150,2151,
5,7,0,0,2151,409,1,0,0,0,2152,2153,5,73,0,0,2153,2154,3,22,11,0,2154,411,
1,0,0,0,2155,2157,5,81,0,0,2156,2158,3,114,57,0,2157,2156,1,0,0,0,2157,2158,
1,0,0,0,2158,2159,1,0,0,0,2159,2160,5,4,0,0,2160,413,1,0,0,0,2161,2162,3,
344,172,0,2162,2163,5,14,0,0,2163,415,1,0,0,0,2164,2166,5,60,0,0,2165,2167,
3,344,172,0,2166,2165,1,0,0,0,2166,2167,1,0,0,0,2167,2168,1,0,0,0,2168,2169,
5,4,0,0,2169,417,1,0,0,0,2170,2172,5,65,0,0,2171,2173,3,344,172,0,2172,2171,
1,0,0,0,2172,2173,1,0,0,0,2173,2174,1,0,0,0,2174,2175,5,4,0,0,2175,419,1,
0,0,0,2176,2177,5,116,0,0,2177,2178,3,114,57,0,2178,2179,5,4,0,0,2179,421,
1,0,0,0,2180,2181,5,58,0,0,2181,2182,3,114,57,0,2182,2183,5,4,0,0,2183,423,
1,0,0,0,2184,2185,3,426,213,0,2185,2186,5,4,0,0,2186,425,1,0,0,0,2187,2188,
5,59,0,0,2188,2189,5,6,0,0,2189,2192,3,114,57,0,2190,2191,5,2,0,0,2191,2193,
3,114,57,0,2192,2190,1,0,0,0,2192,2193,1,0,0,0,2193,2195,1,0,0,0,2194,2196,
5,2,0,0,2195,2194,1,0,0,0,2195,2196,1,0,0,0,2196,2197,1,0,0,0,2197,2198,
5,7,0,0,2198,427,1,0,0,0,2199,2263,3,48,24,0,2200,2263,3,100,50,0,2201,2263,
3,102,51,0,2202,2263,3,472,236,0,2203,2204,5,99,0,0,2204,2205,3,16,8,0,2205,
2206,5,4,0,0,2206,2263,1,0,0,0,2207,2208,5,99,0,0,2208,2209,3,66,33,0,2209,
2210,5,4,0,0,2210,2263,1,0,0,0,2211,2212,5,99,0,0,2212,2213,3,68,34,0,2213,
2214,5,4,0,0,2214,2263,1,0,0,0,2215,2216,5,99,0,0,2216,2217,3,6,3,0,2217,
2218,3,430,215,0,2218,2219,5,4,0,0,2219,2263,1,0,0,0,2220,2221,3,66,33,0,
2221,2222,3,20,10,0,2222,2263,1,0,0,0,2223,2224,3,68,34,0,2224,2225,3,20,
10,0,2225,2263,1,0,0,0,2226,2227,3,16,8,0,2227,2228,3,20,10,0,2228,2263,
1,0,0,0,2229,2231,7,1,0,0,2230,2232,3,432,216,0,2231,2230,1,0,0,0,2231,2232,
1,0,0,0,2232,2233,1,0,0,0,2233,2234,3,56,28,0,2234,2235,5,4,0,0,2235,2263,
1,0,0,0,2236,2237,5,106,0,0,2237,2239,5,72,0,0,2238,2240,3,432,216,0,2239,
2238,1,0,0,0,2239,2240,1,0,0,0,2240,2241,1,0,0,0,2241,2242,3,14,7,0,2242,
2243,5,4,0,0,2243,2263,1,0,0,0,2244,2246,5,106,0,0,2245,2244,1,0,0,0,2245,
2246,1,0,0,0,2246,2247,1,0,0,0,2247,2248,3,8,4,0,2248,2251,3,344,172,0,2249,
2250,5,1,0,0,2250,2252,3,114,57,0,2251,2249,1,0,0,0,2251,2252,1,0,0,0,2252,
2257,1,0,0,0,2253,2254,5,2,0,0,2254,2256,3,12,6,0,2255,2253,1,0,0,0,2256,
2259,1,0,0,0,2257,2255,1,0,0,0,2257,2258,1,0,0,0,2258,2260,1,0,0,0,2259,
2257,1,0,0,0,2260,2261,5,4,0,0,2261,2263,1,0,0,0,2262,2199,1,0,0,0,2262,
2200,1,0,0,0,2262,2201,1,0,0,0,2262,2202,1,0,0,0,2262,2203,1,0,0,0,2262,
2207,1,0,0,0,2262,2211,1,0,0,0,2262,2215,1,0,0,0,2262,2220,1,0,0,0,2262,
2223,1,0,0,0,2262,2226,1,0,0,0,2262,2229,1,0,0,0,2262,2236,1,0,0,0,2262,
2245,1,0,0,0,2263,429,1,0,0,0,2264,2269,3,344,172,0,2265,2266,5,2,0,0,2266,
2268,3,344,172,0,2267,2265,1,0,0,0,2268,2271,1,0,0,0,2269,2267,1,0,0,0,2269,
2270,1,0,0,0,2270,431,1,0,0,0,2271,2269,1,0,0,0,2272,2274,3,452,226,0,2273,
2275,5,12,0,0,2274,2273,1,0,0,0,2274,2275,1,0,0,0,2275,2278,1,0,0,0,2276,
2278,3,436,218,0,2277,2272,1,0,0,0,2277,2276,1,0,0,0,2278,433,1,0,0,0,2279,
2281,3,452,226,0,2280,2282,5,12,0,0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,
2282,2285,1,0,0,0,2283,2285,3,438,219,0,2284,2279,1,0,0,0,2284,2283,1,0,
0,0,2285,435,1,0,0,0,2286,2289,3,438,219,0,2287,2289,5,89,0,0,2288,2286,
1,0,0,0,2288,2287,1,0,0,0,2289,437,1,0,0,0,2290,2292,3,440,220,0,2291,2293,
3,442,221,0,2292,2291,1,0,0,0,2292,2293,1,0,0,0,2293,2295,1,0,0,0,2294,2296,
5,12,0,0,2295,2294,1,0,0,0,2295,2296,1,0,0,0,2296,2302,1,0,0,0,2297,2299,
5,101,0,0,2298,2300,5,12,0,0,2299,2298,1,0,0,0,2299,2300,1,0,0,0,2300,2302,
1,0,0,0,2301,2290,1,0,0,0,2301,2297,1,0,0,0,2302,439,1,0,0,0,2303,2306,3,
348,174,0,2304,2305,5,13,0,0,2305,2307,3,348,174,0,2306,2304,1,0,0,0,2306,
2307,1,0,0,0,2307,441,1,0,0,0,2308,2309,5,17,0,0,2309,2310,3,444,222,0,2310,
2311,5,18,0,0,2311,443,1,0,0,0,2312,2317,3,432,216,0,2313,2314,5,2,0,0,2314,
2316,3,432,216,0,2315,2313,1,0,0,0,2316,2319,1,0,0,0,2317,2315,1,0,0,0,2317,
2318,1,0,0,0,2318,445,1,0,0,0,2319,2317,1,0,0,0,2320,2325,3,438,219,0,2321,
2322,5,2,0,0,2322,2324,3,438,219,0,2323,2321,1,0,0,0,2324,2327,1,0,0,0,2325,
2323,1,0,0,0,2325,2326,1,0,0,0,2326,447,1,0,0,0,2327,2325,1,0,0,0,2328,2330,
5,101,0,0,2329,2331,3,106,53,0,2330,2329,1,0,0,0,2330,2331,1,0,0,0,2331,
2332,1,0,0,0,2332,2333,3,454,227,0,2333,449,1,0,0,0,2334,2336,3,448,224,
0,2335,2337,5,12,0,0,2336,2335,1,0,0,0,2336,2337,1,0,0,0,2337,2338,1,0,0,
0,2338,2339,3,450,225,0,2339,2342,1,0,0,0,2340,2342,3,448,224,0,2341,2334,
1,0,0,0,2341,2340,1,0,0,0,2342,451,1,0,0,0,2343,2348,3,450,225,0,2344,2345,
3,436,218,0,2345,2346,3,450,225,0,2346,2348,1,0,0,0,2347,2343,1,0,0,0,2347,
2344,1,0,0,0,2348,453,1,0,0,0,2349,2350,5,6,0,0,2350,2369,5,7,0,0,2351,2352,
5,6,0,0,2352,2353,3,456,228,0,2353,2354,5,2,0,0,2354,2355,3,460,230,0,2355,
2356,5,7,0,0,2356,2369,1,0,0,0,2357,2358,5,6,0,0,2358,2360,3,456,228,0,2359,
2361,5,2,0,0,2360,2359,1,0,0,0,2360,2361,1,0,0,0,2361,2362,1,0,0,0,2362,
2363,5,7,0,0,2363,2369,1,0,0,0,2364,2365,5,6,0,0,2365,2366,3,460,230,0,2366,
2367,5,7,0,0,2367,2369,1,0,0,0,2368,2349,1,0,0,0,2368,2351,1,0,0,0,2368,
2357,1,0,0,0,2368,2364,1,0,0,0,2369,455,1,0,0,0,2370,2375,3,458,229,0,2371,
2372,5,2,0,0,2372,2374,3,458,229,0,2373,2371,1,0,0,0,2374,2377,1,0,0,0,2375,
2373,1,0,0,0,2375,2376,1,0,0,0,2376,457,1,0,0,0,2377,2375,1,0,0,0,2378,2381,
3,468,234,0,2379,2381,3,432,216,0,2380,2378,1,0,0,0,2380,2379,1,0,0,0,2381,
459,1,0,0,0,2382,2385,3,462,231,0,2383,2385,3,464,232,0,2384,2382,1,0,0,
0,2384,2383,1,0,0,0,2385,461,1,0,0,0,2386,2387,5,10,0,0,2387,2389,3,456,
228,0,2388,2390,5,2,0,0,2389,2388,1,0,0,0,2389,2390,1,0,0,0,2390,2391,1,
0,0,0,2391,2392,5,11,0,0,2392,463,1,0,0,0,2393,2394,5,184,0,0,2394,2399,
3,466,233,0,2395,2396,5,2,0,0,2396,2398,3,466,233,0,2397,2395,1,0,0,0,2398,
2401,1,0,0,0,2399,2397,1,0,0,0,2399,2400,1,0,0,0,2400,2403,1,0,0,0,2401,
2399,1,0,0,0,2402,2404,5,2,0,0,2403,2402,1,0,0,0,2403,2404,1,0,0,0,2404,
2405,1,0,0,0,2405,2406,5,185,0,0,2406,465,1,0,0,0,2407,2409,5,111,0,0,2408,
2407,1,0,0,0,2408,2409,1,0,0,0,2409,2410,1,0,0,0,2410,2411,3,468,234,0,2411,
467,1,0,0,0,2412,2413,3,432,216,0,2413,2414,3,344,172,0,2414,469,1,0,0,0,
2415,2424,3,348,174,0,2416,2424,3,346,173,0,2417,2418,3,440,220,0,2418,2421,
3,442,221,0,2419,2420,5,13,0,0,2420,2422,3,344,172,0,2421,2419,1,0,0,0,2421,
2422,1,0,0,0,2422,2424,1,0,0,0,2423,2415,1,0,0,0,2423,2416,1,0,0,0,2423,
2417,1,0,0,0,2424,471,1,0,0,0,2425,2426,5,114,0,0,2426,2428,3,348,174,0,
2427,2429,3,106,53,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,1,0,0,
0,2430,2431,5,1,0,0,2431,2432,3,452,226,0,2432,2433,5,4,0,0,2433,2437,1,
0,0,0,2434,2435,5,114,0,0,2435,2437,3,474,237,0,2436,2425,1,0,0,0,2436,2434,
1,0,0,0,2437,473,1,0,0,0,2438,2439,3,476,238,0,2439,2440,3,18,9,0,2440,2441,
5,4,0,0,2441,475,1,0,0,0,2442,2443,3,432,216,0,2443,2444,3,344,172,0,2444,
2447,1,0,0,0,2445,2447,3,344,172,0,2446,2442,1,0,0,0,2446,2445,1,0,0,0,2447,
477,1,0,0,0,2448,2474,5,183,0,0,2449,2474,5,186,0,0,2450,2451,5,187,0,0,
2451,2456,3,114,57,0,2452,2453,5,188,0,0,2453,2455,3,114,57,0,2454,2452,
1,0,0,0,2455,2458,1,0,0,0,2456,2454,1,0,0,0,2456,2457,1,0,0,0,2457,2459,
1,0,0,0,2458,2456,1,0,0,0,2459,2460,5,189,0,0,2460,2474,1,0,0,0,2461,2474,
5,190,0,0,2462,2463,5,191,0,0,2463,2468,3,114,57,0,2464,2465,5,192,0,0,2465,
2467,3,114,57,0,2466,2464,1,0,0,0,2467,2470,1,0,0,0,2468,2466,1,0,0,0,2468,
2469,1,0,0,0,2469,2471,1,0,0,0,2470,2468,1,0,0,0,2471,2472,5,193,0,0,2472,
2474,1,0,0,0,2473,2448,1,0,0,0,2473,2449,1,0,0,0,2473,2450,1,0,0,0,2473,
2461,1,0,0,0,2473,2462,1,0,0,0,2474,479,1,0,0,0,254,483,489,495,499,503,
506,509,513,516,520,525,531,537,544,549,555,573,577,588,602,609,617,625,
629,639,643,656,659,662,667,671,674,677,684,686,691,694,699,703,707,712,
715,718,726,733,738,746,753,757,761,768,778,780,785,787,792,794,799,804,
812,817,823,830,835,841,845,848,855,860,862,869,877,890,898,901,907,919,
925,935,947,951,959,962,969,998,1003,1007,1010,1018,1031,1035,1043,1051,
1063,1071,1082,1101,1158,1178,1183,1185,1210,1216,1222,1228,1246,1252,1261,
1331,1338,1354,1363,1374,1383,1386,1389,1392,1396,1401,1404,1408,1417,1421,
1428,1446,1449,1478,1488,1499,1502,1516,1525,1533,1536,1551,1562,1568,1574,
1576,1583,1603,1611,1618,1626,1634,1641,1647,1657,1663,1669,1676,1684,1686,
1693,1701,1703,1710,1718,1720,1730,1739,1741,1749,1757,1766,1768,1778,1787,
1789,1800,1807,1812,1830,1833,1846,1849,1861,1866,1877,1887,1893,1905,1914,
1924,1930,1953,1975,1981,1983,1989,2001,2007,2026,2029,2049,2053,2055,2059,
2062,2086,2090,2097,2108,2123,2126,2129,2137,2141,2148,2157,2166,2172,2192,
2195,2231,2239,2245,2251,2257,2262,2269,2274,2277,2281,2284,2288,2292,2295,
2299,2301,2306,2317,2325,2330,2336,2341,2347,2360,2368,2375,2380,2384,2389,
2399,2403,2408,2421,2423,2428,2436,2446,2456,2468,2473];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class DartParser extends antlr4.Parser {

    static grammarFileName = "Dart.g4";
    static literalNames = [ null, "'='", "','", "'=>'", "';'", "'*'", "'('", 
                            "')'", "'BuildContext context'", "'Build context'", 
                            "'['", "']'", "'?'", "'.'", "':'", "'~'", "'=='", 
                            "'<'", "'>'", "'@'", "'const '", "'<Widget>'", 
                            "'#'", "'...'", "'...?'", "'..'", "'?..'", "'*='", 
                            "'/='", "'~/='", "'%='", "'+='", "'-='", "'<<='", 
                            "'&='", "'^='", "'|='", "'??='", "'??'", "'||'", 
                            "'&&'", "'!='", "'>='", "'<='", "'|'", "'^'", 
                            "'&'", "'<<'", "'+'", "'-'", "'/'", "'%'", "'~/'", 
                            "'!'", "'++'", "'--'", "'?.'", "'.text'", "'yield*'", 
                            "'assert'", "'break'", "'case'", "'catch'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'else'", "'enum'", "'extends'", "'false'", 
                            "'final'", "'finally'", "'for'", "'if'", "'in'", 
                            "'is'", "'new'", "'null'", "'rethrow'", "'return'", 
                            "'super'", "'switch'", "'this'", "'throw'", 
                            "'true'", "'try'", "'var'", "'void'", "'while'", 
                            "'with'", "'abstract'", "'as'", "'covariant'", 
                            "'deferred'", "'dynamic'", "'export'", "'extension'", 
                            "'external'", "'factory'", "'Function'", "'get'", 
                            "'implements'", "'import'", "'interface'", "'late'", 
                            "'library'", "'operator'", "'mixin'", "'part'", 
                            "'required'", "'set'", "'static'", "'typedef'", 
                            "'await'", "'yield'", "'async'", "'hide'", "'of'", 
                            "'on'", "'show'", "'sync'", "'BuildContext'", 
                            "'Widget'", "'build'", "'StatelessWidget'", 
                            "'Scaffold'", "'TextStyle'", "'TextField'", 
                            "'ElevatedButton'", "'Text'", "'Center'", "'Column'", 
                            "'Row'", "'SizedBox'", "'AppBar'", "'Container'", 
                            "'InputDecoration'", "'OutlineInputBorder'", 
                            "'BoxDecoration'", "'Image'", "'network'", "'body'", 
                            "'title'", "'child'", "'fontSize'", "'controller'", 
                            "'height'", "'width'", "'onPressed'", "'style'", 
                            "'children'", "'appBar'", "'margin'", "'EdgeInsets'", 
                            "'all'", "'MainAxisAlignment'", "'center'", 
                            "'mainAxisAlignment'", "'MainAxisSize'", "'min'", 
                            "'mainAxisSize'", "'decoration'", "'hintText'", 
                            "'border'", "'obscureText'", "'FontWeight'", 
                            "'bold'", "'fontWeight'", "'padding'", "'borderRadius'", 
                            "'BorderRadius'", "'circular'", "'color'", "'Color'", 
                            "'Navigator'", "'context'", "'push'", "'MaterialPageRoute'", 
                            "'builder'", null, null, null, "'{'", "'}'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'@override'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, "ASSERT", "BREAK", "CASE", 
                             "CATCH", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
                             "DO", "ELSE", "ENUM", "EXTENDS", "FALSE", "FINAL", 
                             "FINALLY", "FOR", "IF", "IN", "IS", "NEW", 
                             "NULL", "RETHROW", "RETURN", "SUPER", "SWITCH", 
                             "THIS", "THROW", "TRUE", "TRY", "VAR", "VOID", 
                             "WHILE", "WITH", "ABSTRACT", "AS", "COVARIANT", 
                             "DEFERRED", "DYNAMIC", "EXPORT", "EXTENSION", 
                             "EXTERNAL", "FACTORY", "FUNCTION", "GET", "IMPLEMENTS", 
                             "IMPORT", "INTERFACE", "LATE", "LIBRARY", "OPERATOR", 
                             "MIXIN", "PART", "REQUIRED", "SET", "STATIC", 
                             "TYPEDEF", "AWAIT", "YIELD", "ASYNC", "HIDE", 
                             "OF", "ON", "SHOW", "SYNC", "BUILD_CONTEXT", 
                             "WIDGET", "BUILD", "STATELESS", "SCAFFOLD", 
                             "TEXT_STYLE", "TEXT_FIELD", "ELEVATED_BUTTON", 
                             "TEXT", "CENTER", "COLUMN", "ROW", "SIZED_BOX", 
                             "APP_BAR_WIDGET", "CONTAINER", "INPUT_DECORATION_WIDGET", 
                             "BORDER_WIDGET", "BOX_DECORATION_WIDGET", "IMAGE_WIDGET", 
                             "NETWROK_IMAGE", "BODY", "TITLE", "CHILD", 
                             "FONTSIZE", "CONTROLLER", "HEIGHT", "WIDTH", 
                             "ON_PRESSED", "STYLE", "CHILDREN", "APP_BAR", 
                             "MARGIN", "EDGEINSETS", "EDGEINSETS_ALL", "MAIN_AXIS_ALIGNMENT", 
                             "MAIN_AXIS_ALIGNMENT_CENTER", "MAIN_AXIS_ALIGNMENT_BODY_ATT", 
                             "MAIN_AXIS_SIZE", "MAIN_AXIS_SIZE_MIN", "MAIN_AXIS_SIZE_BODY_ATT", 
                             "DECORATION_BODY_ATT", "HINT_TEXT", "BORDER", 
                             "OBSCURE_TEXT", "FONT_WEIGHT", "FONT_WEIGHT_BOLD", 
                             "FONT_WEIGHT_BODY_ATT", "PADDING", "BORDER_RADIUS_ATT", 
                             "BORDER_RADIUS", "BORDER_RADIUS_CIRCULAR", 
                             "COLOR", "COLORS", "NAVIGATOR", "CONTEXT", 
                             "PUSH", "MATERIAL_PAGEROUTE", "BUILDER", "NUMBER", 
                             "HEX_NUMBER", "RAW_SINGLE_LINE_STRING", "LBRACE", 
                             "RBRACE", "SINGLE_LINE_STRING_SQ_BEGIN_END", 
                             "SINGLE_LINE_STRING_SQ_BEGIN_MID", "SINGLE_LINE_STRING_SQ_MID_MID", 
                             "SINGLE_LINE_STRING_SQ_MID_END", "SINGLE_LINE_STRING_DQ_BEGIN_END", 
                             "SINGLE_LINE_STRING_DQ_BEGIN_MID", "SINGLE_LINE_STRING_DQ_MID_MID", 
                             "SINGLE_LINE_STRING_DQ_MID_END", "SCRIPT_TAG", 
                             "IDENTIFIER", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
                             "WS", "OVERRIDE" ];
    static ruleNames = [ "start", "declaredIdentifier", "finalConstVarOrType", 
                         "finalVarOrType", "varOrType", "initializedVariableDeclaration", 
                         "initializedIdentifier", "initializedIdentifierList", 
                         "functionSignature", "formalParameterPart", "functionBody", 
                         "block", "formalParameterList", "normalFormalParameters", 
                         "optionalOrNamedFormalParameters", "optionalPositionalFormalParameters", 
                         "namedFormalParameters", "normalFormalParameter", 
                         "functionFormalParameter", "simpleFormalParameter", 
                         "fieldFormalParameter", "defaultFormalParameter", 
                         "defaultNamedParameter", "typeWithParameters", 
                         "classDeclaration", "classMemberDefinition", "methodSignature", 
                         "declaration", "staticFinalDeclarationList", "staticFinalDeclaration", 
                         "operatorSignature", "operator", "binaryOperator", 
                         "getterSignature", "setterSignature", "constructorSignature", 
                         "constructorName", "redirection", "initializers", 
                         "initializerListEntry", "fieldInitializer", "initializerExpression", 
                         "factoryConstructorSignature", "redirectingFactoryConstructorSignature", 
                         "constantConstructorSignature", "superclass", "mixins", 
                         "interfaces", "mixinApplicationClass", "mixinApplication", 
                         "mixinDeclaration", "enumType", "typeParameter", 
                         "typeParameters", "enumEntry", "metadata", "metadatum", 
                         "expression", "widget", "textWidget", "textStyleWidget", 
                         "centerWidget", "columnWidget", "rowWidget", "sizedBoxWidget", 
                         "scaffoldWidget", "appBarWidget", "textFieldWidget", 
                         "elevatedButtonWidget", "containerWidget", "inputDecorationWidget", 
                         "borderWidget", "boxDecorationWidget", "imageWidget", 
                         "imageUrl", "widgetBody", "widgetBodyProps", "padding", 
                         "borderRadius", "circularBorderRadius", "circularBorderRadiusValue", 
                         "colors", "colorName", "height", "width", "obscureText", 
                         "hintText", "fontSize", "fontWeight", "fontWeightBold", 
                         "mainAxisAlignment", "mainAxisSize", "mainAxisSizeMin", 
                         "mainAxisAlignmentCenter", "edgeInsets", "edgeInsetsNumber", 
                         "variable", "controllerName", "expressionWithoutCascade", 
                         "expressionList", "primary", "literal", "nullLiteral", 
                         "numericLiteral", "booleanLiteral", "stringLiteral", 
                         "symbolLiteral", "listLiteral", "setOrMapLiteral", 
                         "elements", "element", "expressionElement", "mapElement", 
                         "spreadElement", "ifElement", "forElement", "throwExpression", 
                         "throwExpressionWithoutCascade", "functionExpression", 
                         "functionExpressionBody", "functionExpressionWithoutCascade", 
                         "functionExpressionWithoutCascadeBody", "functionPrimary", 
                         "functionPrimaryBody", "thisExpression", "newExpression", 
                         "constObjectExpression", "arguments", "argumentList", 
                         "namedArgument", "cascade", "cascadeSection", "cascadeSelector", 
                         "cascadeSectionTail", "cascadeAssignment", "assignmentOperator", 
                         "compoundAssignmentOperator", "conditionalExpression", 
                         "ifNullExpression", "logicalOrExpression", "logicalAndExpression", 
                         "equalityExpression", "equalityOperator", "relationalExpression", 
                         "relationalOperator", "bitwiseOrExpression", "bitwiseXorExpression", 
                         "bitwiseAndExpression", "bitwiseOperator", "shiftExpression", 
                         "shiftOperator", "additiveExpression", "additiveOperator", 
                         "multiplicativeExpression", "multiplicativeOperator", 
                         "unaryExpression", "prefixOperator", "minusOperator", 
                         "negationOperator", "tildeOperator", "awaitExpression", 
                         "postfixExpression", "postfixOperator", "constructorInvocation", 
                         "selector", "argumentPart", "incrementOperator", 
                         "assignableExpression", "assignableSelectorPart", 
                         "unconditionalAssignableSelector", "assignableSelector", 
                         "identifierNotFUNCTION", "identifier", "qualifiedName", 
                         "typeIdentifier", "typeTest", "isOperator", "typeCast", 
                         "asOperator", "statements", "statement", "nonLabelledStatement", 
                         "navigationStatement", "materialPageRoute", "className", 
                         "classMember", "key", "value", "textController", 
                         "expressionStatement", "localVariableDeclaration", 
                         "localFunctionDeclaration", "ifStatement", "forStatement", 
                         "forLoopParts", "forInitializerStatement", "whileStatement", 
                         "doStatement", "switchStatement", "switchCase", 
                         "defaultCase", "rethrowStatement", "tryStatement", 
                         "onPart", "catchPart", "finallyPart", "returnStatement", 
                         "label", "breakStatement", "continueStatement", 
                         "yieldStatement", "yieldEachStatement", "assertStatement", 
                         "assertion", "topLevelDefinition", "identifierList", 
                         "type", "typeNotVoid", "typeNotFunction", "typeNotVoidNotFunction", 
                         "typeName", "typeArguments", "typeList", "typeNotVoidNotFunctionList", 
                         "functionTypeTail", "functionTypeTails", "functionType", 
                         "parameterTypeList", "normalParameterTypes", "normalParameterType", 
                         "optionalParameterTypes", "optionalPositionalParameterTypes", 
                         "namedParameterTypes", "namedParameterType", "typedIdentifier", 
                         "constructorDesignation", "typeAlias", "functionTypeAlias", 
                         "functionPrefix", "singleLineString" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = DartParser.ruleNames;
        this.literalNames = DartParser.literalNames;
        this.symbolicNames = DartParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 130:
    	    		return this.cascade_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    cascade_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	start() {
	    let localctx = new StartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, DartParser.RULE_start);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19 || ((((_la - 63)) & ~0x1f) === 0 && ((1 << (_la - 63)) & 3858760259) !== 0) || ((((_la - 95)) & ~0x1f) === 0 && ((1 << (_la - 95)) & 4291821559) !== 0) || _la===195) {
	            this.state = 480;
	            this.topLevelDefinition();
	            this.state = 485;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 486;
	        this.match(DartParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaredIdentifier() {
	    let localctx = new DeclaredIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, DartParser.RULE_declaredIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 488;
	            this.match(DartParser.COVARIANT);
	        }

	        this.state = 491;
	        this.finalConstVarOrType();
	        this.state = 492;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finalConstVarOrType() {
	    let localctx = new FinalConstVarOrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, DartParser.RULE_finalConstVarOrType);
	    var _la = 0;
	    try {
	        this.state = 509;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 494;
	                this.match(DartParser.LATE);
	            }

	            this.state = 497;
	            this.match(DartParser.FINAL);
	            this.state = 499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	            if(la_===1) {
	                this.state = 498;
	                this.type();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 501;
	            this.match(DartParser.CONST);
	            this.state = 503;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 502;
	                this.type();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 506;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 505;
	                this.match(DartParser.LATE);
	            }

	            this.state = 508;
	            this.varOrType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finalVarOrType() {
	    let localctx = new FinalVarOrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, DartParser.RULE_finalVarOrType);
	    try {
	        this.state = 516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 72:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 511;
	            this.match(DartParser.FINAL);
	            this.state = 513;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	            if(la_===1) {
	                this.state = 512;
	                this.type();

	            }
	            break;
	        case 88:
	        case 89:
	        case 96:
	        case 101:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 126:
	        case 195:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 515;
	            this.varOrType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrType() {
	    let localctx = new VarOrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, DartParser.RULE_varOrType);
	    try {
	        this.state = 520;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 88:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 518;
	            this.match(DartParser.VAR);
	            break;
	        case 89:
	        case 96:
	        case 101:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 126:
	        case 195:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 519;
	            this.type();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializedVariableDeclaration() {
	    let localctx = new InitializedVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, DartParser.RULE_initializedVariableDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.declaredIdentifier();
	        this.state = 525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 523;
	            this.match(DartParser.T__0);
	            this.state = 524;
	            this.expression();
	        }

	        this.state = 531;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 527;
	            this.match(DartParser.T__1);
	            this.state = 528;
	            this.initializedIdentifier();
	            this.state = 533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializedIdentifier() {
	    let localctx = new InitializedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, DartParser.RULE_initializedIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 534;
	        this.identifier();
	        this.state = 537;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 535;
	            this.match(DartParser.T__0);
	            this.state = 536;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializedIdentifierList() {
	    let localctx = new InitializedIdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, DartParser.RULE_initializedIdentifierList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 539;
	        this.initializedIdentifier();
	        this.state = 544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 540;
	            this.match(DartParser.T__1);
	            this.state = 541;
	            this.initializedIdentifier();
	            this.state = 546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionSignature() {
	    let localctx = new FunctionSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, DartParser.RULE_functionSignature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 547;
	        this.metadata();
	        this.state = 549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 548;
	            this.type();

	        }
	        this.state = 551;
	        this.identifierNotFUNCTION();
	        this.state = 552;
	        this.formalParameterPart();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterPart() {
	    let localctx = new FormalParameterPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, DartParser.RULE_formalParameterPart);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 554;
	            this.typeParameters();
	        }

	        this.state = 557;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionBody() {
	    let localctx = new FunctionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, DartParser.RULE_functionBody);
	    try {
	        this.state = 577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 559;
	            this.match(DartParser.T__2);
	            this.state = 560;
	            this.expression();
	            this.state = 561;
	            this.match(DartParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 563;
	            this.match(DartParser.ASYNC);
	            this.state = 564;
	            this.match(DartParser.T__2);
	            this.state = 565;
	            this.expression();
	            this.state = 566;
	            this.match(DartParser.T__3);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 573;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 568;
	                this.match(DartParser.ASYNC);
	                break;

	            case 2:
	                this.state = 569;
	                this.match(DartParser.ASYNC);
	                this.state = 570;
	                this.match(DartParser.T__4);
	                break;

	            case 3:
	                this.state = 571;
	                this.match(DartParser.SYNC);
	                this.state = 572;
	                this.match(DartParser.T__4);
	                break;

	            }
	            this.state = 575;
	            this.block();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 576;
	            this.block();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, DartParser.RULE_block);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.match(DartParser.LBRACE);
	        this.state = 580;
	        this.statements();
	        this.state = 581;
	        this.match(DartParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, DartParser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.state = 602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 583;
	            this.match(DartParser.T__5);
	            this.state = 584;
	            this.match(DartParser.T__6);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 585;
	            this.match(DartParser.T__5);
	            this.state = 586;
	            this.normalFormalParameters();
	            this.state = 588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 587;
	                this.match(DartParser.T__1);
	            }

	            this.state = 590;
	            this.match(DartParser.T__6);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 592;
	            this.match(DartParser.T__5);
	            this.state = 593;
	            this.normalFormalParameters();
	            this.state = 594;
	            this.match(DartParser.T__1);
	            this.state = 595;
	            this.optionalOrNamedFormalParameters();
	            this.state = 596;
	            this.match(DartParser.T__6);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 598;
	            this.match(DartParser.T__5);
	            this.state = 599;
	            this.optionalOrNamedFormalParameters();
	            this.state = 600;
	            this.match(DartParser.T__6);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalFormalParameters() {
	    let localctx = new NormalFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, DartParser.RULE_normalFormalParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this.normalFormalParameter();
	        this.state = 609;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,20,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 605;
	                this.match(DartParser.T__1);
	                this.state = 606;
	                this.normalFormalParameter(); 
	            }
	            this.state = 611;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,20,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalOrNamedFormalParameters() {
	    let localctx = new OptionalOrNamedFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, DartParser.RULE_optionalOrNamedFormalParameters);
	    try {
	        this.state = 617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 612;
	            this.optionalPositionalFormalParameters();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 613;
	            this.match(DartParser.T__7);
	            break;
	        case 177:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 614;
	            this.match(DartParser.CONTEXT);
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 615;
	            this.match(DartParser.T__8);
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 616;
	            this.namedFormalParameters();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalPositionalFormalParameters() {
	    let localctx = new OptionalPositionalFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, DartParser.RULE_optionalPositionalFormalParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 619;
	        this.match(DartParser.T__9);
	        this.state = 620;
	        this.defaultFormalParameter();
	        this.state = 625;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 621;
	                this.match(DartParser.T__1);
	                this.state = 622;
	                this.defaultFormalParameter(); 
	            }
	            this.state = 627;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	        this.state = 629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 628;
	            this.match(DartParser.T__1);
	        }

	        this.state = 631;
	        this.match(DartParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedFormalParameters() {
	    let localctx = new NamedFormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, DartParser.RULE_namedFormalParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 633;
	        this.match(DartParser.LBRACE);
	        this.state = 634;
	        this.defaultNamedParameter();
	        this.state = 639;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 635;
	                this.match(DartParser.T__1);
	                this.state = 636;
	                this.defaultNamedParameter(); 
	            }
	            this.state = 641;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	        }

	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 642;
	            this.match(DartParser.T__1);
	        }

	        this.state = 645;
	        this.match(DartParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalFormalParameter() {
	    let localctx = new NormalFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, DartParser.RULE_normalFormalParameter);
	    try {
	        this.state = 656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 647;
	            this.metadata();
	            this.state = 648;
	            this.functionFormalParameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 650;
	            this.metadata();
	            this.state = 651;
	            this.fieldFormalParameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 653;
	            this.metadata();
	            this.state = 654;
	            this.simpleFormalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionFormalParameter() {
	    let localctx = new FunctionFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, DartParser.RULE_functionFormalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 659;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        if(la_===1) {
	            this.state = 658;
	            this.match(DartParser.COVARIANT);

	        }
	        this.state = 662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 661;
	            this.type();

	        }
	        this.state = 664;
	        this.identifierNotFUNCTION();
	        this.state = 665;
	        this.formalParameterPart();
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 666;
	            this.match(DartParser.T__11);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleFormalParameter() {
	    let localctx = new SimpleFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, DartParser.RULE_simpleFormalParameter);
	    try {
	        this.state = 674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 669;
	            this.declaredIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	            if(la_===1) {
	                this.state = 670;
	                this.match(DartParser.COVARIANT);

	            }
	            this.state = 673;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldFormalParameter() {
	    let localctx = new FieldFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, DartParser.RULE_fieldFormalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 50331905) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 1608516641) !== 0) || _la===195) {
	            this.state = 676;
	            this.finalConstVarOrType();
	        }

	        this.state = 679;
	        this.match(DartParser.THIS);
	        this.state = 680;
	        this.match(DartParser.T__12);
	        this.state = 681;
	        this.identifier();
	        this.state = 686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6 || _la===17) {
	            this.state = 682;
	            this.formalParameterPart();
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 683;
	                this.match(DartParser.T__11);
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultFormalParameter() {
	    let localctx = new DefaultFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, DartParser.RULE_defaultFormalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.normalFormalParameter();
	        this.state = 691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1) {
	            this.state = 689;
	            this.match(DartParser.T__0);
	            this.state = 690;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultNamedParameter() {
	    let localctx = new DefaultNamedParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, DartParser.RULE_defaultNamedParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 693;
	            this.match(DartParser.REQUIRED);

	        }
	        this.state = 696;
	        this.normalFormalParameter();
	        this.state = 699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===1 || _la===14) {
	            this.state = 697;
	            _la = this._input.LA(1);
	            if(!(_la===1 || _la===14)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 698;
	            this.expression();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeWithParameters() {
	    let localctx = new TypeWithParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, DartParser.RULE_typeWithParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 701;
	        this.typeIdentifier();
	        this.state = 703;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 702;
	            this.typeParameters();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, DartParser.RULE_classDeclaration);
	    var _la = 0;
	    try {
	        this.state = 738;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 705;
	            this.metadata();
	            this.state = 707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 706;
	                this.match(DartParser.ABSTRACT);
	            }

	            this.state = 709;
	            this.match(DartParser.CLASS);
	            this.state = 710;
	            this.typeWithParameters();
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===70) {
	                this.state = 711;
	                this.superclass();
	            }

	            this.state = 715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 714;
	                this.mixins();
	            }

	            this.state = 718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===103) {
	                this.state = 717;
	                this.interfaces();
	            }

	            this.state = 720;
	            this.match(DartParser.LBRACE);
	            this.state = 726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===19 || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4076863745) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 2145910779) !== 0) || _la===195 || _la===199) {
	                this.state = 721;
	                this.metadata();
	                this.state = 722;
	                this.classMemberDefinition();
	                this.state = 728;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 729;
	            this.match(DartParser.RBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 731;
	            this.metadata();
	            this.state = 733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92) {
	                this.state = 732;
	                this.match(DartParser.ABSTRACT);
	            }

	            this.state = 735;
	            this.match(DartParser.CLASS);
	            this.state = 736;
	            this.mixinApplicationClass();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classMemberDefinition() {
	    let localctx = new ClassMemberDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, DartParser.RULE_classMemberDefinition);
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 740;
	            this.methodSignature();
	            this.state = 741;
	            this.functionBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 743;
	            this.declaration();
	            this.state = 744;
	            this.match(DartParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodSignature() {
	    let localctx = new MethodSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, DartParser.RULE_methodSignature);
	    var _la = 0;
	    try {
	        this.state = 768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 748;
	            this.constructorSignature();
	            this.state = 749;
	            this.initializers();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 751;
	            this.factoryConstructorSignature();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 753;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            if(la_===1) {
	                this.state = 752;
	                this.match(DartParser.STATIC);

	            }
	            this.state = 755;
	            this.functionSignature();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 757;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===113) {
	                this.state = 756;
	                this.match(DartParser.STATIC);
	            }

	            this.state = 759;
	            this.getterSignature();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===113) {
	                this.state = 760;
	                this.match(DartParser.STATIC);
	            }

	            this.state = 763;
	            this.setterSignature();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 764;
	            this.operatorSignature();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 765;
	            this.match(DartParser.OVERRIDE);
	            this.state = 766;
	            this.functionSignature();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 767;
	            this.constructorSignature();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	declaration() {
	    let localctx = new DeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, DartParser.RULE_declaration);
	    var _la = 0;
	    try {
	        this.state = 862;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 770;
	            this.match(DartParser.EXTERNAL);
	            this.state = 771;
	            this.factoryConstructorSignature();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 772;
	            this.match(DartParser.EXTERNAL);
	            this.state = 773;
	            this.constantConstructorSignature();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 774;
	            this.match(DartParser.EXTERNAL);
	            this.state = 775;
	            this.constructorSignature();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===99) {
	                this.state = 776;
	                this.match(DartParser.EXTERNAL);
	                this.state = 778;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===113) {
	                    this.state = 777;
	                    this.match(DartParser.STATIC);
	                }

	            }

	            this.state = 782;
	            this.getterSignature();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===99) {
	                this.state = 783;
	                this.match(DartParser.EXTERNAL);
	                this.state = 785;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===113) {
	                    this.state = 784;
	                    this.match(DartParser.STATIC);
	                }

	            }

	            this.state = 789;
	            this.setterSignature();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 794;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	            if(la_===1) {
	                this.state = 790;
	                this.match(DartParser.EXTERNAL);
	                this.state = 792;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	                if(la_===1) {
	                    this.state = 791;
	                    this.match(DartParser.STATIC);

	                }

	            }
	            this.state = 796;
	            this.functionSignature();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 797;
	            this.match(DartParser.EXTERNAL);
	            this.state = 804;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 72:
	            case 88:
	            case 89:
	            case 96:
	            case 101:
	            case 113:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 126:
	            case 195:
	                this.state = 799;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===113) {
	                    this.state = 798;
	                    this.match(DartParser.STATIC);
	                }

	                this.state = 801;
	                this.finalVarOrType();
	                break;
	            case 94:
	                this.state = 802;
	                this.match(DartParser.COVARIANT);
	                this.state = 803;
	                this.varOrType();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 806;
	            this.identifierList();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 808;
	            this.match(DartParser.ABSTRACT);
	            this.state = 812;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 72:
	            case 88:
	            case 89:
	            case 96:
	            case 101:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 126:
	            case 195:
	                this.state = 809;
	                this.finalVarOrType();
	                break;
	            case 94:
	                this.state = 810;
	                this.match(DartParser.COVARIANT);
	                this.state = 811;
	                this.varOrType();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 814;
	            this.identifierList();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===99) {
	                this.state = 816;
	                this.match(DartParser.EXTERNAL);
	            }

	            this.state = 819;
	            this.operatorSignature();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 820;
	            this.match(DartParser.STATIC);
	            this.state = 821;
	            _la = this._input.LA(1);
	            if(!(_la===64 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 823;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	            if(la_===1) {
	                this.state = 822;
	                this.type();

	            }
	            this.state = 825;
	            this.staticFinalDeclarationList();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 826;
	            this.match(DartParser.STATIC);
	            this.state = 827;
	            this.match(DartParser.LATE);
	            this.state = 828;
	            this.match(DartParser.FINAL);
	            this.state = 830;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	            if(la_===1) {
	                this.state = 829;
	                this.type();

	            }
	            this.state = 832;
	            this.initializedIdentifierList();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 833;
	            _la = this._input.LA(1);
	            if(!(_la===94 || _la===113)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 834;
	                this.match(DartParser.LATE);
	            }

	            this.state = 837;
	            this.varOrType();
	            this.state = 838;
	            this.initializedIdentifierList();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 841;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 840;
	                this.match(DartParser.LATE);
	            }

	            this.state = 848;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 72:
	                this.state = 843;
	                this.match(DartParser.FINAL);
	                this.state = 845;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	                if(la_===1) {
	                    this.state = 844;
	                    this.type();

	                }
	                break;
	            case 88:
	            case 89:
	            case 96:
	            case 101:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 126:
	            case 195:
	                this.state = 847;
	                this.varOrType();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 850;
	            this.initializedIdentifierList();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 851;
	            this.redirectingFactoryConstructorSignature();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 852;
	            this.constantConstructorSignature();
	            this.state = 855;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	            if(la_===1) {
	                this.state = 853;
	                this.redirection();

	            } else if(la_===2) {
	                this.state = 854;
	                this.initializers();

	            }
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 857;
	            this.constructorSignature();
	            this.state = 860;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 858;
	                this.redirection();

	            } else if(la_===2) {
	                this.state = 859;
	                this.initializers();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticFinalDeclarationList() {
	    let localctx = new StaticFinalDeclarationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, DartParser.RULE_staticFinalDeclarationList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 864;
	        this.staticFinalDeclaration();
	        this.state = 869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 865;
	            this.match(DartParser.T__1);
	            this.state = 866;
	            this.staticFinalDeclaration();
	            this.state = 871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticFinalDeclaration() {
	    let localctx = new StaticFinalDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, DartParser.RULE_staticFinalDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 872;
	        this.identifier();
	        this.state = 873;
	        this.match(DartParser.T__0);
	        this.state = 874;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operatorSignature() {
	    let localctx = new OperatorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, DartParser.RULE_operatorSignature);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4026536065) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 47) !== 0) || _la===195) {
	            this.state = 876;
	            this.type();
	        }

	        this.state = 879;
	        this.match(DartParser.OPERATOR);
	        this.state = 880;
	        this.operator();
	        this.state = 881;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	operator() {
	    let localctx = new OperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, DartParser.RULE_operator);
	    try {
	        this.state = 890;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 883;
	            this.match(DartParser.T__14);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 884;
	            this.binaryOperator();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 885;
	            this.match(DartParser.T__9);
	            this.state = 886;
	            this.match(DartParser.T__10);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 887;
	            this.match(DartParser.T__9);
	            this.state = 888;
	            this.match(DartParser.T__10);
	            this.state = 889;
	            this.match(DartParser.T__0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryOperator() {
	    let localctx = new BinaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, DartParser.RULE_binaryOperator);
	    try {
	        this.state = 898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 892;
	            this.multiplicativeOperator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 893;
	            this.additiveOperator();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 894;
	            this.shiftOperator();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 895;
	            this.relationalOperator();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 896;
	            this.match(DartParser.T__15);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 897;
	            this.bitwiseOperator();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getterSignature() {
	    let localctx = new GetterSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, DartParser.RULE_getterSignature);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 901;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4026536065) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 47) !== 0) || _la===195) {
	            this.state = 900;
	            this.type();
	        }

	        this.state = 903;
	        this.match(DartParser.GET);
	        this.state = 904;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setterSignature() {
	    let localctx = new SetterSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, DartParser.RULE_setterSignature);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4026536065) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 47) !== 0) || _la===195) {
	            this.state = 906;
	            this.type();
	        }

	        this.state = 909;
	        this.match(DartParser.SET);
	        this.state = 910;
	        this.identifier();
	        this.state = 911;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorSignature() {
	    let localctx = new ConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, DartParser.RULE_constructorSignature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 913;
	        this.constructorName();
	        this.state = 914;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorName() {
	    let localctx = new ConstructorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, DartParser.RULE_constructorName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 916;
	        this.typeIdentifier();
	        this.state = 919;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13) {
	            this.state = 917;
	            this.match(DartParser.T__12);
	            this.state = 918;
	            this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redirection() {
	    let localctx = new RedirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, DartParser.RULE_redirection);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 921;
	        this.match(DartParser.T__13);
	        this.state = 922;
	        this.match(DartParser.THIS);
	        this.state = 925;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13) {
	            this.state = 923;
	            this.match(DartParser.T__12);
	            this.state = 924;
	            this.identifier();
	        }

	        this.state = 927;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializers() {
	    let localctx = new InitializersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, DartParser.RULE_initializers);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        this.match(DartParser.T__13);
	        this.state = 930;
	        this.initializerListEntry();
	        this.state = 935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 931;
	            this.match(DartParser.T__1);
	            this.state = 932;
	            this.initializerListEntry();
	            this.state = 937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerListEntry() {
	    let localctx = new InitializerListEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, DartParser.RULE_initializerListEntry);
	    try {
	        this.state = 947;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 938;
	            this.match(DartParser.SUPER);
	            this.state = 939;
	            this.arguments();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 940;
	            this.match(DartParser.SUPER);
	            this.state = 941;
	            this.match(DartParser.T__12);
	            this.state = 942;
	            this.identifier();
	            this.state = 943;
	            this.arguments();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 945;
	            this.fieldInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 946;
	            this.assertion();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldInitializer() {
	    let localctx = new FieldInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, DartParser.RULE_fieldInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 951;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===84) {
	            this.state = 949;
	            this.match(DartParser.THIS);
	            this.state = 950;
	            this.match(DartParser.T__12);
	        }

	        this.state = 953;
	        this.identifier();
	        this.state = 954;
	        this.match(DartParser.T__0);
	        this.state = 955;
	        this.initializerExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	initializerExpression() {
	    let localctx = new InitializerExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, DartParser.RULE_initializerExpression);
	    try {
	        this.state = 959;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 957;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 958;
	            this.cascade(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	factoryConstructorSignature() {
	    let localctx = new FactoryConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, DartParser.RULE_factoryConstructorSignature);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 962;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 961;
	            this.match(DartParser.CONST);
	        }

	        this.state = 964;
	        this.match(DartParser.FACTORY);
	        this.state = 965;
	        this.constructorName();
	        this.state = 966;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	redirectingFactoryConstructorSignature() {
	    let localctx = new RedirectingFactoryConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, DartParser.RULE_redirectingFactoryConstructorSignature);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 968;
	            this.match(DartParser.CONST);
	        }

	        this.state = 971;
	        this.match(DartParser.FACTORY);
	        this.state = 972;
	        this.constructorName();
	        this.state = 973;
	        this.formalParameterList();
	        this.state = 974;
	        this.match(DartParser.T__0);
	        this.state = 975;
	        this.constructorDesignation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantConstructorSignature() {
	    let localctx = new ConstantConstructorSignatureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, DartParser.RULE_constantConstructorSignature);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 977;
	        this.match(DartParser.CONST);
	        this.state = 978;
	        this.constructorName();
	        this.state = 979;
	        this.formalParameterList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superclass() {
	    let localctx = new SuperclassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, DartParser.RULE_superclass);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 981;
	        this.match(DartParser.EXTENDS);
	        this.state = 982;
	        this.typeNotVoidNotFunction();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixins() {
	    let localctx = new MixinsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, DartParser.RULE_mixins);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 984;
	        this.match(DartParser.WITH);
	        this.state = 985;
	        this.typeNotVoidNotFunctionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaces() {
	    let localctx = new InterfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, DartParser.RULE_interfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.match(DartParser.IMPLEMENTS);
	        this.state = 988;
	        this.typeNotVoidNotFunctionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinApplicationClass() {
	    let localctx = new MixinApplicationClassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, DartParser.RULE_mixinApplicationClass);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 990;
	        this.typeWithParameters();
	        this.state = 991;
	        this.match(DartParser.T__0);
	        this.state = 992;
	        this.mixinApplication();
	        this.state = 993;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinApplication() {
	    let localctx = new MixinApplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, DartParser.RULE_mixinApplication);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 995;
	        this.typeNotVoidNotFunction();
	        this.state = 996;
	        this.mixins();
	        this.state = 998;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 997;
	            this.interfaces();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mixinDeclaration() {
	    let localctx = new MixinDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, DartParser.RULE_mixinDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1000;
	        this.match(DartParser.MIXIN);
	        this.state = 1001;
	        this.typeIdentifier();
	        this.state = 1003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 1002;
	            this.typeParameters();
	        }

	        this.state = 1007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===120) {
	            this.state = 1005;
	            this.match(DartParser.ON);
	            this.state = 1006;
	            this.typeNotVoidNotFunctionList();
	        }

	        this.state = 1010;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===103) {
	            this.state = 1009;
	            this.interfaces();
	        }

	        this.state = 1012;
	        this.match(DartParser.LBRACE);
	        this.state = 1018;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===19 || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4076863745) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 2145910779) !== 0) || _la===195 || _la===199) {
	            this.state = 1013;
	            this.metadata();
	            this.state = 1014;
	            this.classMemberDefinition();
	            this.state = 1020;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1021;
	        this.match(DartParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumType() {
	    let localctx = new EnumTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, DartParser.RULE_enumType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1023;
	        this.match(DartParser.ENUM);
	        this.state = 1024;
	        this.typeIdentifier();
	        this.state = 1025;
	        this.match(DartParser.LBRACE);
	        this.state = 1026;
	        this.enumEntry();
	        this.state = 1031;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1027;
	                this.match(DartParser.T__1);
	                this.state = 1028;
	                this.enumEntry(); 
	            }
	            this.state = 1033;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	        this.state = 1035;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1034;
	            this.match(DartParser.T__1);
	        }

	        this.state = 1037;
	        this.match(DartParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, DartParser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1039;
	        this.metadata();
	        this.state = 1040;
	        this.typeIdentifier();
	        this.state = 1043;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===70) {
	            this.state = 1041;
	            this.match(DartParser.EXTENDS);
	            this.state = 1042;
	            this.typeNotVoid();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, DartParser.RULE_typeParameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1045;
	        this.match(DartParser.T__16);
	        this.state = 1046;
	        this.typeParameter();
	        this.state = 1051;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 1047;
	            this.match(DartParser.T__1);
	            this.state = 1048;
	            this.typeParameter();
	            this.state = 1053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1054;
	        this.match(DartParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumEntry() {
	    let localctx = new EnumEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, DartParser.RULE_enumEntry);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1056;
	        this.metadata();
	        this.state = 1057;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metadata() {
	    let localctx = new MetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, DartParser.RULE_metadata);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1063;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1059;
	                this.match(DartParser.T__18);
	                this.state = 1060;
	                this.metadatum(); 
	            }
	            this.state = 1065;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	metadatum() {
	    let localctx = new MetadatumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, DartParser.RULE_metadatum);
	    try {
	        this.state = 1071;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1066;
	            this.constructorDesignation();
	            this.state = 1067;
	            this.arguments();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1069;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1070;
	            this.qualifiedName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, DartParser.RULE_expression);
	    try {
	        this.state = 1082;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1073;
	            this.functionExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1074;
	            this.throwExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1075;
	            this.assignableExpression();
	            this.state = 1076;
	            this.assignmentOperator();
	            this.state = 1077;
	            this.expression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1079;
	            this.conditionalExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1080;
	            this.widget();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1081;
	            this.cascade(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widget() {
	    let localctx = new WidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, DartParser.RULE_widget);
	    try {
	        this.state = 1101;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 20:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1084;
	            this.match(DartParser.T__19);
	            this.state = 1085;
	            this.widget();
	            break;
	        case 131:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1086;
	            this.textWidget();
	            break;
	        case 132:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1087;
	            this.centerWidget();
	            break;
	        case 127:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1088;
	            this.scaffoldWidget();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1089;
	            this.appBarWidget();
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1090;
	            this.textStyleWidget();
	            break;
	        case 135:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1091;
	            this.sizedBoxWidget();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1092;
	            this.columnWidget();
	            break;
	        case 129:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1093;
	            this.textFieldWidget();
	            break;
	        case 130:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1094;
	            this.elevatedButtonWidget();
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1095;
	            this.containerWidget();
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1096;
	            this.inputDecorationWidget();
	            break;
	        case 139:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1097;
	            this.borderWidget();
	            break;
	        case 141:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1098;
	            this.imageWidget();
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1099;
	            this.rowWidget();
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1100;
	            this.boxDecorationWidget();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textWidget() {
	    let localctx = new TextWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, DartParser.RULE_textWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1103;
	        this.match(DartParser.TEXT);
	        this.state = 1104;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textStyleWidget() {
	    let localctx = new TextStyleWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, DartParser.RULE_textStyleWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1106;
	        this.match(DartParser.TEXT_STYLE);
	        this.state = 1107;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	centerWidget() {
	    let localctx = new CenterWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, DartParser.RULE_centerWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1109;
	        this.match(DartParser.CENTER);
	        this.state = 1110;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnWidget() {
	    let localctx = new ColumnWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, DartParser.RULE_columnWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1112;
	        this.match(DartParser.COLUMN);
	        this.state = 1113;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowWidget() {
	    let localctx = new RowWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, DartParser.RULE_rowWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1115;
	        this.match(DartParser.ROW);
	        this.state = 1116;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sizedBoxWidget() {
	    let localctx = new SizedBoxWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, DartParser.RULE_sizedBoxWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1118;
	        this.match(DartParser.SIZED_BOX);
	        this.state = 1119;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scaffoldWidget() {
	    let localctx = new ScaffoldWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, DartParser.RULE_scaffoldWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1121;
	        this.match(DartParser.SCAFFOLD);
	        this.state = 1122;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	appBarWidget() {
	    let localctx = new AppBarWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, DartParser.RULE_appBarWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1124;
	        this.match(DartParser.APP_BAR_WIDGET);
	        this.state = 1125;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textFieldWidget() {
	    let localctx = new TextFieldWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, DartParser.RULE_textFieldWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1127;
	        this.match(DartParser.TEXT_FIELD);
	        this.state = 1128;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elevatedButtonWidget() {
	    let localctx = new ElevatedButtonWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, DartParser.RULE_elevatedButtonWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1130;
	        this.match(DartParser.ELEVATED_BUTTON);
	        this.state = 1131;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	containerWidget() {
	    let localctx = new ContainerWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, DartParser.RULE_containerWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1133;
	        this.match(DartParser.CONTAINER);
	        this.state = 1134;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inputDecorationWidget() {
	    let localctx = new InputDecorationWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, DartParser.RULE_inputDecorationWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1136;
	        this.match(DartParser.INPUT_DECORATION_WIDGET);
	        this.state = 1137;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	borderWidget() {
	    let localctx = new BorderWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, DartParser.RULE_borderWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1139;
	        this.match(DartParser.BORDER_WIDGET);
	        this.state = 1140;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boxDecorationWidget() {
	    let localctx = new BoxDecorationWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, DartParser.RULE_boxDecorationWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1142;
	        this.match(DartParser.BOX_DECORATION_WIDGET);
	        this.state = 1143;
	        this.widgetBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imageWidget() {
	    let localctx = new ImageWidgetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, DartParser.RULE_imageWidget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1145;
	        this.match(DartParser.IMAGE_WIDGET);
	        this.state = 1146;
	        this.match(DartParser.T__12);
	        this.state = 1147;
	        this.match(DartParser.NETWROK_IMAGE);
	        this.state = 1148;
	        this.match(DartParser.T__5);
	        this.state = 1149;
	        this.imageUrl();
	        this.state = 1150;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imageUrl() {
	    let localctx = new ImageUrlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, DartParser.RULE_imageUrl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1152;
	        this.singleLineString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widgetBody() {
	    let localctx = new WidgetBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, DartParser.RULE_widgetBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1154;
	        this.match(DartParser.T__5);
	        this.state = 1158;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || ((((_la - 143)) & ~0x1f) === 0 && ((1 << (_la - 143)) & 2633568255) !== 0) || ((((_la - 183)) & ~0x1f) === 0 && ((1 << (_la - 183)) & 4505) !== 0)) {
	            this.state = 1155;
	            this.widgetBodyProps();
	            this.state = 1160;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1161;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	widgetBodyProps() {
	    let localctx = new WidgetBodyPropsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, DartParser.RULE_widgetBodyProps);
	    var _la = 0;
	    try {
	        this.state = 1261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 153:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1163;
	            this.match(DartParser.APP_BAR);
	            this.state = 1164;
	            this.match(DartParser.T__13);
	            this.state = 1165;
	            this.widget();
	            break;
	        case 144:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1166;
	            this.match(DartParser.TITLE);
	            this.state = 1167;
	            this.match(DartParser.T__13);
	            this.state = 1168;
	            this.widget();
	            break;
	        case 145:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1169;
	            this.match(DartParser.CHILD);
	            this.state = 1170;
	            this.match(DartParser.T__13);
	            this.state = 1171;
	            this.widget();
	            break;
	        case 151:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1172;
	            this.match(DartParser.STYLE);
	            this.state = 1173;
	            this.match(DartParser.T__13);
	            this.state = 1174;
	            this.widget();
	            break;
	        case 152:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1175;
	            this.match(DartParser.CHILDREN);
	            this.state = 1176;
	            this.match(DartParser.T__13);
	            this.state = 1178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 1177;
	                this.match(DartParser.T__20);
	            }

	            this.state = 1180;
	            this.match(DartParser.T__9);
	            this.state = 1185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===2 || _la===20 || ((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 32767) !== 0)) {
	                this.state = 1183;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 20:
	                case 127:
	                case 128:
	                case 129:
	                case 130:
	                case 131:
	                case 132:
	                case 133:
	                case 134:
	                case 135:
	                case 136:
	                case 137:
	                case 138:
	                case 139:
	                case 140:
	                case 141:
	                    this.state = 1181;
	                    this.widget();
	                    break;
	                case 2:
	                    this.state = 1182;
	                    this.match(DartParser.T__1);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 1187;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1188;
	            this.match(DartParser.T__10);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1189;
	            this.match(DartParser.FONTSIZE);
	            this.state = 1190;
	            this.match(DartParser.T__13);
	            this.state = 1191;
	            this.fontSize();
	            break;
	        case 169:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1192;
	            this.match(DartParser.FONT_WEIGHT_BODY_ATT);
	            this.state = 1193;
	            this.match(DartParser.T__13);
	            this.state = 1194;
	            this.fontWeight();
	            break;
	        case 147:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1195;
	            this.match(DartParser.CONTROLLER);
	            this.state = 1196;
	            this.match(DartParser.T__13);
	            this.state = 1197;
	            this.controllerName();
	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1198;
	            this.match(DartParser.HEIGHT);
	            this.state = 1199;
	            this.match(DartParser.T__13);
	            this.state = 1200;
	            this.height();
	            break;
	        case 149:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1201;
	            this.match(DartParser.WIDTH);
	            this.state = 1202;
	            this.match(DartParser.T__13);
	            this.state = 1203;
	            this.width();
	            break;
	        case 150:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1204;
	            this.match(DartParser.ON_PRESSED);
	            this.state = 1205;
	            this.match(DartParser.T__13);
	            this.state = 1206;
	            this.functionExpression();
	            break;
	        case 154:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1207;
	            this.match(DartParser.MARGIN);
	            this.state = 1208;
	            this.match(DartParser.T__13);
	            this.state = 1210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1209;
	                this.match(DartParser.T__19);
	            }

	            this.state = 1212;
	            this.edgeInsets();
	            break;
	        case 170:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1213;
	            this.match(DartParser.PADDING);
	            this.state = 1214;
	            this.match(DartParser.T__13);
	            this.state = 1216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1215;
	                this.match(DartParser.T__19);
	            }

	            this.state = 1218;
	            this.padding();
	            break;
	        case 174:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1219;
	            this.match(DartParser.COLOR);
	            this.state = 1220;
	            this.match(DartParser.T__13);
	            this.state = 1222;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1221;
	                this.match(DartParser.T__19);
	            }

	            this.state = 1224;
	            this.colors();
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1225;
	            this.match(DartParser.BORDER_RADIUS_ATT);
	            this.state = 1226;
	            this.match(DartParser.T__13);
	            this.state = 1228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1227;
	                this.match(DartParser.T__19);
	            }

	            this.state = 1230;
	            this.borderRadius();
	            break;
	        case 163:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1231;
	            this.match(DartParser.DECORATION_BODY_ATT);
	            this.state = 1232;
	            this.match(DartParser.T__13);
	            this.state = 1233;
	            this.widget();
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1234;
	            this.match(DartParser.HINT_TEXT);
	            this.state = 1235;
	            this.match(DartParser.T__13);
	            this.state = 1236;
	            this.hintText();
	            break;
	        case 166:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1237;
	            this.match(DartParser.OBSCURE_TEXT);
	            this.state = 1238;
	            this.match(DartParser.T__13);
	            this.state = 1239;
	            this.obscureText();
	            break;
	        case 165:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1240;
	            this.match(DartParser.BORDER);
	            this.state = 1241;
	            this.match(DartParser.T__13);
	            this.state = 1242;
	            this.widget();
	            break;
	        case 159:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1243;
	            this.match(DartParser.MAIN_AXIS_ALIGNMENT_BODY_ATT);
	            this.state = 1244;
	            this.match(DartParser.T__13);
	            this.state = 1246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1245;
	                this.match(DartParser.T__19);
	            }

	            this.state = 1248;
	            this.mainAxisAlignment();
	            break;
	        case 162:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1249;
	            this.match(DartParser.MAIN_AXIS_SIZE_BODY_ATT);
	            this.state = 1250;
	            this.match(DartParser.T__13);
	            this.state = 1252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===20) {
	                this.state = 1251;
	                this.match(DartParser.T__19);
	            }

	            this.state = 1254;
	            this.mainAxisSize();
	            break;
	        case 2:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1255;
	            this.match(DartParser.T__1);
	            break;
	        case 183:
	        case 186:
	        case 187:
	        case 190:
	        case 191:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1256;
	            this.stringLiteral();
	            break;
	        case 195:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1257;
	            this.variable();
	            break;
	        case 143:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1258;
	            this.match(DartParser.BODY);
	            this.state = 1259;
	            this.match(DartParser.T__13);
	            this.state = 1260;
	            this.widget();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	padding() {
	    let localctx = new PaddingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, DartParser.RULE_padding);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1263;
	        this.edgeInsets();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	borderRadius() {
	    let localctx = new BorderRadiusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, DartParser.RULE_borderRadius);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1265;
	        this.match(DartParser.BORDER_RADIUS);
	        this.state = 1266;
	        this.match(DartParser.T__12);

	        this.state = 1267;
	        this.circularBorderRadius();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	circularBorderRadius() {
	    let localctx = new CircularBorderRadiusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, DartParser.RULE_circularBorderRadius);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1269;
	        this.match(DartParser.BORDER_RADIUS_CIRCULAR);
	        this.state = 1270;
	        this.match(DartParser.T__5);
	        this.state = 1271;
	        this.circularBorderRadiusValue();
	        this.state = 1272;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	circularBorderRadiusValue() {
	    let localctx = new CircularBorderRadiusValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, DartParser.RULE_circularBorderRadiusValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1274;
	        this.numericLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colors() {
	    let localctx = new ColorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, DartParser.RULE_colors);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1276;
	        this.match(DartParser.COLORS);
	        this.state = 1277;
	        this.match(DartParser.T__5);
	        this.state = 1278;
	        this.colorName();
	        this.state = 1279;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	colorName() {
	    let localctx = new ColorNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, DartParser.RULE_colorName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1281;
	        this.numericLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	height() {
	    let localctx = new HeightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, DartParser.RULE_height);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1283;
	        this.numericLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	width() {
	    let localctx = new WidthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, DartParser.RULE_width);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1285;
	        this.numericLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	obscureText() {
	    let localctx = new ObscureTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, DartParser.RULE_obscureText);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1287;
	        this.booleanLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	hintText() {
	    let localctx = new HintTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, DartParser.RULE_hintText);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1289;
	        this.singleLineString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontSize() {
	    let localctx = new FontSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, DartParser.RULE_fontSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.numericLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontWeight() {
	    let localctx = new FontWeightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, DartParser.RULE_fontWeight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.fontWeightBold();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fontWeightBold() {
	    let localctx = new FontWeightBoldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, DartParser.RULE_fontWeightBold);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1295;
	        this.match(DartParser.FONT_WEIGHT);
	        this.state = 1296;
	        this.match(DartParser.T__12);
	        this.state = 1297;
	        this.match(DartParser.FONT_WEIGHT_BOLD);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainAxisAlignment() {
	    let localctx = new MainAxisAlignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, DartParser.RULE_mainAxisAlignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.mainAxisAlignmentCenter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainAxisSize() {
	    let localctx = new MainAxisSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, DartParser.RULE_mainAxisSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1301;
	        this.mainAxisSizeMin();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainAxisSizeMin() {
	    let localctx = new MainAxisSizeMinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, DartParser.RULE_mainAxisSizeMin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1303;
	        this.match(DartParser.MAIN_AXIS_SIZE);
	        this.state = 1304;
	        this.match(DartParser.T__12);
	        this.state = 1305;
	        this.match(DartParser.MAIN_AXIS_SIZE_MIN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mainAxisAlignmentCenter() {
	    let localctx = new MainAxisAlignmentCenterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, DartParser.RULE_mainAxisAlignmentCenter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1307;
	        this.match(DartParser.MAIN_AXIS_ALIGNMENT);
	        this.state = 1308;
	        this.match(DartParser.T__12);
	        this.state = 1309;
	        this.match(DartParser.MAIN_AXIS_ALIGNMENT_CENTER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeInsets() {
	    let localctx = new EdgeInsetsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, DartParser.RULE_edgeInsets);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1311;
	        this.match(DartParser.EDGEINSETS);
	        this.state = 1312;
	        this.match(DartParser.T__12);
	        this.state = 1313;
	        this.match(DartParser.EDGEINSETS_ALL);
	        this.state = 1314;
	        this.match(DartParser.T__5);
	        this.state = 1315;
	        this.edgeInsetsNumber();
	        this.state = 1316;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeInsetsNumber() {
	    let localctx = new EdgeInsetsNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, DartParser.RULE_edgeInsetsNumber);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1318;
	        this.numericLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, DartParser.RULE_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this.match(DartParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	controllerName() {
	    let localctx = new ControllerNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, DartParser.RULE_controllerName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1322;
	        this.match(DartParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionWithoutCascade() {
	    let localctx = new ExpressionWithoutCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, DartParser.RULE_expressionWithoutCascade);
	    try {
	        this.state = 1331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1324;
	            this.functionExpressionWithoutCascade();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1325;
	            this.throwExpressionWithoutCascade();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1326;
	            this.assignableExpression();
	            this.state = 1327;
	            this.assignmentOperator();
	            this.state = 1328;
	            this.expressionWithoutCascade();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1330;
	            this.conditionalExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, DartParser.RULE_expressionList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1333;
	        this.expression();
	        this.state = 1338;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1334;
	                this.match(DartParser.T__1);
	                this.state = 1335;
	                this.expression(); 
	            }
	            this.state = 1340;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, DartParser.RULE_primary);
	    try {
	        this.state = 1354;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1341;
	            this.thisExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1342;
	            this.match(DartParser.SUPER);
	            this.state = 1343;
	            this.unconditionalAssignableSelector();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1344;
	            this.constObjectExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1345;
	            this.newExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1346;
	            this.constructorInvocation();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1347;
	            this.functionPrimary();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1348;
	            this.match(DartParser.T__5);
	            this.state = 1349;
	            this.expression();
	            this.state = 1350;
	            this.match(DartParser.T__6);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1352;
	            this.literal();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1353;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, DartParser.RULE_literal);
	    try {
	        this.state = 1363;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1356;
	            this.nullLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1357;
	            this.booleanLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1358;
	            this.numericLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1359;
	            this.stringLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1360;
	            this.symbolLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1361;
	            this.setOrMapLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1362;
	            this.listLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, DartParser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1365;
	        this.match(DartParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, DartParser.RULE_numericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        _la = this._input.LA(1);
	        if(!(_la===181 || _la===182)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, DartParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1369;
	        _la = this._input.LA(1);
	        if(!(_la===71 || _la===86)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, DartParser.RULE_stringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1372; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1371;
	        		this.singleLineString();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1374; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,112, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	symbolLiteral() {
	    let localctx = new SymbolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, DartParser.RULE_symbolLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1376;
	        this.match(DartParser.T__21);
	        this.state = 1386;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 10:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	            this.state = 1377;
	            this.operator();
	            break;
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 125:
	        case 195:
	            this.state = 1378;
	            this.identifier();
	            this.state = 1383;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,113,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1379;
	                    this.match(DartParser.T__12);
	                    this.state = 1380;
	                    this.identifier(); 
	                }
	                this.state = 1385;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,113,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, DartParser.RULE_listLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 1388;
	            this.match(DartParser.CONST);
	        }

	        this.state = 1392;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 1391;
	            this.typeArguments();
	        }

	        this.state = 1394;
	        this.match(DartParser.T__9);
	        this.state = 1396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 30573632) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1715503217) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	            this.state = 1395;
	            this.elements();
	        }

	        this.state = 1398;
	        this.match(DartParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOrMapLiteral() {
	    let localctx = new SetOrMapLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, DartParser.RULE_setOrMapLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1401;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===64) {
	            this.state = 1400;
	            this.match(DartParser.CONST);
	        }

	        this.state = 1404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 1403;
	            this.typeArguments();
	        }

	        this.state = 1406;
	        this.match(DartParser.LBRACE);
	        this.state = 1408;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 30573632) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1715503217) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	            this.state = 1407;
	            this.elements();
	        }

	        this.state = 1410;
	        this.match(DartParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elements() {
	    let localctx = new ElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, DartParser.RULE_elements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        this.element();
	        this.state = 1417;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,121,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1413;
	                this.match(DartParser.T__1);
	                this.state = 1414;
	                this.element(); 
	            }
	            this.state = 1419;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,121,this._ctx);
	        }

	        this.state = 1421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1420;
	            this.match(DartParser.T__1);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	element() {
	    let localctx = new ElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, DartParser.RULE_element);
	    try {
	        this.state = 1428;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1423;
	            this.expressionElement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1424;
	            this.mapElement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1425;
	            this.spreadElement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1426;
	            this.ifElement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1427;
	            this.forElement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionElement() {
	    let localctx = new ExpressionElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, DartParser.RULE_expressionElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapElement() {
	    let localctx = new MapElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, DartParser.RULE_mapElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1432;
	        this.expression();
	        this.state = 1433;
	        this.match(DartParser.T__13);
	        this.state = 1434;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spreadElement() {
	    let localctx = new SpreadElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, DartParser.RULE_spreadElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        _la = this._input.LA(1);
	        if(!(_la===23 || _la===24)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1437;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifElement() {
	    let localctx = new IfElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, DartParser.RULE_ifElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1439;
	        this.match(DartParser.IF);
	        this.state = 1440;
	        this.match(DartParser.T__5);
	        this.state = 1441;
	        this.expression();
	        this.state = 1442;
	        this.match(DartParser.T__6);
	        this.state = 1443;
	        this.element();
	        this.state = 1446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 1444;
	            this.match(DartParser.ELSE);
	            this.state = 1445;
	            this.element();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forElement() {
	    let localctx = new ForElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, DartParser.RULE_forElement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1449;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 1448;
	            this.match(DartParser.AWAIT);
	        }

	        this.state = 1451;
	        this.match(DartParser.FOR);
	        this.state = 1452;
	        this.match(DartParser.T__5);
	        this.state = 1453;
	        this.forLoopParts();
	        this.state = 1454;
	        this.match(DartParser.T__6);
	        this.state = 1455;
	        this.element();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwExpression() {
	    let localctx = new ThrowExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, DartParser.RULE_throwExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1457;
	        this.match(DartParser.THROW);
	        this.state = 1458;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwExpressionWithoutCascade() {
	    let localctx = new ThrowExpressionWithoutCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, DartParser.RULE_throwExpressionWithoutCascade);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1460;
	        this.match(DartParser.THROW);
	        this.state = 1461;
	        this.expressionWithoutCascade();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionExpression() {
	    let localctx = new FunctionExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, DartParser.RULE_functionExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this.formalParameterPart();
	        this.state = 1464;
	        this.functionExpressionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionExpressionBody() {
	    let localctx = new FunctionExpressionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, DartParser.RULE_functionExpressionBody);
	    try {
	        this.state = 1478;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1466;
	            this.match(DartParser.T__2);
	            this.state = 1467;
	            this.expression();
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1468;
	            this.match(DartParser.T__5);
	            this.state = 1469;
	            this.normalFormalParameters();
	            this.state = 1470;
	            this.match(DartParser.T__6);
	            this.state = 1471;
	            this.match(DartParser.T__2);
	            this.state = 1472;
	            this.expression();
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1474;
	            this.block();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1475;
	            this.match(DartParser.ASYNC);
	            this.state = 1476;
	            this.match(DartParser.T__2);
	            this.state = 1477;
	            this.expression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionExpressionWithoutCascade() {
	    let localctx = new FunctionExpressionWithoutCascadeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, DartParser.RULE_functionExpressionWithoutCascade);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this.formalParameterPart();
	        this.state = 1481;
	        this.functionExpressionWithoutCascadeBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionExpressionWithoutCascadeBody() {
	    let localctx = new FunctionExpressionWithoutCascadeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, DartParser.RULE_functionExpressionWithoutCascadeBody);
	    try {
	        this.state = 1488;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1483;
	            this.match(DartParser.T__2);
	            this.state = 1484;
	            this.expressionWithoutCascade();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1485;
	            this.match(DartParser.ASYNC);
	            this.state = 1486;
	            this.match(DartParser.T__2);
	            this.state = 1487;
	            this.expressionWithoutCascade();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionPrimary() {
	    let localctx = new FunctionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, DartParser.RULE_functionPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1490;
	        this.formalParameterPart();
	        this.state = 1491;
	        this.functionPrimaryBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionPrimaryBody() {
	    let localctx = new FunctionPrimaryBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, DartParser.RULE_functionPrimaryBody);
	    try {
	        this.state = 1502;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 184:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1493;
	            this.block();
	            break;
	        case 117:
	        case 122:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1494;
	                this.match(DartParser.ASYNC);
	                break;

	            case 2:
	                this.state = 1495;
	                this.match(DartParser.ASYNC);
	                this.state = 1496;
	                this.match(DartParser.T__4);
	                break;

	            case 3:
	                this.state = 1497;
	                this.match(DartParser.SYNC);
	                this.state = 1498;
	                this.match(DartParser.T__4);
	                break;

	            }
	            this.state = 1501;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thisExpression() {
	    let localctx = new ThisExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, DartParser.RULE_thisExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1504;
	        this.match(DartParser.THIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	newExpression() {
	    let localctx = new NewExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, DartParser.RULE_newExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1506;
	        this.match(DartParser.NEW);
	        this.state = 1507;
	        this.constructorDesignation();
	        this.state = 1508;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constObjectExpression() {
	    let localctx = new ConstObjectExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, DartParser.RULE_constObjectExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1510;
	        this.match(DartParser.CONST);
	        this.state = 1511;
	        this.constructorDesignation();
	        this.state = 1512;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arguments() {
	    let localctx = new ArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, DartParser.RULE_arguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1514;
	        this.match(DartParser.T__5);
	        this.state = 1516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 5407808) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1614839921) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	            this.state = 1515;
	            this.argumentList();
	        }

	        this.state = 1518;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, DartParser.RULE_argumentList);
	    var _la = 0;
	    try {
	        this.state = 1536;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1520;
	            this.namedArgument();
	            this.state = 1525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===2) {
	                this.state = 1521;
	                this.match(DartParser.T__1);
	                this.state = 1522;
	                this.namedArgument();
	                this.state = 1527;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1528;
	            this.expressionList();
	            this.state = 1533;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===2) {
	                this.state = 1529;
	                this.match(DartParser.T__1);
	                this.state = 1530;
	                this.namedArgument();
	                this.state = 1535;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedArgument() {
	    let localctx = new NamedArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, DartParser.RULE_namedArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1538;
	        this.label();
	        this.state = 1539;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	cascade(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CascadeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 260;
	    this.enterRecursionRule(localctx, 260, DartParser.RULE_cascade, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1542;
	        this.conditionalExpression();
	        this.state = 1543;
	        _la = this._input.LA(1);
	        if(!(_la===25 || _la===26)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1544;
	        this.cascadeSection();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1551;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CascadeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, DartParser.RULE_cascade);
	                this.state = 1546;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1547;
	                this.match(DartParser.T__24);
	                this.state = 1548;
	                this.cascadeSection(); 
	            }
	            this.state = 1553;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	cascadeSection() {
	    let localctx = new CascadeSectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, DartParser.RULE_cascadeSection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1554;
	        this.cascadeSelector();
	        this.state = 1555;
	        this.cascadeSectionTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cascadeSelector() {
	    let localctx = new CascadeSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, DartParser.RULE_cascadeSelector);
	    try {
	        this.state = 1562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1557;
	            this.match(DartParser.T__9);
	            this.state = 1558;
	            this.expression();
	            this.state = 1559;
	            this.match(DartParser.T__10);
	            break;
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 99:
	        case 100:
	        case 101:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 125:
	        case 195:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1561;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cascadeSectionTail() {
	    let localctx = new CascadeSectionTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, DartParser.RULE_cascadeSectionTail);
	    try {
	        this.state = 1576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1564;
	            this.cascadeAssignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1568;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,136,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1565;
	                    this.selector(); 
	                }
	                this.state = 1570;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,136,this._ctx);
	            }

	            this.state = 1574;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	            if(la_===1) {
	                this.state = 1571;
	                this.assignableSelector();
	                this.state = 1572;
	                this.cascadeAssignment();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cascadeAssignment() {
	    let localctx = new CascadeAssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, DartParser.RULE_cascadeAssignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1578;
	        this.assignmentOperator();
	        this.state = 1579;
	        this.expressionWithoutCascade();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, DartParser.RULE_assignmentOperator);
	    try {
	        this.state = 1583;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1581;
	            this.match(DartParser.T__0);
	            break;
	        case 18:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1582;
	            this.compoundAssignmentOperator();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundAssignmentOperator() {
	    let localctx = new CompoundAssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, DartParser.RULE_compoundAssignmentOperator);
	    try {
	        this.state = 1603;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,140,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1585;
	            this.match(DartParser.T__26);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1586;
	            this.match(DartParser.T__27);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1587;
	            this.match(DartParser.T__28);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1588;
	            this.match(DartParser.T__29);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1589;
	            this.match(DartParser.T__30);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1590;
	            this.match(DartParser.T__31);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1591;
	            this.match(DartParser.T__32);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1592;
	            this.match(DartParser.T__17);
	            this.state = 1593;
	            this.match(DartParser.T__17);
	            this.state = 1594;
	            this.match(DartParser.T__17);
	            this.state = 1595;
	            this.match(DartParser.T__0);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1596;
	            this.match(DartParser.T__17);
	            this.state = 1597;
	            this.match(DartParser.T__17);
	            this.state = 1598;
	            this.match(DartParser.T__0);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1599;
	            this.match(DartParser.T__33);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1600;
	            this.match(DartParser.T__34);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1601;
	            this.match(DartParser.T__35);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1602;
	            this.match(DartParser.T__36);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, DartParser.RULE_conditionalExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1605;
	        this.ifNullExpression();
	        this.state = 1611;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 1606;
	            this.match(DartParser.T__11);
	            this.state = 1607;
	            this.expressionWithoutCascade();
	            this.state = 1608;
	            this.match(DartParser.T__13);
	            this.state = 1609;
	            this.expressionWithoutCascade();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNullExpression() {
	    let localctx = new IfNullExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, DartParser.RULE_ifNullExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1613;
	        this.logicalOrExpression();
	        this.state = 1618;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1614;
	                this.match(DartParser.T__37);
	                this.state = 1615;
	                this.logicalOrExpression(); 
	            }
	            this.state = 1620;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalOrExpression() {
	    let localctx = new LogicalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, DartParser.RULE_logicalOrExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1621;
	        this.logicalAndExpression();
	        this.state = 1626;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,143,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1622;
	                this.match(DartParser.T__38);
	                this.state = 1623;
	                this.logicalAndExpression(); 
	            }
	            this.state = 1628;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,143,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logicalAndExpression() {
	    let localctx = new LogicalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, DartParser.RULE_logicalAndExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.equalityExpression();
	        this.state = 1634;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1630;
	                this.match(DartParser.T__39);
	                this.state = 1631;
	                this.equalityExpression(); 
	            }
	            this.state = 1636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityExpression() {
	    let localctx = new EqualityExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, DartParser.RULE_equalityExpression);
	    try {
	        this.state = 1647;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1637;
	            this.relationalExpression();
	            this.state = 1641;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            if(la_===1) {
	                this.state = 1638;
	                this.equalityOperator();
	                this.state = 1639;
	                this.relationalExpression();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1643;
	            this.match(DartParser.SUPER);
	            this.state = 1644;
	            this.equalityOperator();
	            this.state = 1645;
	            this.relationalExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equalityOperator() {
	    let localctx = new EqualityOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, DartParser.RULE_equalityOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1649;
	        _la = this._input.LA(1);
	        if(!(_la===16 || _la===41)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, DartParser.RULE_relationalExpression);
	    try {
	        this.state = 1663;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1651;
	            this.bitwiseOrExpression();
	            this.state = 1657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	            if(la_===1) {
	                this.state = 1652;
	                this.typeTest();

	            } else if(la_===2) {
	                this.state = 1653;
	                this.typeCast();

	            } else if(la_===3) {
	                this.state = 1654;
	                this.relationalOperator();
	                this.state = 1655;
	                this.bitwiseOrExpression();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1659;
	            this.match(DartParser.SUPER);
	            this.state = 1660;
	            this.relationalOperator();
	            this.state = 1661;
	            this.bitwiseOrExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalOperator() {
	    let localctx = new RelationalOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, DartParser.RULE_relationalOperator);
	    try {
	        this.state = 1669;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 42:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1665;
	            localctx.GE = this.match(DartParser.T__41);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1666;
	            localctx.GT = this.match(DartParser.T__17);
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1667;
	            localctx.LE = this.match(DartParser.T__42);
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1668;
	            localctx.LT = this.match(DartParser.T__16);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseOrExpression() {
	    let localctx = new BitwiseOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, DartParser.RULE_bitwiseOrExpression);
	    try {
	        this.state = 1686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1671;
	            this.bitwiseXorExpression();
	            this.state = 1676;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1672;
	                    this.match(DartParser.T__43);
	                    this.state = 1673;
	                    this.bitwiseXorExpression(); 
	                }
	                this.state = 1678;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1679;
	            this.match(DartParser.SUPER);
	            this.state = 1682; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1680;
	            		this.match(DartParser.T__43);
	            		this.state = 1681;
	            		this.bitwiseXorExpression();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1684; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,151, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseXorExpression() {
	    let localctx = new BitwiseXorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, DartParser.RULE_bitwiseXorExpression);
	    try {
	        this.state = 1703;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1688;
	            this.bitwiseAndExpression();
	            this.state = 1693;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,153,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1689;
	                    this.match(DartParser.T__44);
	                    this.state = 1690;
	                    this.bitwiseAndExpression(); 
	                }
	                this.state = 1695;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,153,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1696;
	            this.match(DartParser.SUPER);
	            this.state = 1699; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1697;
	            		this.match(DartParser.T__44);
	            		this.state = 1698;
	            		this.bitwiseAndExpression();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1701; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,154, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseAndExpression() {
	    let localctx = new BitwiseAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, DartParser.RULE_bitwiseAndExpression);
	    try {
	        this.state = 1720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1705;
	            this.shiftExpression();
	            this.state = 1710;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,156,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1706;
	                    this.match(DartParser.T__45);
	                    this.state = 1707;
	                    this.shiftExpression(); 
	                }
	                this.state = 1712;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,156,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1713;
	            this.match(DartParser.SUPER);
	            this.state = 1716; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1714;
	            		this.match(DartParser.T__45);
	            		this.state = 1715;
	            		this.shiftExpression();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1718; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,157, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwiseOperator() {
	    let localctx = new BitwiseOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, DartParser.RULE_bitwiseOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1722;
	        _la = this._input.LA(1);
	        if(!(((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftExpression() {
	    let localctx = new ShiftExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, DartParser.RULE_shiftExpression);
	    try {
	        this.state = 1741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1724;
	            this.additiveExpression();
	            this.state = 1730;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1725;
	                    this.shiftOperator();
	                    this.state = 1726;
	                    this.additiveExpression(); 
	                }
	                this.state = 1732;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1733;
	            this.match(DartParser.SUPER);
	            this.state = 1737; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1734;
	            		this.shiftOperator();
	            		this.state = 1735;
	            		this.additiveExpression();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1739; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,160, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shiftOperator() {
	    let localctx = new ShiftOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, DartParser.RULE_shiftOperator);
	    try {
	        this.state = 1749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1743;
	            this.match(DartParser.T__46);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1744;
	            this.match(DartParser.T__17);
	            this.state = 1745;
	            this.match(DartParser.T__17);
	            this.state = 1746;
	            this.match(DartParser.T__17);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1747;
	            this.match(DartParser.T__17);
	            this.state = 1748;
	            this.match(DartParser.T__17);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, DartParser.RULE_additiveExpression);
	    try {
	        this.state = 1768;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1751;
	            this.multiplicativeExpression();
	            this.state = 1757;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,163,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1752;
	                    this.additiveOperator();
	                    this.state = 1753;
	                    this.multiplicativeExpression(); 
	                }
	                this.state = 1759;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,163,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1760;
	            this.match(DartParser.SUPER);
	            this.state = 1764; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1761;
	            		this.additiveOperator();
	            		this.state = 1762;
	            		this.multiplicativeExpression();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1766; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,164, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveOperator() {
	    let localctx = new AdditiveOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, DartParser.RULE_additiveOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1770;
	        _la = this._input.LA(1);
	        if(!(_la===48 || _la===49)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, DartParser.RULE_multiplicativeExpression);
	    try {
	        this.state = 1789;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1772;
	            this.unaryExpression();
	            this.state = 1778;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1773;
	                    this.multiplicativeOperator();
	                    this.state = 1774;
	                    this.unaryExpression(); 
	                }
	                this.state = 1780;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1781;
	            this.match(DartParser.SUPER);
	            this.state = 1785; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1782;
	            		this.multiplicativeOperator();
	            		this.state = 1783;
	            		this.unaryExpression();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1787; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,167, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeOperator() {
	    let localctx = new MultiplicativeOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, DartParser.RULE_multiplicativeOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1791;
	        _la = this._input.LA(1);
	        if(!(_la===5 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, DartParser.RULE_unaryExpression);
	    try {
	        this.state = 1807;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1793;
	            this.prefixOperator();
	            this.state = 1794;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1796;
	            this.awaitExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1797;
	            this.postfixExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1800;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 49:
	                this.state = 1798;
	                this.minusOperator();
	                break;
	            case 15:
	                this.state = 1799;
	                this.tildeOperator();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1802;
	            this.match(DartParser.SUPER);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1804;
	            this.incrementOperator();
	            this.state = 1805;
	            this.assignableExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixOperator() {
	    let localctx = new PrefixOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, DartParser.RULE_prefixOperator);
	    try {
	        this.state = 1812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 49:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1809;
	            this.minusOperator();
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1810;
	            this.negationOperator();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1811;
	            this.tildeOperator();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minusOperator() {
	    let localctx = new MinusOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, DartParser.RULE_minusOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1814;
	        this.match(DartParser.T__48);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	negationOperator() {
	    let localctx = new NegationOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, DartParser.RULE_negationOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.match(DartParser.T__52);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tildeOperator() {
	    let localctx = new TildeOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, DartParser.RULE_tildeOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1818;
	        this.match(DartParser.T__14);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	awaitExpression() {
	    let localctx = new AwaitExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, DartParser.RULE_awaitExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1820;
	        this.match(DartParser.AWAIT);
	        this.state = 1821;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, DartParser.RULE_postfixExpression);
	    try {
	        this.state = 1833;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1823;
	            this.assignableExpression();
	            this.state = 1824;
	            this.postfixOperator();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1826;
	            this.primary();
	            this.state = 1830;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,172,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1827;
	                    this.selector(); 
	                }
	                this.state = 1832;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,172,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixOperator() {
	    let localctx = new PostfixOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, DartParser.RULE_postfixOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1835;
	        this.incrementOperator();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorInvocation() {
	    let localctx = new ConstructorInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, DartParser.RULE_constructorInvocation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1837;
	        this.typeName();
	        this.state = 1838;
	        this.typeArguments();
	        this.state = 1839;
	        this.match(DartParser.T__12);
	        this.state = 1840;
	        this.identifier();
	        this.state = 1841;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selector() {
	    let localctx = new SelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, DartParser.RULE_selector);
	    try {
	        this.state = 1846;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1843;
	            this.match(DartParser.T__52);
	            break;
	        case 10:
	        case 12:
	        case 13:
	        case 56:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1844;
	            this.assignableSelector();
	            break;
	        case 6:
	        case 17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1845;
	            this.argumentPart();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentPart() {
	    let localctx = new ArgumentPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, DartParser.RULE_argumentPart);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 1848;
	            this.typeArguments();
	        }

	        this.state = 1851;
	        this.arguments();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	incrementOperator() {
	    let localctx = new IncrementOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, DartParser.RULE_incrementOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1853;
	        _la = this._input.LA(1);
	        if(!(_la===54 || _la===55)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignableExpression() {
	    let localctx = new AssignableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, DartParser.RULE_assignableExpression);
	    try {
	        this.state = 1861;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1855;
	            this.match(DartParser.SUPER);
	            this.state = 1856;
	            this.unconditionalAssignableSelector();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1857;
	            this.primary();
	            this.state = 1858;
	            this.assignableSelectorPart();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1860;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignableSelectorPart() {
	    let localctx = new AssignableSelectorPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, DartParser.RULE_assignableSelectorPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1866;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,177,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1863;
	                this.selector(); 
	            }
	            this.state = 1868;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,177,this._ctx);
	        }

	        this.state = 1869;
	        this.assignableSelector();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unconditionalAssignableSelector() {
	    let localctx = new UnconditionalAssignableSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, DartParser.RULE_unconditionalAssignableSelector);
	    try {
	        this.state = 1877;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1871;
	            this.match(DartParser.T__9);
	            this.state = 1872;
	            this.expression();
	            this.state = 1873;
	            this.match(DartParser.T__10);
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1875;
	            this.match(DartParser.T__12);
	            this.state = 1876;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignableSelector() {
	    let localctx = new AssignableSelectorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, DartParser.RULE_assignableSelector);
	    try {
	        this.state = 1887;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 13:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1879;
	            this.unconditionalAssignableSelector();
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1880;
	            this.match(DartParser.T__55);
	            this.state = 1881;
	            this.identifier();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1882;
	            this.match(DartParser.T__11);
	            this.state = 1883;
	            this.match(DartParser.T__9);
	            this.state = 1884;
	            this.expression();
	            this.state = 1885;
	            this.match(DartParser.T__10);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierNotFUNCTION() {
	    let localctx = new IdentifierNotFUNCTIONContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, DartParser.RULE_identifierNotFUNCTION);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1889;
	        _la = this._input.LA(1);
	        if(!(((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2122317247) !== 0) || _la===125 || _la===195)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, DartParser.RULE_identifier);
	    try {
	        this.state = 1893;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 99:
	        case 100:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 125:
	        case 195:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1891;
	            this.identifierNotFUNCTION();
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1892;
	            this.match(DartParser.FUNCTION);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedName() {
	    let localctx = new QualifiedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, DartParser.RULE_qualifiedName);
	    try {
	        this.state = 1905;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1895;
	            this.typeIdentifier();
	            this.state = 1896;
	            this.match(DartParser.T__12);
	            this.state = 1897;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1899;
	            this.typeIdentifier();
	            this.state = 1900;
	            this.match(DartParser.T__12);
	            this.state = 1901;
	            this.typeIdentifier();
	            this.state = 1902;
	            this.match(DartParser.T__12);
	            this.state = 1903;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeIdentifier() {
	    let localctx = new TypeIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, DartParser.RULE_typeIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1907;
	        _la = this._input.LA(1);
	        if(!(((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 1608515585) !== 0) || _la===195)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeTest() {
	    let localctx = new TypeTestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, DartParser.RULE_typeTest);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1909;
	        this.isOperator();
	        this.state = 1910;
	        this.typeNotVoid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isOperator() {
	    let localctx = new IsOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, DartParser.RULE_isOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1912;
	        this.match(DartParser.IS);
	        this.state = 1914;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===53) {
	            this.state = 1913;
	            this.match(DartParser.T__52);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeCast() {
	    let localctx = new TypeCastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, DartParser.RULE_typeCast);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1916;
	        this.asOperator();
	        this.state = 1917;
	        this.typeNotVoid();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	asOperator() {
	    let localctx = new AsOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, DartParser.RULE_asOperator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1919;
	        this.match(DartParser.AS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statements() {
	    let localctx = new StatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, DartParser.RULE_statements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1924;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,183,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1921;
	                this.statement(); 
	            }
	            this.state = 1926;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,183,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, DartParser.RULE_statement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1930;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1927;
	                this.label(); 
	            }
	            this.state = 1932;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	        }

	        this.state = 1933;
	        this.nonLabelledStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonLabelledStatement() {
	    let localctx = new NonLabelledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, DartParser.RULE_nonLabelledStatement);
	    try {
	        this.state = 1953;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1935;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1936;
	            this.localVariableDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1937;
	            this.forStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1938;
	            this.whileStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1939;
	            this.doStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1940;
	            this.switchStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1941;
	            this.ifStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1942;
	            this.rethrowStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1943;
	            this.tryStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1944;
	            this.breakStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1945;
	            this.continueStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1946;
	            this.returnStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1947;
	            this.localFunctionDeclaration();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1948;
	            this.assertStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1949;
	            this.yieldStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1950;
	            this.yieldEachStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1951;
	            this.navigationStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1952;
	            this.expressionStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	navigationStatement() {
	    let localctx = new NavigationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, DartParser.RULE_navigationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1955;
	        this.match(DartParser.NAVIGATOR);
	        this.state = 1956;
	        this.match(DartParser.T__12);
	        this.state = 1957;
	        this.match(DartParser.OF);
	        this.state = 1958;
	        this.match(DartParser.T__5);
	        this.state = 1959;
	        this.match(DartParser.CONTEXT);
	        this.state = 1960;
	        this.match(DartParser.T__6);
	        this.state = 1961;
	        this.match(DartParser.T__12);
	        this.state = 1962;
	        this.match(DartParser.PUSH);
	        this.state = 1963;
	        this.match(DartParser.T__5);
	        this.state = 1964;
	        this.materialPageRoute();
	        this.state = 1965;
	        this.match(DartParser.T__6);
	        this.state = 1966;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	materialPageRoute() {
	    let localctx = new MaterialPageRouteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, DartParser.RULE_materialPageRoute);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1968;
	        this.match(DartParser.MATERIAL_PAGEROUTE);
	        this.state = 1969;
	        this.match(DartParser.T__5);
	        this.state = 1970;
	        this.match(DartParser.BUILDER);
	        this.state = 1971;
	        this.match(DartParser.T__13);
	        this.state = 1972;
	        this.formalParameterPart();
	        this.state = 1973;
	        this.match(DartParser.T__2);
	        this.state = 1975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===20) {
	            this.state = 1974;
	            this.match(DartParser.T__19);
	        }

	        this.state = 1977;
	        this.className();
	        this.state = 1978;
	        this.match(DartParser.T__5);
	        this.state = 1983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===195) {
	            this.state = 1981;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 195:
	                this.state = 1979;
	                this.classMember();
	                break;
	            case 2:
	                this.state = 1980;
	                this.match(DartParser.T__1);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1986;
	        this.match(DartParser.T__6);
	        this.state = 1987;
	        this.match(DartParser.T__6);
	        this.state = 1989;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 1988;
	            this.match(DartParser.T__1);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	className() {
	    let localctx = new ClassNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, DartParser.RULE_className);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1991;
	        this.match(DartParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classMember() {
	    let localctx = new ClassMemberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, DartParser.RULE_classMember);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1993;
	        this.key();
	        this.state = 1994;
	        this.match(DartParser.T__13);
	        this.state = 1995;
	        this.value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key() {
	    let localctx = new KeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, DartParser.RULE_key);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1997;
	        this.match(DartParser.IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, DartParser.RULE_value);
	    try {
	        this.state = 2001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1999;
	            this.match(DartParser.IDENTIFIER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2000;
	            this.textController();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textController() {
	    let localctx = new TextControllerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, DartParser.RULE_textController);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2003;
	        this.controllerName();
	        this.state = 2004;
	        this.match(DartParser.T__56);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, DartParser.RULE_expressionStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2007;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 5407808) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1614839921) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	            this.state = 2006;
	            this.expression();
	        }

	        this.state = 2009;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, DartParser.RULE_localVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2011;
	        this.metadata();
	        this.state = 2012;
	        this.initializedVariableDeclaration();
	        this.state = 2013;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localFunctionDeclaration() {
	    let localctx = new LocalFunctionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, DartParser.RULE_localFunctionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2015;
	        this.metadata();
	        this.state = 2016;
	        this.functionSignature();
	        this.state = 2017;
	        this.functionBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, DartParser.RULE_ifStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2019;
	        this.match(DartParser.IF);
	        this.state = 2020;
	        this.match(DartParser.T__5);
	        this.state = 2021;
	        this.expression();
	        this.state = 2022;
	        this.match(DartParser.T__6);
	        this.state = 2023;
	        localctx.ifPart = this.block();
	        this.state = 2026;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===68) {
	            this.state = 2024;
	            this.match(DartParser.ELSE);
	            this.state = 2025;
	            localctx.elsePart = this.block();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, DartParser.RULE_forStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2029;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===115) {
	            this.state = 2028;
	            this.match(DartParser.AWAIT);
	        }

	        this.state = 2031;
	        this.match(DartParser.FOR);
	        this.state = 2032;
	        this.match(DartParser.T__5);
	        this.state = 2033;
	        this.forLoopParts();
	        this.state = 2034;
	        this.match(DartParser.T__6);
	        this.state = 2035;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forLoopParts() {
	    let localctx = new ForLoopPartsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, DartParser.RULE_forLoopParts);
	    var _la = 0;
	    try {
	        this.state = 2055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2037;
	            this.metadata();
	            this.state = 2038;
	            this.declaredIdentifier();
	            this.state = 2039;
	            this.match(DartParser.IN);
	            this.state = 2040;
	            this.expression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2042;
	            this.metadata();
	            this.state = 2043;
	            this.identifier();
	            this.state = 2044;
	            this.match(DartParser.IN);
	            this.state = 2045;
	            this.expression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2047;
	            this.forInitializerStatement();
	            this.state = 2049;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 5407808) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1614839921) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	                this.state = 2048;
	                this.expression();
	            }

	            this.state = 2051;
	            this.match(DartParser.T__3);
	            this.state = 2053;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 5407808) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1614839921) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	                this.state = 2052;
	                this.expressionList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInitializerStatement() {
	    let localctx = new ForInitializerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, DartParser.RULE_forInitializerStatement);
	    var _la = 0;
	    try {
	        this.state = 2062;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2057;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 5407808) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1614839921) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	                this.state = 2058;
	                this.expression();
	            }

	            this.state = 2061;
	            this.match(DartParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, DartParser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2064;
	        this.match(DartParser.WHILE);
	        this.state = 2065;
	        this.match(DartParser.T__5);
	        this.state = 2066;
	        this.expression();
	        this.state = 2067;
	        this.match(DartParser.T__6);
	        this.state = 2068;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, DartParser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2070;
	        this.match(DartParser.DO);
	        this.state = 2071;
	        this.statement();
	        this.state = 2072;
	        this.match(DartParser.WHILE);
	        this.state = 2073;
	        this.match(DartParser.T__5);
	        this.state = 2074;
	        this.expression();
	        this.state = 2075;
	        this.match(DartParser.T__6);
	        this.state = 2076;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, DartParser.RULE_switchStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2078;
	        this.match(DartParser.SWITCH);
	        this.state = 2079;
	        this.match(DartParser.T__5);
	        this.state = 2080;
	        this.expression();
	        this.state = 2081;
	        this.match(DartParser.T__6);
	        this.state = 2082;
	        this.match(DartParser.LBRACE);
	        this.state = 2086;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,199,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2083;
	                this.switchCase(); 
	            }
	            this.state = 2088;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,199,this._ctx);
	        }

	        this.state = 2090;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 66)) & ~0x1f) === 0 && ((1 << (_la - 66)) & 4227858433) !== 0) || ((((_la - 99)) & ~0x1f) === 0 && ((1 << (_la - 99)) & 83689471) !== 0) || _la===195) {
	            this.state = 2089;
	            this.defaultCase();
	        }

	        this.state = 2092;
	        this.match(DartParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchCase() {
	    let localctx = new SwitchCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, DartParser.RULE_switchCase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2097;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2122317759) !== 0) || _la===125 || _la===195) {
	            this.state = 2094;
	            this.label();
	            this.state = 2099;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2100;
	        this.match(DartParser.CASE);
	        this.state = 2101;
	        this.expression();
	        this.state = 2102;
	        this.match(DartParser.T__13);
	        this.state = 2103;
	        this.statements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultCase() {
	    let localctx = new DefaultCaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, DartParser.RULE_defaultCase);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2122317759) !== 0) || _la===125 || _la===195) {
	            this.state = 2105;
	            this.label();
	            this.state = 2110;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2111;
	        this.match(DartParser.DEFAULT);
	        this.state = 2112;
	        this.match(DartParser.T__13);
	        this.state = 2113;
	        this.statements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rethrowStatement() {
	    let localctx = new RethrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, DartParser.RULE_rethrowStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2115;
	        this.match(DartParser.RETHROW);
	        this.state = 2116;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, DartParser.RULE_tryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2118;
	        this.match(DartParser.TRY);
	        this.state = 2119;
	        this.block();
	        this.state = 2129;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	        case 120:
	            this.state = 2121; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 2120;
	            		this.onPart();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 2123; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,203, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 2126;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===73) {
	                this.state = 2125;
	                this.finallyPart();
	            }

	            break;
	        case 73:
	            this.state = 2128;
	            this.finallyPart();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onPart() {
	    let localctx = new OnPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, DartParser.RULE_onPart);
	    var _la = 0;
	    try {
	        this.state = 2141;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2131;
	            this.catchPart();
	            this.state = 2132;
	            this.block();
	            break;
	        case 120:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2134;
	            this.match(DartParser.ON);
	            this.state = 2135;
	            this.typeNotVoid();
	            this.state = 2137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===62) {
	                this.state = 2136;
	                this.catchPart();
	            }

	            this.state = 2139;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchPart() {
	    let localctx = new CatchPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, DartParser.RULE_catchPart);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2143;
	        this.match(DartParser.CATCH);
	        this.state = 2144;
	        this.match(DartParser.T__5);
	        this.state = 2145;
	        this.identifier();
	        this.state = 2148;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 2146;
	            this.match(DartParser.T__1);
	            this.state = 2147;
	            this.identifier();
	        }

	        this.state = 2150;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyPart() {
	    let localctx = new FinallyPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, DartParser.RULE_finallyPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2152;
	        this.match(DartParser.FINALLY);
	        this.state = 2153;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, DartParser.RULE_returnStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2155;
	        this.match(DartParser.RETURN);
	        this.state = 2157;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 5407808) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 1614839921) !== 0) || ((((_la - 82)) & ~0x1f) === 0 && ((1 << (_la - 82)) & 4294900765) !== 0) || ((((_la - 114)) & ~0x1f) === 0 && ((1 << (_la - 114)) & 268435451) !== 0) || ((((_la - 181)) & ~0x1f) === 0 && ((1 << (_la - 181)) & 18031) !== 0)) {
	            this.state = 2156;
	            this.expression();
	        }

	        this.state = 2159;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, DartParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2161;
	        this.identifier();
	        this.state = 2162;
	        this.match(DartParser.T__13);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, DartParser.RULE_breakStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2164;
	        this.match(DartParser.BREAK);
	        this.state = 2166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2122317759) !== 0) || _la===125 || _la===195) {
	            this.state = 2165;
	            this.identifier();
	        }

	        this.state = 2168;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, DartParser.RULE_continueStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2170;
	        this.match(DartParser.CONTINUE);
	        this.state = 2172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 92)) & ~0x1f) === 0 && ((1 << (_la - 92)) & 2122317759) !== 0) || _la===125 || _la===195) {
	            this.state = 2171;
	            this.identifier();
	        }

	        this.state = 2174;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, DartParser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2176;
	        this.match(DartParser.YIELD);
	        this.state = 2177;
	        this.expression();
	        this.state = 2178;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldEachStatement() {
	    let localctx = new YieldEachStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, DartParser.RULE_yieldEachStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2180;
	        this.match(DartParser.T__57);
	        this.state = 2181;
	        this.expression();
	        this.state = 2182;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertStatement() {
	    let localctx = new AssertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, DartParser.RULE_assertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2184;
	        this.assertion();
	        this.state = 2185;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertion() {
	    let localctx = new AssertionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, DartParser.RULE_assertion);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2187;
	        this.match(DartParser.ASSERT);
	        this.state = 2188;
	        this.match(DartParser.T__5);
	        this.state = 2189;
	        this.expression();
	        this.state = 2192;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	        if(la_===1) {
	            this.state = 2190;
	            this.match(DartParser.T__1);
	            this.state = 2191;
	            this.expression();

	        }
	        this.state = 2195;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 2194;
	            this.match(DartParser.T__1);
	        }

	        this.state = 2197;
	        this.match(DartParser.T__6);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topLevelDefinition() {
	    let localctx = new TopLevelDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, DartParser.RULE_topLevelDefinition);
	    var _la = 0;
	    try {
	        this.state = 2262;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,219,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2199;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2200;
	            this.mixinDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2201;
	            this.enumType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2202;
	            this.typeAlias();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2203;
	            this.match(DartParser.EXTERNAL);
	            this.state = 2204;
	            this.functionSignature();
	            this.state = 2205;
	            this.match(DartParser.T__3);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2207;
	            this.match(DartParser.EXTERNAL);
	            this.state = 2208;
	            this.getterSignature();
	            this.state = 2209;
	            this.match(DartParser.T__3);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2211;
	            this.match(DartParser.EXTERNAL);
	            this.state = 2212;
	            this.setterSignature();
	            this.state = 2213;
	            this.match(DartParser.T__3);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2215;
	            this.match(DartParser.EXTERNAL);
	            this.state = 2216;
	            this.finalVarOrType();
	            this.state = 2217;
	            this.identifierList();
	            this.state = 2218;
	            this.match(DartParser.T__3);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2220;
	            this.getterSignature();
	            this.state = 2221;
	            this.functionBody();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2223;
	            this.setterSignature();
	            this.state = 2224;
	            this.functionBody();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2226;
	            this.functionSignature();
	            this.state = 2227;
	            this.functionBody();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2229;
	            _la = this._input.LA(1);
	            if(!(_la===64 || _la===72)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 2231;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	            if(la_===1) {
	                this.state = 2230;
	                this.type();

	            }
	            this.state = 2233;
	            this.staticFinalDeclarationList();
	            this.state = 2234;
	            this.match(DartParser.T__3);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2236;
	            this.match(DartParser.LATE);
	            this.state = 2237;
	            this.match(DartParser.FINAL);
	            this.state = 2239;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	            if(la_===1) {
	                this.state = 2238;
	                this.type();

	            }
	            this.state = 2241;
	            this.initializedIdentifierList();
	            this.state = 2242;
	            this.match(DartParser.T__3);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===106) {
	                this.state = 2244;
	                this.match(DartParser.LATE);
	            }

	            this.state = 2247;
	            this.varOrType();
	            this.state = 2248;
	            this.identifier();
	            this.state = 2251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1) {
	                this.state = 2249;
	                this.match(DartParser.T__0);
	                this.state = 2250;
	                this.expression();
	            }

	            this.state = 2257;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===2) {
	                this.state = 2253;
	                this.match(DartParser.T__1);
	                this.state = 2254;
	                this.initializedIdentifier();
	                this.state = 2259;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2260;
	            this.match(DartParser.T__3);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, DartParser.RULE_identifierList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2264;
	        this.identifier();
	        this.state = 2269;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 2265;
	            this.match(DartParser.T__1);
	            this.state = 2266;
	            this.identifier();
	            this.state = 2271;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type() {
	    let localctx = new TypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, DartParser.RULE_type);
	    var _la = 0;
	    try {
	        this.state = 2277;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2272;
	            this.functionType();
	            this.state = 2274;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 2273;
	                this.match(DartParser.T__11);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2276;
	            this.typeNotFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNotVoid() {
	    let localctx = new TypeNotVoidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, DartParser.RULE_typeNotVoid);
	    try {
	        this.state = 2284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2279;
	            this.functionType();
	            this.state = 2281;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	            if(la_===1) {
	                this.state = 2280;
	                this.match(DartParser.T__11);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2283;
	            this.typeNotVoidNotFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNotFunction() {
	    let localctx = new TypeNotFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, DartParser.RULE_typeNotFunction);
	    try {
	        this.state = 2288;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 96:
	        case 101:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 126:
	        case 195:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2286;
	            this.typeNotVoidNotFunction();
	            break;
	        case 89:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2287;
	            this.match(DartParser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNotVoidNotFunction() {
	    let localctx = new TypeNotVoidNotFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, DartParser.RULE_typeNotVoidNotFunction);
	    try {
	        this.state = 2301;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 96:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 126:
	        case 195:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2290;
	            this.typeName();
	            this.state = 2292;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	            if(la_===1) {
	                this.state = 2291;
	                this.typeArguments();

	            }
	            this.state = 2295;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	            if(la_===1) {
	                this.state = 2294;
	                this.match(DartParser.T__11);

	            }
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2297;
	            this.match(DartParser.FUNCTION);
	            this.state = 2299;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	            if(la_===1) {
	                this.state = 2298;
	                this.match(DartParser.T__11);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, DartParser.RULE_typeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2303;
	        this.typeIdentifier();
	        this.state = 2306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        if(la_===1) {
	            this.state = 2304;
	            this.match(DartParser.T__12);
	            this.state = 2305;
	            this.typeIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, DartParser.RULE_typeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2308;
	        this.match(DartParser.T__16);
	        this.state = 2309;
	        this.typeList();
	        this.state = 2310;
	        this.match(DartParser.T__17);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeList() {
	    let localctx = new TypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, DartParser.RULE_typeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2312;
	        this.type();
	        this.state = 2317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 2313;
	            this.match(DartParser.T__1);
	            this.state = 2314;
	            this.type();
	            this.state = 2319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeNotVoidNotFunctionList() {
	    let localctx = new TypeNotVoidNotFunctionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, DartParser.RULE_typeNotVoidNotFunctionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2320;
	        this.typeNotVoidNotFunction();
	        this.state = 2325;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 2321;
	            this.match(DartParser.T__1);
	            this.state = 2322;
	            this.typeNotVoidNotFunction();
	            this.state = 2327;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeTail() {
	    let localctx = new FunctionTypeTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, DartParser.RULE_functionTypeTail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2328;
	        this.match(DartParser.FUNCTION);
	        this.state = 2330;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 2329;
	            this.typeParameters();
	        }

	        this.state = 2332;
	        this.parameterTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeTails() {
	    let localctx = new FunctionTypeTailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, DartParser.RULE_functionTypeTails);
	    var _la = 0;
	    try {
	        this.state = 2341;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2334;
	            this.functionTypeTail();
	            this.state = 2336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 2335;
	                this.match(DartParser.T__11);
	            }

	            this.state = 2338;
	            this.functionTypeTails();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2340;
	            this.functionTypeTail();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionType() {
	    let localctx = new FunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, DartParser.RULE_functionType);
	    try {
	        this.state = 2347;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2343;
	            this.functionTypeTails();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2344;
	            this.typeNotFunction();
	            this.state = 2345;
	            this.functionTypeTails();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterTypeList() {
	    let localctx = new ParameterTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, DartParser.RULE_parameterTypeList);
	    var _la = 0;
	    try {
	        this.state = 2368;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2349;
	            this.match(DartParser.T__5);
	            this.state = 2350;
	            this.match(DartParser.T__6);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2351;
	            this.match(DartParser.T__5);
	            this.state = 2352;
	            this.normalParameterTypes();
	            this.state = 2353;
	            this.match(DartParser.T__1);
	            this.state = 2354;
	            this.optionalParameterTypes();
	            this.state = 2355;
	            this.match(DartParser.T__6);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2357;
	            this.match(DartParser.T__5);
	            this.state = 2358;
	            this.normalParameterTypes();
	            this.state = 2360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===2) {
	                this.state = 2359;
	                this.match(DartParser.T__1);
	            }

	            this.state = 2362;
	            this.match(DartParser.T__6);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2364;
	            this.match(DartParser.T__5);
	            this.state = 2365;
	            this.optionalParameterTypes();
	            this.state = 2366;
	            this.match(DartParser.T__6);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalParameterTypes() {
	    let localctx = new NormalParameterTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, DartParser.RULE_normalParameterTypes);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2370;
	        this.normalParameterType();
	        this.state = 2375;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,239,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2371;
	                this.match(DartParser.T__1);
	                this.state = 2372;
	                this.normalParameterType(); 
	            }
	            this.state = 2377;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,239,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalParameterType() {
	    let localctx = new NormalParameterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, DartParser.RULE_normalParameterType);
	    try {
	        this.state = 2380;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2378;
	            this.typedIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2379;
	            this.type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalParameterTypes() {
	    let localctx = new OptionalParameterTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, DartParser.RULE_optionalParameterTypes);
	    try {
	        this.state = 2384;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2382;
	            this.optionalPositionalParameterTypes();
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2383;
	            this.namedParameterTypes();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalPositionalParameterTypes() {
	    let localctx = new OptionalPositionalParameterTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, DartParser.RULE_optionalPositionalParameterTypes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2386;
	        this.match(DartParser.T__9);
	        this.state = 2387;
	        this.normalParameterTypes();
	        this.state = 2389;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 2388;
	            this.match(DartParser.T__1);
	        }

	        this.state = 2391;
	        this.match(DartParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedParameterTypes() {
	    let localctx = new NamedParameterTypesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, DartParser.RULE_namedParameterTypes);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2393;
	        this.match(DartParser.LBRACE);
	        this.state = 2394;
	        this.namedParameterType();
	        this.state = 2399;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,243,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2395;
	                this.match(DartParser.T__1);
	                this.state = 2396;
	                this.namedParameterType(); 
	            }
	            this.state = 2401;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,243,this._ctx);
	        }

	        this.state = 2403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===2) {
	            this.state = 2402;
	            this.match(DartParser.T__1);
	        }

	        this.state = 2405;
	        this.match(DartParser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedParameterType() {
	    let localctx = new NamedParameterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, DartParser.RULE_namedParameterType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2408;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===111) {
	            this.state = 2407;
	            this.match(DartParser.REQUIRED);
	        }

	        this.state = 2410;
	        this.typedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedIdentifier() {
	    let localctx = new TypedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, DartParser.RULE_typedIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2412;
	        this.type();
	        this.state = 2413;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDesignation() {
	    let localctx = new ConstructorDesignationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, DartParser.RULE_constructorDesignation);
	    var _la = 0;
	    try {
	        this.state = 2423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2415;
	            this.typeIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2416;
	            this.qualifiedName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2417;
	            this.typeName();
	            this.state = 2418;
	            this.typeArguments();
	            this.state = 2421;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===13) {
	                this.state = 2419;
	                this.match(DartParser.T__12);
	                this.state = 2420;
	                this.identifier();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeAlias() {
	    let localctx = new TypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, DartParser.RULE_typeAlias);
	    var _la = 0;
	    try {
	        this.state = 2436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2425;
	            this.match(DartParser.TYPEDEF);
	            this.state = 2426;
	            this.typeIdentifier();
	            this.state = 2428;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 2427;
	                this.typeParameters();
	            }

	            this.state = 2430;
	            this.match(DartParser.T__0);
	            this.state = 2431;
	            this.functionType();
	            this.state = 2432;
	            this.match(DartParser.T__3);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2434;
	            this.match(DartParser.TYPEDEF);
	            this.state = 2435;
	            this.functionTypeAlias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionTypeAlias() {
	    let localctx = new FunctionTypeAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, DartParser.RULE_functionTypeAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2438;
	        this.functionPrefix();
	        this.state = 2439;
	        this.formalParameterPart();
	        this.state = 2440;
	        this.match(DartParser.T__3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionPrefix() {
	    let localctx = new FunctionPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, DartParser.RULE_functionPrefix);
	    try {
	        this.state = 2446;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2442;
	            this.type();
	            this.state = 2443;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2445;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleLineString() {
	    let localctx = new SingleLineStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, DartParser.RULE_singleLineString);
	    var _la = 0;
	    try {
	        this.state = 2473;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 183:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2448;
	            this.match(DartParser.RAW_SINGLE_LINE_STRING);
	            break;
	        case 186:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2449;
	            this.match(DartParser.SINGLE_LINE_STRING_SQ_BEGIN_END);
	            break;
	        case 187:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2450;
	            this.match(DartParser.SINGLE_LINE_STRING_SQ_BEGIN_MID);
	            this.state = 2451;
	            this.expression();
	            this.state = 2456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===188) {
	                this.state = 2452;
	                this.match(DartParser.SINGLE_LINE_STRING_SQ_MID_MID);
	                this.state = 2453;
	                this.expression();
	                this.state = 2458;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2459;
	            this.match(DartParser.SINGLE_LINE_STRING_SQ_MID_END);
	            break;
	        case 190:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2461;
	            this.match(DartParser.SINGLE_LINE_STRING_DQ_BEGIN_END);
	            break;
	        case 191:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2462;
	            this.match(DartParser.SINGLE_LINE_STRING_DQ_BEGIN_MID);
	            this.state = 2463;
	            this.expression();
	            this.state = 2468;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===192) {
	                this.state = 2464;
	                this.match(DartParser.SINGLE_LINE_STRING_DQ_MID_MID);
	                this.state = 2465;
	                this.expression();
	                this.state = 2470;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2471;
	            this.match(DartParser.SINGLE_LINE_STRING_DQ_MID_END);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

DartParser.EOF = antlr4.Token.EOF;
DartParser.T__0 = 1;
DartParser.T__1 = 2;
DartParser.T__2 = 3;
DartParser.T__3 = 4;
DartParser.T__4 = 5;
DartParser.T__5 = 6;
DartParser.T__6 = 7;
DartParser.T__7 = 8;
DartParser.T__8 = 9;
DartParser.T__9 = 10;
DartParser.T__10 = 11;
DartParser.T__11 = 12;
DartParser.T__12 = 13;
DartParser.T__13 = 14;
DartParser.T__14 = 15;
DartParser.T__15 = 16;
DartParser.T__16 = 17;
DartParser.T__17 = 18;
DartParser.T__18 = 19;
DartParser.T__19 = 20;
DartParser.T__20 = 21;
DartParser.T__21 = 22;
DartParser.T__22 = 23;
DartParser.T__23 = 24;
DartParser.T__24 = 25;
DartParser.T__25 = 26;
DartParser.T__26 = 27;
DartParser.T__27 = 28;
DartParser.T__28 = 29;
DartParser.T__29 = 30;
DartParser.T__30 = 31;
DartParser.T__31 = 32;
DartParser.T__32 = 33;
DartParser.T__33 = 34;
DartParser.T__34 = 35;
DartParser.T__35 = 36;
DartParser.T__36 = 37;
DartParser.T__37 = 38;
DartParser.T__38 = 39;
DartParser.T__39 = 40;
DartParser.T__40 = 41;
DartParser.T__41 = 42;
DartParser.T__42 = 43;
DartParser.T__43 = 44;
DartParser.T__44 = 45;
DartParser.T__45 = 46;
DartParser.T__46 = 47;
DartParser.T__47 = 48;
DartParser.T__48 = 49;
DartParser.T__49 = 50;
DartParser.T__50 = 51;
DartParser.T__51 = 52;
DartParser.T__52 = 53;
DartParser.T__53 = 54;
DartParser.T__54 = 55;
DartParser.T__55 = 56;
DartParser.T__56 = 57;
DartParser.T__57 = 58;
DartParser.ASSERT = 59;
DartParser.BREAK = 60;
DartParser.CASE = 61;
DartParser.CATCH = 62;
DartParser.CLASS = 63;
DartParser.CONST = 64;
DartParser.CONTINUE = 65;
DartParser.DEFAULT = 66;
DartParser.DO = 67;
DartParser.ELSE = 68;
DartParser.ENUM = 69;
DartParser.EXTENDS = 70;
DartParser.FALSE = 71;
DartParser.FINAL = 72;
DartParser.FINALLY = 73;
DartParser.FOR = 74;
DartParser.IF = 75;
DartParser.IN = 76;
DartParser.IS = 77;
DartParser.NEW = 78;
DartParser.NULL = 79;
DartParser.RETHROW = 80;
DartParser.RETURN = 81;
DartParser.SUPER = 82;
DartParser.SWITCH = 83;
DartParser.THIS = 84;
DartParser.THROW = 85;
DartParser.TRUE = 86;
DartParser.TRY = 87;
DartParser.VAR = 88;
DartParser.VOID = 89;
DartParser.WHILE = 90;
DartParser.WITH = 91;
DartParser.ABSTRACT = 92;
DartParser.AS = 93;
DartParser.COVARIANT = 94;
DartParser.DEFERRED = 95;
DartParser.DYNAMIC = 96;
DartParser.EXPORT = 97;
DartParser.EXTENSION = 98;
DartParser.EXTERNAL = 99;
DartParser.FACTORY = 100;
DartParser.FUNCTION = 101;
DartParser.GET = 102;
DartParser.IMPLEMENTS = 103;
DartParser.IMPORT = 104;
DartParser.INTERFACE = 105;
DartParser.LATE = 106;
DartParser.LIBRARY = 107;
DartParser.OPERATOR = 108;
DartParser.MIXIN = 109;
DartParser.PART = 110;
DartParser.REQUIRED = 111;
DartParser.SET = 112;
DartParser.STATIC = 113;
DartParser.TYPEDEF = 114;
DartParser.AWAIT = 115;
DartParser.YIELD = 116;
DartParser.ASYNC = 117;
DartParser.HIDE = 118;
DartParser.OF = 119;
DartParser.ON = 120;
DartParser.SHOW = 121;
DartParser.SYNC = 122;
DartParser.BUILD_CONTEXT = 123;
DartParser.WIDGET = 124;
DartParser.BUILD = 125;
DartParser.STATELESS = 126;
DartParser.SCAFFOLD = 127;
DartParser.TEXT_STYLE = 128;
DartParser.TEXT_FIELD = 129;
DartParser.ELEVATED_BUTTON = 130;
DartParser.TEXT = 131;
DartParser.CENTER = 132;
DartParser.COLUMN = 133;
DartParser.ROW = 134;
DartParser.SIZED_BOX = 135;
DartParser.APP_BAR_WIDGET = 136;
DartParser.CONTAINER = 137;
DartParser.INPUT_DECORATION_WIDGET = 138;
DartParser.BORDER_WIDGET = 139;
DartParser.BOX_DECORATION_WIDGET = 140;
DartParser.IMAGE_WIDGET = 141;
DartParser.NETWROK_IMAGE = 142;
DartParser.BODY = 143;
DartParser.TITLE = 144;
DartParser.CHILD = 145;
DartParser.FONTSIZE = 146;
DartParser.CONTROLLER = 147;
DartParser.HEIGHT = 148;
DartParser.WIDTH = 149;
DartParser.ON_PRESSED = 150;
DartParser.STYLE = 151;
DartParser.CHILDREN = 152;
DartParser.APP_BAR = 153;
DartParser.MARGIN = 154;
DartParser.EDGEINSETS = 155;
DartParser.EDGEINSETS_ALL = 156;
DartParser.MAIN_AXIS_ALIGNMENT = 157;
DartParser.MAIN_AXIS_ALIGNMENT_CENTER = 158;
DartParser.MAIN_AXIS_ALIGNMENT_BODY_ATT = 159;
DartParser.MAIN_AXIS_SIZE = 160;
DartParser.MAIN_AXIS_SIZE_MIN = 161;
DartParser.MAIN_AXIS_SIZE_BODY_ATT = 162;
DartParser.DECORATION_BODY_ATT = 163;
DartParser.HINT_TEXT = 164;
DartParser.BORDER = 165;
DartParser.OBSCURE_TEXT = 166;
DartParser.FONT_WEIGHT = 167;
DartParser.FONT_WEIGHT_BOLD = 168;
DartParser.FONT_WEIGHT_BODY_ATT = 169;
DartParser.PADDING = 170;
DartParser.BORDER_RADIUS_ATT = 171;
DartParser.BORDER_RADIUS = 172;
DartParser.BORDER_RADIUS_CIRCULAR = 173;
DartParser.COLOR = 174;
DartParser.COLORS = 175;
DartParser.NAVIGATOR = 176;
DartParser.CONTEXT = 177;
DartParser.PUSH = 178;
DartParser.MATERIAL_PAGEROUTE = 179;
DartParser.BUILDER = 180;
DartParser.NUMBER = 181;
DartParser.HEX_NUMBER = 182;
DartParser.RAW_SINGLE_LINE_STRING = 183;
DartParser.LBRACE = 184;
DartParser.RBRACE = 185;
DartParser.SINGLE_LINE_STRING_SQ_BEGIN_END = 186;
DartParser.SINGLE_LINE_STRING_SQ_BEGIN_MID = 187;
DartParser.SINGLE_LINE_STRING_SQ_MID_MID = 188;
DartParser.SINGLE_LINE_STRING_SQ_MID_END = 189;
DartParser.SINGLE_LINE_STRING_DQ_BEGIN_END = 190;
DartParser.SINGLE_LINE_STRING_DQ_BEGIN_MID = 191;
DartParser.SINGLE_LINE_STRING_DQ_MID_MID = 192;
DartParser.SINGLE_LINE_STRING_DQ_MID_END = 193;
DartParser.SCRIPT_TAG = 194;
DartParser.IDENTIFIER = 195;
DartParser.SINGLE_LINE_COMMENT = 196;
DartParser.MULTI_LINE_COMMENT = 197;
DartParser.WS = 198;
DartParser.OVERRIDE = 199;

DartParser.RULE_start = 0;
DartParser.RULE_declaredIdentifier = 1;
DartParser.RULE_finalConstVarOrType = 2;
DartParser.RULE_finalVarOrType = 3;
DartParser.RULE_varOrType = 4;
DartParser.RULE_initializedVariableDeclaration = 5;
DartParser.RULE_initializedIdentifier = 6;
DartParser.RULE_initializedIdentifierList = 7;
DartParser.RULE_functionSignature = 8;
DartParser.RULE_formalParameterPart = 9;
DartParser.RULE_functionBody = 10;
DartParser.RULE_block = 11;
DartParser.RULE_formalParameterList = 12;
DartParser.RULE_normalFormalParameters = 13;
DartParser.RULE_optionalOrNamedFormalParameters = 14;
DartParser.RULE_optionalPositionalFormalParameters = 15;
DartParser.RULE_namedFormalParameters = 16;
DartParser.RULE_normalFormalParameter = 17;
DartParser.RULE_functionFormalParameter = 18;
DartParser.RULE_simpleFormalParameter = 19;
DartParser.RULE_fieldFormalParameter = 20;
DartParser.RULE_defaultFormalParameter = 21;
DartParser.RULE_defaultNamedParameter = 22;
DartParser.RULE_typeWithParameters = 23;
DartParser.RULE_classDeclaration = 24;
DartParser.RULE_classMemberDefinition = 25;
DartParser.RULE_methodSignature = 26;
DartParser.RULE_declaration = 27;
DartParser.RULE_staticFinalDeclarationList = 28;
DartParser.RULE_staticFinalDeclaration = 29;
DartParser.RULE_operatorSignature = 30;
DartParser.RULE_operator = 31;
DartParser.RULE_binaryOperator = 32;
DartParser.RULE_getterSignature = 33;
DartParser.RULE_setterSignature = 34;
DartParser.RULE_constructorSignature = 35;
DartParser.RULE_constructorName = 36;
DartParser.RULE_redirection = 37;
DartParser.RULE_initializers = 38;
DartParser.RULE_initializerListEntry = 39;
DartParser.RULE_fieldInitializer = 40;
DartParser.RULE_initializerExpression = 41;
DartParser.RULE_factoryConstructorSignature = 42;
DartParser.RULE_redirectingFactoryConstructorSignature = 43;
DartParser.RULE_constantConstructorSignature = 44;
DartParser.RULE_superclass = 45;
DartParser.RULE_mixins = 46;
DartParser.RULE_interfaces = 47;
DartParser.RULE_mixinApplicationClass = 48;
DartParser.RULE_mixinApplication = 49;
DartParser.RULE_mixinDeclaration = 50;
DartParser.RULE_enumType = 51;
DartParser.RULE_typeParameter = 52;
DartParser.RULE_typeParameters = 53;
DartParser.RULE_enumEntry = 54;
DartParser.RULE_metadata = 55;
DartParser.RULE_metadatum = 56;
DartParser.RULE_expression = 57;
DartParser.RULE_widget = 58;
DartParser.RULE_textWidget = 59;
DartParser.RULE_textStyleWidget = 60;
DartParser.RULE_centerWidget = 61;
DartParser.RULE_columnWidget = 62;
DartParser.RULE_rowWidget = 63;
DartParser.RULE_sizedBoxWidget = 64;
DartParser.RULE_scaffoldWidget = 65;
DartParser.RULE_appBarWidget = 66;
DartParser.RULE_textFieldWidget = 67;
DartParser.RULE_elevatedButtonWidget = 68;
DartParser.RULE_containerWidget = 69;
DartParser.RULE_inputDecorationWidget = 70;
DartParser.RULE_borderWidget = 71;
DartParser.RULE_boxDecorationWidget = 72;
DartParser.RULE_imageWidget = 73;
DartParser.RULE_imageUrl = 74;
DartParser.RULE_widgetBody = 75;
DartParser.RULE_widgetBodyProps = 76;
DartParser.RULE_padding = 77;
DartParser.RULE_borderRadius = 78;
DartParser.RULE_circularBorderRadius = 79;
DartParser.RULE_circularBorderRadiusValue = 80;
DartParser.RULE_colors = 81;
DartParser.RULE_colorName = 82;
DartParser.RULE_height = 83;
DartParser.RULE_width = 84;
DartParser.RULE_obscureText = 85;
DartParser.RULE_hintText = 86;
DartParser.RULE_fontSize = 87;
DartParser.RULE_fontWeight = 88;
DartParser.RULE_fontWeightBold = 89;
DartParser.RULE_mainAxisAlignment = 90;
DartParser.RULE_mainAxisSize = 91;
DartParser.RULE_mainAxisSizeMin = 92;
DartParser.RULE_mainAxisAlignmentCenter = 93;
DartParser.RULE_edgeInsets = 94;
DartParser.RULE_edgeInsetsNumber = 95;
DartParser.RULE_variable = 96;
DartParser.RULE_controllerName = 97;
DartParser.RULE_expressionWithoutCascade = 98;
DartParser.RULE_expressionList = 99;
DartParser.RULE_primary = 100;
DartParser.RULE_literal = 101;
DartParser.RULE_nullLiteral = 102;
DartParser.RULE_numericLiteral = 103;
DartParser.RULE_booleanLiteral = 104;
DartParser.RULE_stringLiteral = 105;
DartParser.RULE_symbolLiteral = 106;
DartParser.RULE_listLiteral = 107;
DartParser.RULE_setOrMapLiteral = 108;
DartParser.RULE_elements = 109;
DartParser.RULE_element = 110;
DartParser.RULE_expressionElement = 111;
DartParser.RULE_mapElement = 112;
DartParser.RULE_spreadElement = 113;
DartParser.RULE_ifElement = 114;
DartParser.RULE_forElement = 115;
DartParser.RULE_throwExpression = 116;
DartParser.RULE_throwExpressionWithoutCascade = 117;
DartParser.RULE_functionExpression = 118;
DartParser.RULE_functionExpressionBody = 119;
DartParser.RULE_functionExpressionWithoutCascade = 120;
DartParser.RULE_functionExpressionWithoutCascadeBody = 121;
DartParser.RULE_functionPrimary = 122;
DartParser.RULE_functionPrimaryBody = 123;
DartParser.RULE_thisExpression = 124;
DartParser.RULE_newExpression = 125;
DartParser.RULE_constObjectExpression = 126;
DartParser.RULE_arguments = 127;
DartParser.RULE_argumentList = 128;
DartParser.RULE_namedArgument = 129;
DartParser.RULE_cascade = 130;
DartParser.RULE_cascadeSection = 131;
DartParser.RULE_cascadeSelector = 132;
DartParser.RULE_cascadeSectionTail = 133;
DartParser.RULE_cascadeAssignment = 134;
DartParser.RULE_assignmentOperator = 135;
DartParser.RULE_compoundAssignmentOperator = 136;
DartParser.RULE_conditionalExpression = 137;
DartParser.RULE_ifNullExpression = 138;
DartParser.RULE_logicalOrExpression = 139;
DartParser.RULE_logicalAndExpression = 140;
DartParser.RULE_equalityExpression = 141;
DartParser.RULE_equalityOperator = 142;
DartParser.RULE_relationalExpression = 143;
DartParser.RULE_relationalOperator = 144;
DartParser.RULE_bitwiseOrExpression = 145;
DartParser.RULE_bitwiseXorExpression = 146;
DartParser.RULE_bitwiseAndExpression = 147;
DartParser.RULE_bitwiseOperator = 148;
DartParser.RULE_shiftExpression = 149;
DartParser.RULE_shiftOperator = 150;
DartParser.RULE_additiveExpression = 151;
DartParser.RULE_additiveOperator = 152;
DartParser.RULE_multiplicativeExpression = 153;
DartParser.RULE_multiplicativeOperator = 154;
DartParser.RULE_unaryExpression = 155;
DartParser.RULE_prefixOperator = 156;
DartParser.RULE_minusOperator = 157;
DartParser.RULE_negationOperator = 158;
DartParser.RULE_tildeOperator = 159;
DartParser.RULE_awaitExpression = 160;
DartParser.RULE_postfixExpression = 161;
DartParser.RULE_postfixOperator = 162;
DartParser.RULE_constructorInvocation = 163;
DartParser.RULE_selector = 164;
DartParser.RULE_argumentPart = 165;
DartParser.RULE_incrementOperator = 166;
DartParser.RULE_assignableExpression = 167;
DartParser.RULE_assignableSelectorPart = 168;
DartParser.RULE_unconditionalAssignableSelector = 169;
DartParser.RULE_assignableSelector = 170;
DartParser.RULE_identifierNotFUNCTION = 171;
DartParser.RULE_identifier = 172;
DartParser.RULE_qualifiedName = 173;
DartParser.RULE_typeIdentifier = 174;
DartParser.RULE_typeTest = 175;
DartParser.RULE_isOperator = 176;
DartParser.RULE_typeCast = 177;
DartParser.RULE_asOperator = 178;
DartParser.RULE_statements = 179;
DartParser.RULE_statement = 180;
DartParser.RULE_nonLabelledStatement = 181;
DartParser.RULE_navigationStatement = 182;
DartParser.RULE_materialPageRoute = 183;
DartParser.RULE_className = 184;
DartParser.RULE_classMember = 185;
DartParser.RULE_key = 186;
DartParser.RULE_value = 187;
DartParser.RULE_textController = 188;
DartParser.RULE_expressionStatement = 189;
DartParser.RULE_localVariableDeclaration = 190;
DartParser.RULE_localFunctionDeclaration = 191;
DartParser.RULE_ifStatement = 192;
DartParser.RULE_forStatement = 193;
DartParser.RULE_forLoopParts = 194;
DartParser.RULE_forInitializerStatement = 195;
DartParser.RULE_whileStatement = 196;
DartParser.RULE_doStatement = 197;
DartParser.RULE_switchStatement = 198;
DartParser.RULE_switchCase = 199;
DartParser.RULE_defaultCase = 200;
DartParser.RULE_rethrowStatement = 201;
DartParser.RULE_tryStatement = 202;
DartParser.RULE_onPart = 203;
DartParser.RULE_catchPart = 204;
DartParser.RULE_finallyPart = 205;
DartParser.RULE_returnStatement = 206;
DartParser.RULE_label = 207;
DartParser.RULE_breakStatement = 208;
DartParser.RULE_continueStatement = 209;
DartParser.RULE_yieldStatement = 210;
DartParser.RULE_yieldEachStatement = 211;
DartParser.RULE_assertStatement = 212;
DartParser.RULE_assertion = 213;
DartParser.RULE_topLevelDefinition = 214;
DartParser.RULE_identifierList = 215;
DartParser.RULE_type = 216;
DartParser.RULE_typeNotVoid = 217;
DartParser.RULE_typeNotFunction = 218;
DartParser.RULE_typeNotVoidNotFunction = 219;
DartParser.RULE_typeName = 220;
DartParser.RULE_typeArguments = 221;
DartParser.RULE_typeList = 222;
DartParser.RULE_typeNotVoidNotFunctionList = 223;
DartParser.RULE_functionTypeTail = 224;
DartParser.RULE_functionTypeTails = 225;
DartParser.RULE_functionType = 226;
DartParser.RULE_parameterTypeList = 227;
DartParser.RULE_normalParameterTypes = 228;
DartParser.RULE_normalParameterType = 229;
DartParser.RULE_optionalParameterTypes = 230;
DartParser.RULE_optionalPositionalParameterTypes = 231;
DartParser.RULE_namedParameterTypes = 232;
DartParser.RULE_namedParameterType = 233;
DartParser.RULE_typedIdentifier = 234;
DartParser.RULE_constructorDesignation = 235;
DartParser.RULE_typeAlias = 236;
DartParser.RULE_functionTypeAlias = 237;
DartParser.RULE_functionPrefix = 238;
DartParser.RULE_singleLineString = 239;

class StartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_start;
    }

	EOF() {
	    return this.getToken(DartParser.EOF, 0);
	};

	topLevelDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopLevelDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(TopLevelDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitStart(this);
		}
	}


}



class DeclaredIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_declaredIdentifier;
    }

	finalConstVarOrType() {
	    return this.getTypedRuleContext(FinalConstVarOrTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COVARIANT() {
	    return this.getToken(DartParser.COVARIANT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterDeclaredIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitDeclaredIdentifier(this);
		}
	}


}



class FinalConstVarOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_finalConstVarOrType;
    }

	FINAL() {
	    return this.getToken(DartParser.FINAL, 0);
	};

	LATE() {
	    return this.getToken(DartParser.LATE, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	varOrType() {
	    return this.getTypedRuleContext(VarOrTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFinalConstVarOrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFinalConstVarOrType(this);
		}
	}


}



class FinalVarOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_finalVarOrType;
    }

	FINAL() {
	    return this.getToken(DartParser.FINAL, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	varOrType() {
	    return this.getTypedRuleContext(VarOrTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFinalVarOrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFinalVarOrType(this);
		}
	}


}



class VarOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_varOrType;
    }

	VAR() {
	    return this.getToken(DartParser.VAR, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterVarOrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitVarOrType(this);
		}
	}


}



class InitializedVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_initializedVariableDeclaration;
    }

	declaredIdentifier() {
	    return this.getTypedRuleContext(DeclaredIdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	initializedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(InitializedIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInitializedVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInitializedVariableDeclaration(this);
		}
	}


}



class InitializedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_initializedIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInitializedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInitializedIdentifier(this);
		}
	}


}



class InitializedIdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_initializedIdentifierList;
    }

	initializedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(InitializedIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInitializedIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInitializedIdentifierList(this);
		}
	}


}



class FunctionSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionSignature;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifierNotFUNCTION() {
	    return this.getTypedRuleContext(IdentifierNotFUNCTIONContext,0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionSignature(this);
		}
	}


}



class FormalParameterPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_formalParameterPart;
    }

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFormalParameterPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFormalParameterPart(this);
		}
	}


}



class FunctionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	ASYNC() {
	    return this.getToken(DartParser.ASYNC, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SYNC() {
	    return this.getToken(DartParser.SYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionBody(this);
		}
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBlock(this);
		}
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_formalParameterList;
    }

	normalFormalParameters() {
	    return this.getTypedRuleContext(NormalFormalParametersContext,0);
	};

	optionalOrNamedFormalParameters() {
	    return this.getTypedRuleContext(OptionalOrNamedFormalParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFormalParameterList(this);
		}
	}


}



class NormalFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_normalFormalParameters;
    }

	normalFormalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NormalFormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(NormalFormalParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNormalFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNormalFormalParameters(this);
		}
	}


}



class OptionalOrNamedFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_optionalOrNamedFormalParameters;
    }

	optionalPositionalFormalParameters() {
	    return this.getTypedRuleContext(OptionalPositionalFormalParametersContext,0);
	};

	CONTEXT() {
	    return this.getToken(DartParser.CONTEXT, 0);
	};

	namedFormalParameters() {
	    return this.getTypedRuleContext(NamedFormalParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterOptionalOrNamedFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitOptionalOrNamedFormalParameters(this);
		}
	}


}



class OptionalPositionalFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_optionalPositionalFormalParameters;
    }

	defaultFormalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultFormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(DefaultFormalParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterOptionalPositionalFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitOptionalPositionalFormalParameters(this);
		}
	}


}



class NamedFormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_namedFormalParameters;
    }

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	defaultNamedParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DefaultNamedParameterContext);
	    } else {
	        return this.getTypedRuleContext(DefaultNamedParameterContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNamedFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNamedFormalParameters(this);
		}
	}


}



class NormalFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_normalFormalParameter;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	functionFormalParameter() {
	    return this.getTypedRuleContext(FunctionFormalParameterContext,0);
	};

	fieldFormalParameter() {
	    return this.getTypedRuleContext(FieldFormalParameterContext,0);
	};

	simpleFormalParameter() {
	    return this.getTypedRuleContext(SimpleFormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNormalFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNormalFormalParameter(this);
		}
	}


}



class FunctionFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionFormalParameter;
    }

	identifierNotFUNCTION() {
	    return this.getTypedRuleContext(IdentifierNotFUNCTIONContext,0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	COVARIANT() {
	    return this.getToken(DartParser.COVARIANT, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionFormalParameter(this);
		}
	}


}



class SimpleFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_simpleFormalParameter;
    }

	declaredIdentifier() {
	    return this.getTypedRuleContext(DeclaredIdentifierContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COVARIANT() {
	    return this.getToken(DartParser.COVARIANT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSimpleFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSimpleFormalParameter(this);
		}
	}


}



class FieldFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_fieldFormalParameter;
    }

	THIS() {
	    return this.getToken(DartParser.THIS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	finalConstVarOrType() {
	    return this.getTypedRuleContext(FinalConstVarOrTypeContext,0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFieldFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFieldFormalParameter(this);
		}
	}


}



class DefaultFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_defaultFormalParameter;
    }

	normalFormalParameter() {
	    return this.getTypedRuleContext(NormalFormalParameterContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterDefaultFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitDefaultFormalParameter(this);
		}
	}


}



class DefaultNamedParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_defaultNamedParameter;
    }

	normalFormalParameter() {
	    return this.getTypedRuleContext(NormalFormalParameterContext,0);
	};

	REQUIRED() {
	    return this.getToken(DartParser.REQUIRED, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterDefaultNamedParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitDefaultNamedParameter(this);
		}
	}


}



class TypeWithParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeWithParameters;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeWithParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeWithParameters(this);
		}
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_classDeclaration;
    }

	metadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MetadataContext);
	    } else {
	        return this.getTypedRuleContext(MetadataContext,i);
	    }
	};

	CLASS() {
	    return this.getToken(DartParser.CLASS, 0);
	};

	typeWithParameters() {
	    return this.getTypedRuleContext(TypeWithParametersContext,0);
	};

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	ABSTRACT() {
	    return this.getToken(DartParser.ABSTRACT, 0);
	};

	superclass() {
	    return this.getTypedRuleContext(SuperclassContext,0);
	};

	mixins() {
	    return this.getTypedRuleContext(MixinsContext,0);
	};

	interfaces() {
	    return this.getTypedRuleContext(InterfacesContext,0);
	};

	classMemberDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassMemberDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ClassMemberDefinitionContext,i);
	    }
	};

	mixinApplicationClass() {
	    return this.getTypedRuleContext(MixinApplicationClassContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitClassDeclaration(this);
		}
	}


}



class ClassMemberDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_classMemberDefinition;
    }

	methodSignature() {
	    return this.getTypedRuleContext(MethodSignatureContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	declaration() {
	    return this.getTypedRuleContext(DeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterClassMemberDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitClassMemberDefinition(this);
		}
	}


}



class MethodSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_methodSignature;
    }

	constructorSignature() {
	    return this.getTypedRuleContext(ConstructorSignatureContext,0);
	};

	initializers() {
	    return this.getTypedRuleContext(InitializersContext,0);
	};

	factoryConstructorSignature() {
	    return this.getTypedRuleContext(FactoryConstructorSignatureContext,0);
	};

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	STATIC() {
	    return this.getToken(DartParser.STATIC, 0);
	};

	getterSignature() {
	    return this.getTypedRuleContext(GetterSignatureContext,0);
	};

	setterSignature() {
	    return this.getTypedRuleContext(SetterSignatureContext,0);
	};

	operatorSignature() {
	    return this.getTypedRuleContext(OperatorSignatureContext,0);
	};

	OVERRIDE() {
	    return this.getToken(DartParser.OVERRIDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMethodSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMethodSignature(this);
		}
	}


}



class DeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_declaration;
    }

	EXTERNAL() {
	    return this.getToken(DartParser.EXTERNAL, 0);
	};

	factoryConstructorSignature() {
	    return this.getTypedRuleContext(FactoryConstructorSignatureContext,0);
	};

	constantConstructorSignature() {
	    return this.getTypedRuleContext(ConstantConstructorSignatureContext,0);
	};

	constructorSignature() {
	    return this.getTypedRuleContext(ConstructorSignatureContext,0);
	};

	getterSignature() {
	    return this.getTypedRuleContext(GetterSignatureContext,0);
	};

	STATIC() {
	    return this.getToken(DartParser.STATIC, 0);
	};

	setterSignature() {
	    return this.getTypedRuleContext(SetterSignatureContext,0);
	};

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	finalVarOrType() {
	    return this.getTypedRuleContext(FinalVarOrTypeContext,0);
	};

	COVARIANT() {
	    return this.getToken(DartParser.COVARIANT, 0);
	};

	varOrType() {
	    return this.getTypedRuleContext(VarOrTypeContext,0);
	};

	ABSTRACT() {
	    return this.getToken(DartParser.ABSTRACT, 0);
	};

	operatorSignature() {
	    return this.getTypedRuleContext(OperatorSignatureContext,0);
	};

	staticFinalDeclarationList() {
	    return this.getTypedRuleContext(StaticFinalDeclarationListContext,0);
	};

	FINAL() {
	    return this.getToken(DartParser.FINAL, 0);
	};

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	LATE() {
	    return this.getToken(DartParser.LATE, 0);
	};

	initializedIdentifierList() {
	    return this.getTypedRuleContext(InitializedIdentifierListContext,0);
	};

	redirectingFactoryConstructorSignature() {
	    return this.getTypedRuleContext(RedirectingFactoryConstructorSignatureContext,0);
	};

	redirection() {
	    return this.getTypedRuleContext(RedirectionContext,0);
	};

	initializers() {
	    return this.getTypedRuleContext(InitializersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitDeclaration(this);
		}
	}


}



class StaticFinalDeclarationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_staticFinalDeclarationList;
    }

	staticFinalDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StaticFinalDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(StaticFinalDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterStaticFinalDeclarationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitStaticFinalDeclarationList(this);
		}
	}


}



class StaticFinalDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_staticFinalDeclaration;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterStaticFinalDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitStaticFinalDeclaration(this);
		}
	}


}



class OperatorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_operatorSignature;
    }

	OPERATOR() {
	    return this.getToken(DartParser.OPERATOR, 0);
	};

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterOperatorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitOperatorSignature(this);
		}
	}


}



class OperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_operator;
    }

	binaryOperator() {
	    return this.getTypedRuleContext(BinaryOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitOperator(this);
		}
	}


}



class BinaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_binaryOperator;
    }

	multiplicativeOperator() {
	    return this.getTypedRuleContext(MultiplicativeOperatorContext,0);
	};

	additiveOperator() {
	    return this.getTypedRuleContext(AdditiveOperatorContext,0);
	};

	shiftOperator() {
	    return this.getTypedRuleContext(ShiftOperatorContext,0);
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	bitwiseOperator() {
	    return this.getTypedRuleContext(BitwiseOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBinaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBinaryOperator(this);
		}
	}


}



class GetterSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_getterSignature;
    }

	GET() {
	    return this.getToken(DartParser.GET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterGetterSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitGetterSignature(this);
		}
	}


}



class SetterSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_setterSignature;
    }

	SET() {
	    return this.getToken(DartParser.SET, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSetterSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSetterSignature(this);
		}
	}


}



class ConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_constructorSignature;
    }

	constructorName() {
	    return this.getTypedRuleContext(ConstructorNameContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitConstructorSignature(this);
		}
	}


}



class ConstructorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_constructorName;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterConstructorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitConstructorName(this);
		}
	}


}



class RedirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_redirection;
    }

	THIS() {
	    return this.getToken(DartParser.THIS, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterRedirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitRedirection(this);
		}
	}


}



class InitializersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_initializers;
    }

	initializerListEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializerListEntryContext);
	    } else {
	        return this.getTypedRuleContext(InitializerListEntryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInitializers(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInitializers(this);
		}
	}


}



class InitializerListEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_initializerListEntry;
    }

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fieldInitializer() {
	    return this.getTypedRuleContext(FieldInitializerContext,0);
	};

	assertion() {
	    return this.getTypedRuleContext(AssertionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInitializerListEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInitializerListEntry(this);
		}
	}


}



class FieldInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_fieldInitializer;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	initializerExpression() {
	    return this.getTypedRuleContext(InitializerExpressionContext,0);
	};

	THIS() {
	    return this.getToken(DartParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFieldInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFieldInitializer(this);
		}
	}


}



class InitializerExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_initializerExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	cascade() {
	    return this.getTypedRuleContext(CascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInitializerExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInitializerExpression(this);
		}
	}


}



class FactoryConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_factoryConstructorSignature;
    }

	FACTORY() {
	    return this.getToken(DartParser.FACTORY, 0);
	};

	constructorName() {
	    return this.getTypedRuleContext(ConstructorNameContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFactoryConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFactoryConstructorSignature(this);
		}
	}


}



class RedirectingFactoryConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_redirectingFactoryConstructorSignature;
    }

	FACTORY() {
	    return this.getToken(DartParser.FACTORY, 0);
	};

	constructorName() {
	    return this.getTypedRuleContext(ConstructorNameContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	constructorDesignation() {
	    return this.getTypedRuleContext(ConstructorDesignationContext,0);
	};

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterRedirectingFactoryConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitRedirectingFactoryConstructorSignature(this);
		}
	}


}



class ConstantConstructorSignatureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_constantConstructorSignature;
    }

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	constructorName() {
	    return this.getTypedRuleContext(ConstructorNameContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterConstantConstructorSignature(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitConstantConstructorSignature(this);
		}
	}


}



class SuperclassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_superclass;
    }

	EXTENDS() {
	    return this.getToken(DartParser.EXTENDS, 0);
	};

	typeNotVoidNotFunction() {
	    return this.getTypedRuleContext(TypeNotVoidNotFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSuperclass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSuperclass(this);
		}
	}


}



class MixinsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mixins;
    }

	WITH() {
	    return this.getToken(DartParser.WITH, 0);
	};

	typeNotVoidNotFunctionList() {
	    return this.getTypedRuleContext(TypeNotVoidNotFunctionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMixins(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMixins(this);
		}
	}


}



class InterfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_interfaces;
    }

	IMPLEMENTS() {
	    return this.getToken(DartParser.IMPLEMENTS, 0);
	};

	typeNotVoidNotFunctionList() {
	    return this.getTypedRuleContext(TypeNotVoidNotFunctionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInterfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInterfaces(this);
		}
	}


}



class MixinApplicationClassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mixinApplicationClass;
    }

	typeWithParameters() {
	    return this.getTypedRuleContext(TypeWithParametersContext,0);
	};

	mixinApplication() {
	    return this.getTypedRuleContext(MixinApplicationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMixinApplicationClass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMixinApplicationClass(this);
		}
	}


}



class MixinApplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mixinApplication;
    }

	typeNotVoidNotFunction() {
	    return this.getTypedRuleContext(TypeNotVoidNotFunctionContext,0);
	};

	mixins() {
	    return this.getTypedRuleContext(MixinsContext,0);
	};

	interfaces() {
	    return this.getTypedRuleContext(InterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMixinApplication(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMixinApplication(this);
		}
	}


}



class MixinDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mixinDeclaration;
    }

	MIXIN() {
	    return this.getToken(DartParser.MIXIN, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	ON() {
	    return this.getToken(DartParser.ON, 0);
	};

	typeNotVoidNotFunctionList() {
	    return this.getTypedRuleContext(TypeNotVoidNotFunctionListContext,0);
	};

	interfaces() {
	    return this.getTypedRuleContext(InterfacesContext,0);
	};

	metadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MetadataContext);
	    } else {
	        return this.getTypedRuleContext(MetadataContext,i);
	    }
	};

	classMemberDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassMemberDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ClassMemberDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMixinDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMixinDeclaration(this);
		}
	}


}



class EnumTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_enumType;
    }

	ENUM() {
	    return this.getToken(DartParser.ENUM, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	enumEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumEntryContext);
	    } else {
	        return this.getTypedRuleContext(EnumEntryContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterEnumType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitEnumType(this);
		}
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeParameter;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	EXTENDS() {
	    return this.getToken(DartParser.EXTENDS, 0);
	};

	typeNotVoid() {
	    return this.getTypedRuleContext(TypeNotVoidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeParameter(this);
		}
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeParameters;
    }

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeParameters(this);
		}
	}


}



class EnumEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_enumEntry;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterEnumEntry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitEnumEntry(this);
		}
	}


}



class MetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_metadata;
    }

	metadatum = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MetadatumContext);
	    } else {
	        return this.getTypedRuleContext(MetadatumContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMetadata(this);
		}
	}


}



class MetadatumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_metadatum;
    }

	constructorDesignation() {
	    return this.getTypedRuleContext(ConstructorDesignationContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMetadatum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMetadatum(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_expression;
    }

	functionExpression() {
	    return this.getTypedRuleContext(FunctionExpressionContext,0);
	};

	throwExpression() {
	    return this.getTypedRuleContext(ThrowExpressionContext,0);
	};

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	widget() {
	    return this.getTypedRuleContext(WidgetContext,0);
	};

	cascade() {
	    return this.getTypedRuleContext(CascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitExpression(this);
		}
	}


}



class WidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_widget;
    }

	widget() {
	    return this.getTypedRuleContext(WidgetContext,0);
	};

	textWidget() {
	    return this.getTypedRuleContext(TextWidgetContext,0);
	};

	centerWidget() {
	    return this.getTypedRuleContext(CenterWidgetContext,0);
	};

	scaffoldWidget() {
	    return this.getTypedRuleContext(ScaffoldWidgetContext,0);
	};

	appBarWidget() {
	    return this.getTypedRuleContext(AppBarWidgetContext,0);
	};

	textStyleWidget() {
	    return this.getTypedRuleContext(TextStyleWidgetContext,0);
	};

	sizedBoxWidget() {
	    return this.getTypedRuleContext(SizedBoxWidgetContext,0);
	};

	columnWidget() {
	    return this.getTypedRuleContext(ColumnWidgetContext,0);
	};

	textFieldWidget() {
	    return this.getTypedRuleContext(TextFieldWidgetContext,0);
	};

	elevatedButtonWidget() {
	    return this.getTypedRuleContext(ElevatedButtonWidgetContext,0);
	};

	containerWidget() {
	    return this.getTypedRuleContext(ContainerWidgetContext,0);
	};

	inputDecorationWidget() {
	    return this.getTypedRuleContext(InputDecorationWidgetContext,0);
	};

	borderWidget() {
	    return this.getTypedRuleContext(BorderWidgetContext,0);
	};

	imageWidget() {
	    return this.getTypedRuleContext(ImageWidgetContext,0);
	};

	rowWidget() {
	    return this.getTypedRuleContext(RowWidgetContext,0);
	};

	boxDecorationWidget() {
	    return this.getTypedRuleContext(BoxDecorationWidgetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitWidget(this);
		}
	}


}



class TextWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_textWidget;
    }

	TEXT() {
	    return this.getToken(DartParser.TEXT, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTextWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTextWidget(this);
		}
	}


}



class TextStyleWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_textStyleWidget;
    }

	TEXT_STYLE() {
	    return this.getToken(DartParser.TEXT_STYLE, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTextStyleWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTextStyleWidget(this);
		}
	}


}



class CenterWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_centerWidget;
    }

	CENTER() {
	    return this.getToken(DartParser.CENTER, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCenterWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCenterWidget(this);
		}
	}


}



class ColumnWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_columnWidget;
    }

	COLUMN() {
	    return this.getToken(DartParser.COLUMN, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterColumnWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitColumnWidget(this);
		}
	}


}



class RowWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_rowWidget;
    }

	ROW() {
	    return this.getToken(DartParser.ROW, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterRowWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitRowWidget(this);
		}
	}


}



class SizedBoxWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_sizedBoxWidget;
    }

	SIZED_BOX() {
	    return this.getToken(DartParser.SIZED_BOX, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSizedBoxWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSizedBoxWidget(this);
		}
	}


}



class ScaffoldWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_scaffoldWidget;
    }

	SCAFFOLD() {
	    return this.getToken(DartParser.SCAFFOLD, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterScaffoldWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitScaffoldWidget(this);
		}
	}


}



class AppBarWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_appBarWidget;
    }

	APP_BAR_WIDGET() {
	    return this.getToken(DartParser.APP_BAR_WIDGET, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAppBarWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAppBarWidget(this);
		}
	}


}



class TextFieldWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_textFieldWidget;
    }

	TEXT_FIELD() {
	    return this.getToken(DartParser.TEXT_FIELD, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTextFieldWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTextFieldWidget(this);
		}
	}


}



class ElevatedButtonWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_elevatedButtonWidget;
    }

	ELEVATED_BUTTON() {
	    return this.getToken(DartParser.ELEVATED_BUTTON, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterElevatedButtonWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitElevatedButtonWidget(this);
		}
	}


}



class ContainerWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_containerWidget;
    }

	CONTAINER() {
	    return this.getToken(DartParser.CONTAINER, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterContainerWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitContainerWidget(this);
		}
	}


}



class InputDecorationWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_inputDecorationWidget;
    }

	INPUT_DECORATION_WIDGET() {
	    return this.getToken(DartParser.INPUT_DECORATION_WIDGET, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterInputDecorationWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitInputDecorationWidget(this);
		}
	}


}



class BorderWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_borderWidget;
    }

	BORDER_WIDGET() {
	    return this.getToken(DartParser.BORDER_WIDGET, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBorderWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBorderWidget(this);
		}
	}


}



class BoxDecorationWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_boxDecorationWidget;
    }

	BOX_DECORATION_WIDGET() {
	    return this.getToken(DartParser.BOX_DECORATION_WIDGET, 0);
	};

	widgetBody() {
	    return this.getTypedRuleContext(WidgetBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBoxDecorationWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBoxDecorationWidget(this);
		}
	}


}



class ImageWidgetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_imageWidget;
    }

	IMAGE_WIDGET() {
	    return this.getToken(DartParser.IMAGE_WIDGET, 0);
	};

	NETWROK_IMAGE() {
	    return this.getToken(DartParser.NETWROK_IMAGE, 0);
	};

	imageUrl() {
	    return this.getTypedRuleContext(ImageUrlContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterImageWidget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitImageWidget(this);
		}
	}


}



class ImageUrlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_imageUrl;
    }

	singleLineString() {
	    return this.getTypedRuleContext(SingleLineStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterImageUrl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitImageUrl(this);
		}
	}


}



class WidgetBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_widgetBody;
    }

	widgetBodyProps = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WidgetBodyPropsContext);
	    } else {
	        return this.getTypedRuleContext(WidgetBodyPropsContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterWidgetBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitWidgetBody(this);
		}
	}


}



class WidgetBodyPropsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_widgetBodyProps;
    }

	APP_BAR() {
	    return this.getToken(DartParser.APP_BAR, 0);
	};

	widget = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WidgetContext);
	    } else {
	        return this.getTypedRuleContext(WidgetContext,i);
	    }
	};

	TITLE() {
	    return this.getToken(DartParser.TITLE, 0);
	};

	CHILD() {
	    return this.getToken(DartParser.CHILD, 0);
	};

	STYLE() {
	    return this.getToken(DartParser.STYLE, 0);
	};

	CHILDREN() {
	    return this.getToken(DartParser.CHILDREN, 0);
	};

	FONTSIZE() {
	    return this.getToken(DartParser.FONTSIZE, 0);
	};

	fontSize() {
	    return this.getTypedRuleContext(FontSizeContext,0);
	};

	FONT_WEIGHT_BODY_ATT() {
	    return this.getToken(DartParser.FONT_WEIGHT_BODY_ATT, 0);
	};

	fontWeight() {
	    return this.getTypedRuleContext(FontWeightContext,0);
	};

	CONTROLLER() {
	    return this.getToken(DartParser.CONTROLLER, 0);
	};

	controllerName() {
	    return this.getTypedRuleContext(ControllerNameContext,0);
	};

	HEIGHT() {
	    return this.getToken(DartParser.HEIGHT, 0);
	};

	height() {
	    return this.getTypedRuleContext(HeightContext,0);
	};

	WIDTH() {
	    return this.getToken(DartParser.WIDTH, 0);
	};

	width() {
	    return this.getTypedRuleContext(WidthContext,0);
	};

	ON_PRESSED() {
	    return this.getToken(DartParser.ON_PRESSED, 0);
	};

	functionExpression() {
	    return this.getTypedRuleContext(FunctionExpressionContext,0);
	};

	MARGIN() {
	    return this.getToken(DartParser.MARGIN, 0);
	};

	edgeInsets() {
	    return this.getTypedRuleContext(EdgeInsetsContext,0);
	};

	PADDING() {
	    return this.getToken(DartParser.PADDING, 0);
	};

	padding() {
	    return this.getTypedRuleContext(PaddingContext,0);
	};

	COLOR() {
	    return this.getToken(DartParser.COLOR, 0);
	};

	colors() {
	    return this.getTypedRuleContext(ColorsContext,0);
	};

	BORDER_RADIUS_ATT() {
	    return this.getToken(DartParser.BORDER_RADIUS_ATT, 0);
	};

	borderRadius() {
	    return this.getTypedRuleContext(BorderRadiusContext,0);
	};

	DECORATION_BODY_ATT() {
	    return this.getToken(DartParser.DECORATION_BODY_ATT, 0);
	};

	HINT_TEXT() {
	    return this.getToken(DartParser.HINT_TEXT, 0);
	};

	hintText() {
	    return this.getTypedRuleContext(HintTextContext,0);
	};

	OBSCURE_TEXT() {
	    return this.getToken(DartParser.OBSCURE_TEXT, 0);
	};

	obscureText() {
	    return this.getTypedRuleContext(ObscureTextContext,0);
	};

	BORDER() {
	    return this.getToken(DartParser.BORDER, 0);
	};

	MAIN_AXIS_ALIGNMENT_BODY_ATT() {
	    return this.getToken(DartParser.MAIN_AXIS_ALIGNMENT_BODY_ATT, 0);
	};

	mainAxisAlignment() {
	    return this.getTypedRuleContext(MainAxisAlignmentContext,0);
	};

	MAIN_AXIS_SIZE_BODY_ATT() {
	    return this.getToken(DartParser.MAIN_AXIS_SIZE_BODY_ATT, 0);
	};

	mainAxisSize() {
	    return this.getTypedRuleContext(MainAxisSizeContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	BODY() {
	    return this.getToken(DartParser.BODY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterWidgetBodyProps(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitWidgetBodyProps(this);
		}
	}


}



class PaddingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_padding;
    }

	edgeInsets() {
	    return this.getTypedRuleContext(EdgeInsetsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterPadding(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitPadding(this);
		}
	}


}



class BorderRadiusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_borderRadius;
    }

	BORDER_RADIUS() {
	    return this.getToken(DartParser.BORDER_RADIUS, 0);
	};

	circularBorderRadius() {
	    return this.getTypedRuleContext(CircularBorderRadiusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBorderRadius(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBorderRadius(this);
		}
	}


}



class CircularBorderRadiusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_circularBorderRadius;
    }

	BORDER_RADIUS_CIRCULAR() {
	    return this.getToken(DartParser.BORDER_RADIUS_CIRCULAR, 0);
	};

	circularBorderRadiusValue() {
	    return this.getTypedRuleContext(CircularBorderRadiusValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCircularBorderRadius(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCircularBorderRadius(this);
		}
	}


}



class CircularBorderRadiusValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_circularBorderRadiusValue;
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCircularBorderRadiusValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCircularBorderRadiusValue(this);
		}
	}


}



class ColorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_colors;
    }

	COLORS() {
	    return this.getToken(DartParser.COLORS, 0);
	};

	colorName() {
	    return this.getTypedRuleContext(ColorNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterColors(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitColors(this);
		}
	}


}



class ColorNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_colorName;
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterColorName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitColorName(this);
		}
	}


}



class HeightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_height;
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterHeight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitHeight(this);
		}
	}


}



class WidthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_width;
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterWidth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitWidth(this);
		}
	}


}



class ObscureTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_obscureText;
    }

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterObscureText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitObscureText(this);
		}
	}


}



class HintTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_hintText;
    }

	singleLineString() {
	    return this.getTypedRuleContext(SingleLineStringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterHintText(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitHintText(this);
		}
	}


}



class FontSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_fontSize;
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFontSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFontSize(this);
		}
	}


}



class FontWeightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_fontWeight;
    }

	fontWeightBold() {
	    return this.getTypedRuleContext(FontWeightBoldContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFontWeight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFontWeight(this);
		}
	}


}



class FontWeightBoldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_fontWeightBold;
    }

	FONT_WEIGHT() {
	    return this.getToken(DartParser.FONT_WEIGHT, 0);
	};

	FONT_WEIGHT_BOLD() {
	    return this.getToken(DartParser.FONT_WEIGHT_BOLD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFontWeightBold(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFontWeightBold(this);
		}
	}


}



class MainAxisAlignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mainAxisAlignment;
    }

	mainAxisAlignmentCenter() {
	    return this.getTypedRuleContext(MainAxisAlignmentCenterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMainAxisAlignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMainAxisAlignment(this);
		}
	}


}



class MainAxisSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mainAxisSize;
    }

	mainAxisSizeMin() {
	    return this.getTypedRuleContext(MainAxisSizeMinContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMainAxisSize(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMainAxisSize(this);
		}
	}


}



class MainAxisSizeMinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mainAxisSizeMin;
    }

	MAIN_AXIS_SIZE() {
	    return this.getToken(DartParser.MAIN_AXIS_SIZE, 0);
	};

	MAIN_AXIS_SIZE_MIN() {
	    return this.getToken(DartParser.MAIN_AXIS_SIZE_MIN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMainAxisSizeMin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMainAxisSizeMin(this);
		}
	}


}



class MainAxisAlignmentCenterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mainAxisAlignmentCenter;
    }

	MAIN_AXIS_ALIGNMENT() {
	    return this.getToken(DartParser.MAIN_AXIS_ALIGNMENT, 0);
	};

	MAIN_AXIS_ALIGNMENT_CENTER() {
	    return this.getToken(DartParser.MAIN_AXIS_ALIGNMENT_CENTER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMainAxisAlignmentCenter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMainAxisAlignmentCenter(this);
		}
	}


}



class EdgeInsetsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_edgeInsets;
    }

	EDGEINSETS() {
	    return this.getToken(DartParser.EDGEINSETS, 0);
	};

	EDGEINSETS_ALL() {
	    return this.getToken(DartParser.EDGEINSETS_ALL, 0);
	};

	edgeInsetsNumber() {
	    return this.getTypedRuleContext(EdgeInsetsNumberContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterEdgeInsets(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitEdgeInsets(this);
		}
	}


}



class EdgeInsetsNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_edgeInsetsNumber;
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterEdgeInsetsNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitEdgeInsetsNumber(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_variable;
    }

	IDENTIFIER() {
	    return this.getToken(DartParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitVariable(this);
		}
	}


}



class ControllerNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_controllerName;
    }

	IDENTIFIER() {
	    return this.getToken(DartParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterControllerName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitControllerName(this);
		}
	}


}



class ExpressionWithoutCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_expressionWithoutCascade;
    }

	functionExpressionWithoutCascade() {
	    return this.getTypedRuleContext(FunctionExpressionWithoutCascadeContext,0);
	};

	throwExpressionWithoutCascade() {
	    return this.getTypedRuleContext(ThrowExpressionWithoutCascadeContext,0);
	};

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expressionWithoutCascade() {
	    return this.getTypedRuleContext(ExpressionWithoutCascadeContext,0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterExpressionWithoutCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitExpressionWithoutCascade(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_primary;
    }

	thisExpression() {
	    return this.getTypedRuleContext(ThisExpressionContext,0);
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	unconditionalAssignableSelector() {
	    return this.getTypedRuleContext(UnconditionalAssignableSelectorContext,0);
	};

	constObjectExpression() {
	    return this.getTypedRuleContext(ConstObjectExpressionContext,0);
	};

	newExpression() {
	    return this.getTypedRuleContext(NewExpressionContext,0);
	};

	constructorInvocation() {
	    return this.getTypedRuleContext(ConstructorInvocationContext,0);
	};

	functionPrimary() {
	    return this.getTypedRuleContext(FunctionPrimaryContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitPrimary(this);
		}
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_literal;
    }

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	symbolLiteral() {
	    return this.getTypedRuleContext(SymbolLiteralContext,0);
	};

	setOrMapLiteral() {
	    return this.getTypedRuleContext(SetOrMapLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitLiteral(this);
		}
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_nullLiteral;
    }

	NULL() {
	    return this.getToken(DartParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_numericLiteral;
    }

	NUMBER() {
	    return this.getToken(DartParser.NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(DartParser.HEX_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(DartParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(DartParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_stringLiteral;
    }

	singleLineString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SingleLineStringContext);
	    } else {
	        return this.getTypedRuleContext(SingleLineStringContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitStringLiteral(this);
		}
	}


}



class SymbolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_symbolLiteral;
    }

	operator() {
	    return this.getTypedRuleContext(OperatorContext,0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSymbolLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSymbolLiteral(this);
		}
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_listLiteral;
    }

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	elements() {
	    return this.getTypedRuleContext(ElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitListLiteral(this);
		}
	}


}



class SetOrMapLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_setOrMapLiteral;
    }

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	elements() {
	    return this.getTypedRuleContext(ElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSetOrMapLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSetOrMapLiteral(this);
		}
	}


}



class ElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_elements;
    }

	element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementContext);
	    } else {
	        return this.getTypedRuleContext(ElementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitElements(this);
		}
	}


}



class ElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_element;
    }

	expressionElement() {
	    return this.getTypedRuleContext(ExpressionElementContext,0);
	};

	mapElement() {
	    return this.getTypedRuleContext(MapElementContext,0);
	};

	spreadElement() {
	    return this.getTypedRuleContext(SpreadElementContext,0);
	};

	ifElement() {
	    return this.getTypedRuleContext(IfElementContext,0);
	};

	forElement() {
	    return this.getTypedRuleContext(ForElementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitElement(this);
		}
	}


}



class ExpressionElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_expressionElement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterExpressionElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitExpressionElement(this);
		}
	}


}



class MapElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_mapElement;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMapElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMapElement(this);
		}
	}


}



class SpreadElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_spreadElement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSpreadElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSpreadElement(this);
		}
	}


}



class IfElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_ifElement;
    }

	IF() {
	    return this.getToken(DartParser.IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementContext);
	    } else {
	        return this.getTypedRuleContext(ElementContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(DartParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIfElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIfElement(this);
		}
	}


}



class ForElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_forElement;
    }

	FOR() {
	    return this.getToken(DartParser.FOR, 0);
	};

	forLoopParts() {
	    return this.getTypedRuleContext(ForLoopPartsContext,0);
	};

	element() {
	    return this.getTypedRuleContext(ElementContext,0);
	};

	AWAIT() {
	    return this.getToken(DartParser.AWAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterForElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitForElement(this);
		}
	}


}



class ThrowExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_throwExpression;
    }

	THROW() {
	    return this.getToken(DartParser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterThrowExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitThrowExpression(this);
		}
	}


}



class ThrowExpressionWithoutCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_throwExpressionWithoutCascade;
    }

	THROW() {
	    return this.getToken(DartParser.THROW, 0);
	};

	expressionWithoutCascade() {
	    return this.getTypedRuleContext(ExpressionWithoutCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterThrowExpressionWithoutCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitThrowExpressionWithoutCascade(this);
		}
	}


}



class FunctionExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionExpression;
    }

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	functionExpressionBody() {
	    return this.getTypedRuleContext(FunctionExpressionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionExpression(this);
		}
	}


}



class FunctionExpressionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionExpressionBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	normalFormalParameters() {
	    return this.getTypedRuleContext(NormalFormalParametersContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ASYNC() {
	    return this.getToken(DartParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionExpressionBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionExpressionBody(this);
		}
	}


}



class FunctionExpressionWithoutCascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionExpressionWithoutCascade;
    }

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	functionExpressionWithoutCascadeBody() {
	    return this.getTypedRuleContext(FunctionExpressionWithoutCascadeBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionExpressionWithoutCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionExpressionWithoutCascade(this);
		}
	}


}



class FunctionExpressionWithoutCascadeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionExpressionWithoutCascadeBody;
    }

	expressionWithoutCascade() {
	    return this.getTypedRuleContext(ExpressionWithoutCascadeContext,0);
	};

	ASYNC() {
	    return this.getToken(DartParser.ASYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionExpressionWithoutCascadeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionExpressionWithoutCascadeBody(this);
		}
	}


}



class FunctionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionPrimary;
    }

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	functionPrimaryBody() {
	    return this.getTypedRuleContext(FunctionPrimaryBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionPrimary(this);
		}
	}


}



class FunctionPrimaryBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionPrimaryBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ASYNC() {
	    return this.getToken(DartParser.ASYNC, 0);
	};

	SYNC() {
	    return this.getToken(DartParser.SYNC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionPrimaryBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionPrimaryBody(this);
		}
	}


}



class ThisExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_thisExpression;
    }

	THIS() {
	    return this.getToken(DartParser.THIS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterThisExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitThisExpression(this);
		}
	}


}



class NewExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_newExpression;
    }

	NEW() {
	    return this.getToken(DartParser.NEW, 0);
	};

	constructorDesignation() {
	    return this.getTypedRuleContext(ConstructorDesignationContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNewExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNewExpression(this);
		}
	}


}



class ConstObjectExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_constObjectExpression;
    }

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	constructorDesignation() {
	    return this.getTypedRuleContext(ConstructorDesignationContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterConstObjectExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitConstObjectExpression(this);
		}
	}


}



class ArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_arguments;
    }

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitArguments(this);
		}
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_argumentList;
    }

	namedArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedArgumentContext);
	    } else {
	        return this.getTypedRuleContext(NamedArgumentContext,i);
	    }
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitArgumentList(this);
		}
	}


}



class NamedArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_namedArgument;
    }

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNamedArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNamedArgument(this);
		}
	}


}



class CascadeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_cascade;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	cascadeSection() {
	    return this.getTypedRuleContext(CascadeSectionContext,0);
	};

	cascade() {
	    return this.getTypedRuleContext(CascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCascade(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCascade(this);
		}
	}


}



class CascadeSectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_cascadeSection;
    }

	cascadeSelector() {
	    return this.getTypedRuleContext(CascadeSelectorContext,0);
	};

	cascadeSectionTail() {
	    return this.getTypedRuleContext(CascadeSectionTailContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCascadeSection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCascadeSection(this);
		}
	}


}



class CascadeSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_cascadeSelector;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCascadeSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCascadeSelector(this);
		}
	}


}



class CascadeSectionTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_cascadeSectionTail;
    }

	cascadeAssignment() {
	    return this.getTypedRuleContext(CascadeAssignmentContext,0);
	};

	selector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectorContext);
	    } else {
	        return this.getTypedRuleContext(SelectorContext,i);
	    }
	};

	assignableSelector() {
	    return this.getTypedRuleContext(AssignableSelectorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCascadeSectionTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCascadeSectionTail(this);
		}
	}


}



class CascadeAssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_cascadeAssignment;
    }

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expressionWithoutCascade() {
	    return this.getTypedRuleContext(ExpressionWithoutCascadeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCascadeAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCascadeAssignment(this);
		}
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_assignmentOperator;
    }

	compoundAssignmentOperator() {
	    return this.getTypedRuleContext(CompoundAssignmentOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}


}



class CompoundAssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_compoundAssignmentOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCompoundAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCompoundAssignmentOperator(this);
		}
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_conditionalExpression;
    }

	ifNullExpression() {
	    return this.getTypedRuleContext(IfNullExpressionContext,0);
	};

	expressionWithoutCascade = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionWithoutCascadeContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionWithoutCascadeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitConditionalExpression(this);
		}
	}


}



class IfNullExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_ifNullExpression;
    }

	logicalOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalOrExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIfNullExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIfNullExpression(this);
		}
	}


}



class LogicalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_logicalOrExpression;
    }

	logicalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogicalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LogicalAndExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitLogicalOrExpression(this);
		}
	}


}



class LogicalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_logicalAndExpression;
    }

	equalityExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EqualityExpressionContext);
	    } else {
	        return this.getTypedRuleContext(EqualityExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitLogicalAndExpression(this);
		}
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_equalityExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	equalityOperator() {
	    return this.getTypedRuleContext(EqualityOperatorContext,0);
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitEqualityExpression(this);
		}
	}


}



class EqualityOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_equalityOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterEqualityOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitEqualityOperator(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_relationalExpression;
    }

	bitwiseOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseOrExpressionContext,i);
	    }
	};

	typeTest() {
	    return this.getTypedRuleContext(TypeTestContext,0);
	};

	typeCast() {
	    return this.getTypedRuleContext(TypeCastContext,0);
	};

	relationalOperator() {
	    return this.getTypedRuleContext(RelationalOperatorContext,0);
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class RelationalOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_relationalOperator;
        this.GE = null;
        this.GT = null;
        this.LE = null;
        this.LT = null;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterRelationalOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitRelationalOperator(this);
		}
	}


}



class BitwiseOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_bitwiseOrExpression;
    }

	bitwiseXorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseXorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseXorExpressionContext,i);
	    }
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBitwiseOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBitwiseOrExpression(this);
		}
	}


}



class BitwiseXorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_bitwiseXorExpression;
    }

	bitwiseAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitwiseAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BitwiseAndExpressionContext,i);
	    }
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBitwiseXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBitwiseXorExpression(this);
		}
	}


}



class BitwiseAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_bitwiseAndExpression;
    }

	shiftExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ShiftExpressionContext,i);
	    }
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBitwiseAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBitwiseAndExpression(this);
		}
	}


}



class BitwiseOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_bitwiseOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBitwiseOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBitwiseOperator(this);
		}
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_shiftExpression;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	shiftOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ShiftOperatorContext);
	    } else {
	        return this.getTypedRuleContext(ShiftOperatorContext,i);
	    }
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitShiftExpression(this);
		}
	}


}



class ShiftOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_shiftOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterShiftOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitShiftOperator(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_additiveExpression;
    }

	multiplicativeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExpressionContext,i);
	    }
	};

	additiveOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveOperatorContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveOperatorContext,i);
	    }
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class AdditiveOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_additiveOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAdditiveOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAdditiveOperator(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_multiplicativeExpression;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	multiplicativeOperator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeOperatorContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeOperatorContext,i);
	    }
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class MultiplicativeOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_multiplicativeOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMultiplicativeOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMultiplicativeOperator(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_unaryExpression;
    }

	prefixOperator() {
	    return this.getTypedRuleContext(PrefixOperatorContext,0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	awaitExpression() {
	    return this.getTypedRuleContext(AwaitExpressionContext,0);
	};

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	minusOperator() {
	    return this.getTypedRuleContext(MinusOperatorContext,0);
	};

	tildeOperator() {
	    return this.getTypedRuleContext(TildeOperatorContext,0);
	};

	incrementOperator() {
	    return this.getTypedRuleContext(IncrementOperatorContext,0);
	};

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class PrefixOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_prefixOperator;
    }

	minusOperator() {
	    return this.getTypedRuleContext(MinusOperatorContext,0);
	};

	negationOperator() {
	    return this.getTypedRuleContext(NegationOperatorContext,0);
	};

	tildeOperator() {
	    return this.getTypedRuleContext(TildeOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterPrefixOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitPrefixOperator(this);
		}
	}


}



class MinusOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_minusOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMinusOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMinusOperator(this);
		}
	}


}



class NegationOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_negationOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNegationOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNegationOperator(this);
		}
	}


}



class TildeOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_tildeOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTildeOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTildeOperator(this);
		}
	}


}



class AwaitExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_awaitExpression;
    }

	AWAIT() {
	    return this.getToken(DartParser.AWAIT, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAwaitExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAwaitExpression(this);
		}
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_postfixExpression;
    }

	assignableExpression() {
	    return this.getTypedRuleContext(AssignableExpressionContext,0);
	};

	postfixOperator() {
	    return this.getTypedRuleContext(PostfixOperatorContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	selector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectorContext);
	    } else {
	        return this.getTypedRuleContext(SelectorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitPostfixExpression(this);
		}
	}


}



class PostfixOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_postfixOperator;
    }

	incrementOperator() {
	    return this.getTypedRuleContext(IncrementOperatorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterPostfixOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitPostfixOperator(this);
		}
	}


}



class ConstructorInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_constructorInvocation;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterConstructorInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitConstructorInvocation(this);
		}
	}


}



class SelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_selector;
    }

	assignableSelector() {
	    return this.getTypedRuleContext(AssignableSelectorContext,0);
	};

	argumentPart() {
	    return this.getTypedRuleContext(ArgumentPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSelector(this);
		}
	}


}



class ArgumentPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_argumentPart;
    }

	arguments() {
	    return this.getTypedRuleContext(ArgumentsContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterArgumentPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitArgumentPart(this);
		}
	}


}



class IncrementOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_incrementOperator;
    }


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIncrementOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIncrementOperator(this);
		}
	}


}



class AssignableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_assignableExpression;
    }

	SUPER() {
	    return this.getToken(DartParser.SUPER, 0);
	};

	unconditionalAssignableSelector() {
	    return this.getTypedRuleContext(UnconditionalAssignableSelectorContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	assignableSelectorPart() {
	    return this.getTypedRuleContext(AssignableSelectorPartContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAssignableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAssignableExpression(this);
		}
	}


}



class AssignableSelectorPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_assignableSelectorPart;
    }

	assignableSelector() {
	    return this.getTypedRuleContext(AssignableSelectorContext,0);
	};

	selector = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectorContext);
	    } else {
	        return this.getTypedRuleContext(SelectorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAssignableSelectorPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAssignableSelectorPart(this);
		}
	}


}



class UnconditionalAssignableSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_unconditionalAssignableSelector;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterUnconditionalAssignableSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitUnconditionalAssignableSelector(this);
		}
	}


}



class AssignableSelectorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_assignableSelector;
    }

	unconditionalAssignableSelector() {
	    return this.getTypedRuleContext(UnconditionalAssignableSelectorContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAssignableSelector(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAssignableSelector(this);
		}
	}


}



class IdentifierNotFUNCTIONContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_identifierNotFUNCTION;
    }

	IDENTIFIER() {
	    return this.getToken(DartParser.IDENTIFIER, 0);
	};

	ABSTRACT() {
	    return this.getToken(DartParser.ABSTRACT, 0);
	};

	AS() {
	    return this.getToken(DartParser.AS, 0);
	};

	COVARIANT() {
	    return this.getToken(DartParser.COVARIANT, 0);
	};

	DEFERRED() {
	    return this.getToken(DartParser.DEFERRED, 0);
	};

	DYNAMIC() {
	    return this.getToken(DartParser.DYNAMIC, 0);
	};

	EXPORT() {
	    return this.getToken(DartParser.EXPORT, 0);
	};

	EXTERNAL() {
	    return this.getToken(DartParser.EXTERNAL, 0);
	};

	FACTORY() {
	    return this.getToken(DartParser.FACTORY, 0);
	};

	GET() {
	    return this.getToken(DartParser.GET, 0);
	};

	IMPLEMENTS() {
	    return this.getToken(DartParser.IMPLEMENTS, 0);
	};

	IMPORT() {
	    return this.getToken(DartParser.IMPORT, 0);
	};

	INTERFACE() {
	    return this.getToken(DartParser.INTERFACE, 0);
	};

	LATE() {
	    return this.getToken(DartParser.LATE, 0);
	};

	LIBRARY() {
	    return this.getToken(DartParser.LIBRARY, 0);
	};

	MIXIN() {
	    return this.getToken(DartParser.MIXIN, 0);
	};

	OPERATOR() {
	    return this.getToken(DartParser.OPERATOR, 0);
	};

	PART() {
	    return this.getToken(DartParser.PART, 0);
	};

	REQUIRED() {
	    return this.getToken(DartParser.REQUIRED, 0);
	};

	SET() {
	    return this.getToken(DartParser.SET, 0);
	};

	STATIC() {
	    return this.getToken(DartParser.STATIC, 0);
	};

	TYPEDEF() {
	    return this.getToken(DartParser.TYPEDEF, 0);
	};

	ASYNC() {
	    return this.getToken(DartParser.ASYNC, 0);
	};

	HIDE() {
	    return this.getToken(DartParser.HIDE, 0);
	};

	OF() {
	    return this.getToken(DartParser.OF, 0);
	};

	ON() {
	    return this.getToken(DartParser.ON, 0);
	};

	SHOW() {
	    return this.getToken(DartParser.SHOW, 0);
	};

	SYNC() {
	    return this.getToken(DartParser.SYNC, 0);
	};

	BUILD() {
	    return this.getToken(DartParser.BUILD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIdentifierNotFUNCTION(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIdentifierNotFUNCTION(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_identifier;
    }

	identifierNotFUNCTION() {
	    return this.getTypedRuleContext(IdentifierNotFUNCTIONContext,0);
	};

	FUNCTION() {
	    return this.getToken(DartParser.FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class QualifiedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_qualifiedName;
    }

	typeIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeIdentifierContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterQualifiedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitQualifiedName(this);
		}
	}


}



class TypeIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeIdentifier;
    }

	IDENTIFIER() {
	    return this.getToken(DartParser.IDENTIFIER, 0);
	};

	DYNAMIC() {
	    return this.getToken(DartParser.DYNAMIC, 0);
	};

	ASYNC() {
	    return this.getToken(DartParser.ASYNC, 0);
	};

	HIDE() {
	    return this.getToken(DartParser.HIDE, 0);
	};

	OF() {
	    return this.getToken(DartParser.OF, 0);
	};

	ON() {
	    return this.getToken(DartParser.ON, 0);
	};

	SHOW() {
	    return this.getToken(DartParser.SHOW, 0);
	};

	WIDGET() {
	    return this.getToken(DartParser.WIDGET, 0);
	};

	BUILD_CONTEXT() {
	    return this.getToken(DartParser.BUILD_CONTEXT, 0);
	};

	SYNC() {
	    return this.getToken(DartParser.SYNC, 0);
	};

	STATELESS() {
	    return this.getToken(DartParser.STATELESS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeIdentifier(this);
		}
	}


}



class TypeTestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeTest;
    }

	isOperator() {
	    return this.getTypedRuleContext(IsOperatorContext,0);
	};

	typeNotVoid() {
	    return this.getTypedRuleContext(TypeNotVoidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeTest(this);
		}
	}


}



class IsOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_isOperator;
    }

	IS() {
	    return this.getToken(DartParser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIsOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIsOperator(this);
		}
	}


}



class TypeCastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeCast;
    }

	asOperator() {
	    return this.getTypedRuleContext(AsOperatorContext,0);
	};

	typeNotVoid() {
	    return this.getTypedRuleContext(TypeNotVoidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeCast(this);
		}
	}


}



class AsOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_asOperator;
    }

	AS() {
	    return this.getToken(DartParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAsOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAsOperator(this);
		}
	}


}



class StatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_statements;
    }

	statement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementContext);
	    } else {
	        return this.getTypedRuleContext(StatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitStatements(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_statement;
    }

	nonLabelledStatement() {
	    return this.getTypedRuleContext(NonLabelledStatementContext,0);
	};

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitStatement(this);
		}
	}


}



class NonLabelledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_nonLabelledStatement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	rethrowStatement() {
	    return this.getTypedRuleContext(RethrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	localFunctionDeclaration() {
	    return this.getTypedRuleContext(LocalFunctionDeclarationContext,0);
	};

	assertStatement() {
	    return this.getTypedRuleContext(AssertStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	yieldEachStatement() {
	    return this.getTypedRuleContext(YieldEachStatementContext,0);
	};

	navigationStatement() {
	    return this.getTypedRuleContext(NavigationStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNonLabelledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNonLabelledStatement(this);
		}
	}


}



class NavigationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_navigationStatement;
    }

	NAVIGATOR() {
	    return this.getToken(DartParser.NAVIGATOR, 0);
	};

	OF() {
	    return this.getToken(DartParser.OF, 0);
	};

	CONTEXT() {
	    return this.getToken(DartParser.CONTEXT, 0);
	};

	PUSH() {
	    return this.getToken(DartParser.PUSH, 0);
	};

	materialPageRoute() {
	    return this.getTypedRuleContext(MaterialPageRouteContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNavigationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNavigationStatement(this);
		}
	}


}



class MaterialPageRouteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_materialPageRoute;
    }

	MATERIAL_PAGEROUTE() {
	    return this.getToken(DartParser.MATERIAL_PAGEROUTE, 0);
	};

	BUILDER() {
	    return this.getToken(DartParser.BUILDER, 0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	className() {
	    return this.getTypedRuleContext(ClassNameContext,0);
	};

	classMember = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassMemberContext);
	    } else {
	        return this.getTypedRuleContext(ClassMemberContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterMaterialPageRoute(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitMaterialPageRoute(this);
		}
	}


}



class ClassNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_className;
    }

	IDENTIFIER() {
	    return this.getToken(DartParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterClassName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitClassName(this);
		}
	}


}



class ClassMemberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_classMember;
    }

	key() {
	    return this.getTypedRuleContext(KeyContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterClassMember(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitClassMember(this);
		}
	}


}



class KeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_key;
    }

	IDENTIFIER() {
	    return this.getToken(DartParser.IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitKey(this);
		}
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_value;
    }

	IDENTIFIER() {
	    return this.getToken(DartParser.IDENTIFIER, 0);
	};

	textController() {
	    return this.getTypedRuleContext(TextControllerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitValue(this);
		}
	}


}



class TextControllerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_textController;
    }

	controllerName() {
	    return this.getTypedRuleContext(ControllerNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTextController(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTextController(this);
		}
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_expressionStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitExpressionStatement(this);
		}
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_localVariableDeclaration;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	initializedVariableDeclaration() {
	    return this.getTypedRuleContext(InitializedVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}


}



class LocalFunctionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_localFunctionDeclaration;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterLocalFunctionDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitLocalFunctionDeclaration(this);
		}
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_ifStatement;
        this.ifPart = null;
        this.elsePart = null;
    }

	IF() {
	    return this.getToken(DartParser.IF, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(DartParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIfStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIfStatement(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_forStatement;
    }

	FOR() {
	    return this.getToken(DartParser.FOR, 0);
	};

	forLoopParts() {
	    return this.getTypedRuleContext(ForLoopPartsContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	AWAIT() {
	    return this.getToken(DartParser.AWAIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForLoopPartsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_forLoopParts;
    }

	metadata() {
	    return this.getTypedRuleContext(MetadataContext,0);
	};

	declaredIdentifier() {
	    return this.getTypedRuleContext(DeclaredIdentifierContext,0);
	};

	IN() {
	    return this.getToken(DartParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	forInitializerStatement() {
	    return this.getTypedRuleContext(ForInitializerStatementContext,0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterForLoopParts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitForLoopParts(this);
		}
	}


}



class ForInitializerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_forInitializerStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterForInitializerStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitForInitializerStatement(this);
		}
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_whileStatement;
    }

	WHILE() {
	    return this.getToken(DartParser.WHILE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitWhileStatement(this);
		}
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(DartParser.DO, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	WHILE() {
	    return this.getToken(DartParser.WHILE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitDoStatement(this);
		}
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_switchStatement;
    }

	SWITCH() {
	    return this.getToken(DartParser.SWITCH, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	switchCase = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchCaseContext);
	    } else {
	        return this.getTypedRuleContext(SwitchCaseContext,i);
	    }
	};

	defaultCase() {
	    return this.getTypedRuleContext(DefaultCaseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSwitchStatement(this);
		}
	}


}



class SwitchCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_switchCase;
    }

	CASE() {
	    return this.getToken(DartParser.CASE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSwitchCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSwitchCase(this);
		}
	}


}



class DefaultCaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_defaultCase;
    }

	DEFAULT() {
	    return this.getToken(DartParser.DEFAULT, 0);
	};

	statements() {
	    return this.getTypedRuleContext(StatementsContext,0);
	};

	label = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelContext);
	    } else {
	        return this.getTypedRuleContext(LabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterDefaultCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitDefaultCase(this);
		}
	}


}



class RethrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_rethrowStatement;
    }

	RETHROW() {
	    return this.getToken(DartParser.RETHROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterRethrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitRethrowStatement(this);
		}
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_tryStatement;
    }

	TRY() {
	    return this.getToken(DartParser.TRY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	finallyPart() {
	    return this.getTypedRuleContext(FinallyPartContext,0);
	};

	onPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OnPartContext);
	    } else {
	        return this.getTypedRuleContext(OnPartContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTryStatement(this);
		}
	}


}



class OnPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_onPart;
    }

	catchPart() {
	    return this.getTypedRuleContext(CatchPartContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ON() {
	    return this.getToken(DartParser.ON, 0);
	};

	typeNotVoid() {
	    return this.getTypedRuleContext(TypeNotVoidContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterOnPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitOnPart(this);
		}
	}


}



class CatchPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_catchPart;
    }

	CATCH() {
	    return this.getToken(DartParser.CATCH, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterCatchPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitCatchPart(this);
		}
	}


}



class FinallyPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_finallyPart;
    }

	FINALLY() {
	    return this.getToken(DartParser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFinallyPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFinallyPart(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(DartParser.RETURN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_label;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitLabel(this);
		}
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_breakStatement;
    }

	BREAK() {
	    return this.getToken(DartParser.BREAK, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitBreakStatement(this);
		}
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(DartParser.CONTINUE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitContinueStatement(this);
		}
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_yieldStatement;
    }

	YIELD() {
	    return this.getToken(DartParser.YIELD, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitYieldStatement(this);
		}
	}


}



class YieldEachStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_yieldEachStatement;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterYieldEachStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitYieldEachStatement(this);
		}
	}


}



class AssertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_assertStatement;
    }

	assertion() {
	    return this.getTypedRuleContext(AssertionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAssertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAssertStatement(this);
		}
	}


}



class AssertionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_assertion;
    }

	ASSERT() {
	    return this.getToken(DartParser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterAssertion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitAssertion(this);
		}
	}


}



class TopLevelDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_topLevelDefinition;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	mixinDeclaration() {
	    return this.getTypedRuleContext(MixinDeclarationContext,0);
	};

	enumType() {
	    return this.getTypedRuleContext(EnumTypeContext,0);
	};

	typeAlias() {
	    return this.getTypedRuleContext(TypeAliasContext,0);
	};

	EXTERNAL() {
	    return this.getToken(DartParser.EXTERNAL, 0);
	};

	functionSignature() {
	    return this.getTypedRuleContext(FunctionSignatureContext,0);
	};

	getterSignature() {
	    return this.getTypedRuleContext(GetterSignatureContext,0);
	};

	setterSignature() {
	    return this.getTypedRuleContext(SetterSignatureContext,0);
	};

	finalVarOrType() {
	    return this.getTypedRuleContext(FinalVarOrTypeContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	functionBody() {
	    return this.getTypedRuleContext(FunctionBodyContext,0);
	};

	staticFinalDeclarationList() {
	    return this.getTypedRuleContext(StaticFinalDeclarationListContext,0);
	};

	FINAL() {
	    return this.getToken(DartParser.FINAL, 0);
	};

	CONST() {
	    return this.getToken(DartParser.CONST, 0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	LATE() {
	    return this.getToken(DartParser.LATE, 0);
	};

	initializedIdentifierList() {
	    return this.getTypedRuleContext(InitializedIdentifierListContext,0);
	};

	varOrType() {
	    return this.getTypedRuleContext(VarOrTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	initializedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InitializedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(InitializedIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTopLevelDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTopLevelDefinition(this);
		}
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterIdentifierList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitIdentifierList(this);
		}
	}


}



class TypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_type;
    }

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	typeNotFunction() {
	    return this.getTypedRuleContext(TypeNotFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitType(this);
		}
	}


}



class TypeNotVoidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeNotVoid;
    }

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	typeNotVoidNotFunction() {
	    return this.getTypedRuleContext(TypeNotVoidNotFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeNotVoid(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeNotVoid(this);
		}
	}


}



class TypeNotFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeNotFunction;
    }

	typeNotVoidNotFunction() {
	    return this.getTypedRuleContext(TypeNotVoidNotFunctionContext,0);
	};

	VOID() {
	    return this.getToken(DartParser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeNotFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeNotFunction(this);
		}
	}


}



class TypeNotVoidNotFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeNotVoidNotFunction;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	FUNCTION() {
	    return this.getToken(DartParser.FUNCTION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeNotVoidNotFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeNotVoidNotFunction(this);
		}
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeName;
    }

	typeIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeIdentifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeName(this);
		}
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeArguments;
    }

	typeList() {
	    return this.getTypedRuleContext(TypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeArguments(this);
		}
	}


}



class TypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeList;
    }

	type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeContext);
	    } else {
	        return this.getTypedRuleContext(TypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeList(this);
		}
	}


}



class TypeNotVoidNotFunctionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeNotVoidNotFunctionList;
    }

	typeNotVoidNotFunction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNotVoidNotFunctionContext);
	    } else {
	        return this.getTypedRuleContext(TypeNotVoidNotFunctionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeNotVoidNotFunctionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeNotVoidNotFunctionList(this);
		}
	}


}



class FunctionTypeTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionTypeTail;
    }

	FUNCTION() {
	    return this.getToken(DartParser.FUNCTION, 0);
	};

	parameterTypeList() {
	    return this.getTypedRuleContext(ParameterTypeListContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionTypeTail(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionTypeTail(this);
		}
	}


}



class FunctionTypeTailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionTypeTails;
    }

	functionTypeTail() {
	    return this.getTypedRuleContext(FunctionTypeTailContext,0);
	};

	functionTypeTails() {
	    return this.getTypedRuleContext(FunctionTypeTailsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionTypeTails(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionTypeTails(this);
		}
	}


}



class FunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionType;
    }

	functionTypeTails() {
	    return this.getTypedRuleContext(FunctionTypeTailsContext,0);
	};

	typeNotFunction() {
	    return this.getTypedRuleContext(TypeNotFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionType(this);
		}
	}


}



class ParameterTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_parameterTypeList;
    }

	normalParameterTypes() {
	    return this.getTypedRuleContext(NormalParameterTypesContext,0);
	};

	optionalParameterTypes() {
	    return this.getTypedRuleContext(OptionalParameterTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterParameterTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitParameterTypeList(this);
		}
	}


}



class NormalParameterTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_normalParameterTypes;
    }

	normalParameterType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NormalParameterTypeContext);
	    } else {
	        return this.getTypedRuleContext(NormalParameterTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNormalParameterTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNormalParameterTypes(this);
		}
	}


}



class NormalParameterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_normalParameterType;
    }

	typedIdentifier() {
	    return this.getTypedRuleContext(TypedIdentifierContext,0);
	};

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNormalParameterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNormalParameterType(this);
		}
	}


}



class OptionalParameterTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_optionalParameterTypes;
    }

	optionalPositionalParameterTypes() {
	    return this.getTypedRuleContext(OptionalPositionalParameterTypesContext,0);
	};

	namedParameterTypes() {
	    return this.getTypedRuleContext(NamedParameterTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterOptionalParameterTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitOptionalParameterTypes(this);
		}
	}


}



class OptionalPositionalParameterTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_optionalPositionalParameterTypes;
    }

	normalParameterTypes() {
	    return this.getTypedRuleContext(NormalParameterTypesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterOptionalPositionalParameterTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitOptionalPositionalParameterTypes(this);
		}
	}


}



class NamedParameterTypesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_namedParameterTypes;
    }

	LBRACE() {
	    return this.getToken(DartParser.LBRACE, 0);
	};

	namedParameterType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NamedParameterTypeContext);
	    } else {
	        return this.getTypedRuleContext(NamedParameterTypeContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(DartParser.RBRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNamedParameterTypes(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNamedParameterTypes(this);
		}
	}


}



class NamedParameterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_namedParameterType;
    }

	typedIdentifier() {
	    return this.getTypedRuleContext(TypedIdentifierContext,0);
	};

	REQUIRED() {
	    return this.getToken(DartParser.REQUIRED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterNamedParameterType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitNamedParameterType(this);
		}
	}


}



class TypedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typedIdentifier;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypedIdentifier(this);
		}
	}


}



class ConstructorDesignationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_constructorDesignation;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	qualifiedName() {
	    return this.getTypedRuleContext(QualifiedNameContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterConstructorDesignation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitConstructorDesignation(this);
		}
	}


}



class TypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_typeAlias;
    }

	TYPEDEF() {
	    return this.getToken(DartParser.TYPEDEF, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	functionType() {
	    return this.getTypedRuleContext(FunctionTypeContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	functionTypeAlias() {
	    return this.getTypedRuleContext(FunctionTypeAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitTypeAlias(this);
		}
	}


}



class FunctionTypeAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionTypeAlias;
    }

	functionPrefix() {
	    return this.getTypedRuleContext(FunctionPrefixContext,0);
	};

	formalParameterPart() {
	    return this.getTypedRuleContext(FormalParameterPartContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionTypeAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionTypeAlias(this);
		}
	}


}



class FunctionPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_functionPrefix;
    }

	type() {
	    return this.getTypedRuleContext(TypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterFunctionPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitFunctionPrefix(this);
		}
	}


}



class SingleLineStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DartParser.RULE_singleLineString;
    }

	RAW_SINGLE_LINE_STRING() {
	    return this.getToken(DartParser.RAW_SINGLE_LINE_STRING, 0);
	};

	SINGLE_LINE_STRING_SQ_BEGIN_END() {
	    return this.getToken(DartParser.SINGLE_LINE_STRING_SQ_BEGIN_END, 0);
	};

	SINGLE_LINE_STRING_SQ_BEGIN_MID() {
	    return this.getToken(DartParser.SINGLE_LINE_STRING_SQ_BEGIN_MID, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SINGLE_LINE_STRING_SQ_MID_END() {
	    return this.getToken(DartParser.SINGLE_LINE_STRING_SQ_MID_END, 0);
	};

	SINGLE_LINE_STRING_SQ_MID_MID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DartParser.SINGLE_LINE_STRING_SQ_MID_MID);
	    } else {
	        return this.getToken(DartParser.SINGLE_LINE_STRING_SQ_MID_MID, i);
	    }
	};


	SINGLE_LINE_STRING_DQ_BEGIN_END() {
	    return this.getToken(DartParser.SINGLE_LINE_STRING_DQ_BEGIN_END, 0);
	};

	SINGLE_LINE_STRING_DQ_BEGIN_MID() {
	    return this.getToken(DartParser.SINGLE_LINE_STRING_DQ_BEGIN_MID, 0);
	};

	SINGLE_LINE_STRING_DQ_MID_END() {
	    return this.getToken(DartParser.SINGLE_LINE_STRING_DQ_MID_END, 0);
	};

	SINGLE_LINE_STRING_DQ_MID_MID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DartParser.SINGLE_LINE_STRING_DQ_MID_MID);
	    } else {
	        return this.getToken(DartParser.SINGLE_LINE_STRING_DQ_MID_MID, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.enterSingleLineString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DartListener ) {
	        listener.exitSingleLineString(this);
		}
	}


}




DartParser.StartContext = StartContext; 
DartParser.DeclaredIdentifierContext = DeclaredIdentifierContext; 
DartParser.FinalConstVarOrTypeContext = FinalConstVarOrTypeContext; 
DartParser.FinalVarOrTypeContext = FinalVarOrTypeContext; 
DartParser.VarOrTypeContext = VarOrTypeContext; 
DartParser.InitializedVariableDeclarationContext = InitializedVariableDeclarationContext; 
DartParser.InitializedIdentifierContext = InitializedIdentifierContext; 
DartParser.InitializedIdentifierListContext = InitializedIdentifierListContext; 
DartParser.FunctionSignatureContext = FunctionSignatureContext; 
DartParser.FormalParameterPartContext = FormalParameterPartContext; 
DartParser.FunctionBodyContext = FunctionBodyContext; 
DartParser.BlockContext = BlockContext; 
DartParser.FormalParameterListContext = FormalParameterListContext; 
DartParser.NormalFormalParametersContext = NormalFormalParametersContext; 
DartParser.OptionalOrNamedFormalParametersContext = OptionalOrNamedFormalParametersContext; 
DartParser.OptionalPositionalFormalParametersContext = OptionalPositionalFormalParametersContext; 
DartParser.NamedFormalParametersContext = NamedFormalParametersContext; 
DartParser.NormalFormalParameterContext = NormalFormalParameterContext; 
DartParser.FunctionFormalParameterContext = FunctionFormalParameterContext; 
DartParser.SimpleFormalParameterContext = SimpleFormalParameterContext; 
DartParser.FieldFormalParameterContext = FieldFormalParameterContext; 
DartParser.DefaultFormalParameterContext = DefaultFormalParameterContext; 
DartParser.DefaultNamedParameterContext = DefaultNamedParameterContext; 
DartParser.TypeWithParametersContext = TypeWithParametersContext; 
DartParser.ClassDeclarationContext = ClassDeclarationContext; 
DartParser.ClassMemberDefinitionContext = ClassMemberDefinitionContext; 
DartParser.MethodSignatureContext = MethodSignatureContext; 
DartParser.DeclarationContext = DeclarationContext; 
DartParser.StaticFinalDeclarationListContext = StaticFinalDeclarationListContext; 
DartParser.StaticFinalDeclarationContext = StaticFinalDeclarationContext; 
DartParser.OperatorSignatureContext = OperatorSignatureContext; 
DartParser.OperatorContext = OperatorContext; 
DartParser.BinaryOperatorContext = BinaryOperatorContext; 
DartParser.GetterSignatureContext = GetterSignatureContext; 
DartParser.SetterSignatureContext = SetterSignatureContext; 
DartParser.ConstructorSignatureContext = ConstructorSignatureContext; 
DartParser.ConstructorNameContext = ConstructorNameContext; 
DartParser.RedirectionContext = RedirectionContext; 
DartParser.InitializersContext = InitializersContext; 
DartParser.InitializerListEntryContext = InitializerListEntryContext; 
DartParser.FieldInitializerContext = FieldInitializerContext; 
DartParser.InitializerExpressionContext = InitializerExpressionContext; 
DartParser.FactoryConstructorSignatureContext = FactoryConstructorSignatureContext; 
DartParser.RedirectingFactoryConstructorSignatureContext = RedirectingFactoryConstructorSignatureContext; 
DartParser.ConstantConstructorSignatureContext = ConstantConstructorSignatureContext; 
DartParser.SuperclassContext = SuperclassContext; 
DartParser.MixinsContext = MixinsContext; 
DartParser.InterfacesContext = InterfacesContext; 
DartParser.MixinApplicationClassContext = MixinApplicationClassContext; 
DartParser.MixinApplicationContext = MixinApplicationContext; 
DartParser.MixinDeclarationContext = MixinDeclarationContext; 
DartParser.EnumTypeContext = EnumTypeContext; 
DartParser.TypeParameterContext = TypeParameterContext; 
DartParser.TypeParametersContext = TypeParametersContext; 
DartParser.EnumEntryContext = EnumEntryContext; 
DartParser.MetadataContext = MetadataContext; 
DartParser.MetadatumContext = MetadatumContext; 
DartParser.ExpressionContext = ExpressionContext; 
DartParser.WidgetContext = WidgetContext; 
DartParser.TextWidgetContext = TextWidgetContext; 
DartParser.TextStyleWidgetContext = TextStyleWidgetContext; 
DartParser.CenterWidgetContext = CenterWidgetContext; 
DartParser.ColumnWidgetContext = ColumnWidgetContext; 
DartParser.RowWidgetContext = RowWidgetContext; 
DartParser.SizedBoxWidgetContext = SizedBoxWidgetContext; 
DartParser.ScaffoldWidgetContext = ScaffoldWidgetContext; 
DartParser.AppBarWidgetContext = AppBarWidgetContext; 
DartParser.TextFieldWidgetContext = TextFieldWidgetContext; 
DartParser.ElevatedButtonWidgetContext = ElevatedButtonWidgetContext; 
DartParser.ContainerWidgetContext = ContainerWidgetContext; 
DartParser.InputDecorationWidgetContext = InputDecorationWidgetContext; 
DartParser.BorderWidgetContext = BorderWidgetContext; 
DartParser.BoxDecorationWidgetContext = BoxDecorationWidgetContext; 
DartParser.ImageWidgetContext = ImageWidgetContext; 
DartParser.ImageUrlContext = ImageUrlContext; 
DartParser.WidgetBodyContext = WidgetBodyContext; 
DartParser.WidgetBodyPropsContext = WidgetBodyPropsContext; 
DartParser.PaddingContext = PaddingContext; 
DartParser.BorderRadiusContext = BorderRadiusContext; 
DartParser.CircularBorderRadiusContext = CircularBorderRadiusContext; 
DartParser.CircularBorderRadiusValueContext = CircularBorderRadiusValueContext; 
DartParser.ColorsContext = ColorsContext; 
DartParser.ColorNameContext = ColorNameContext; 
DartParser.HeightContext = HeightContext; 
DartParser.WidthContext = WidthContext; 
DartParser.ObscureTextContext = ObscureTextContext; 
DartParser.HintTextContext = HintTextContext; 
DartParser.FontSizeContext = FontSizeContext; 
DartParser.FontWeightContext = FontWeightContext; 
DartParser.FontWeightBoldContext = FontWeightBoldContext; 
DartParser.MainAxisAlignmentContext = MainAxisAlignmentContext; 
DartParser.MainAxisSizeContext = MainAxisSizeContext; 
DartParser.MainAxisSizeMinContext = MainAxisSizeMinContext; 
DartParser.MainAxisAlignmentCenterContext = MainAxisAlignmentCenterContext; 
DartParser.EdgeInsetsContext = EdgeInsetsContext; 
DartParser.EdgeInsetsNumberContext = EdgeInsetsNumberContext; 
DartParser.VariableContext = VariableContext; 
DartParser.ControllerNameContext = ControllerNameContext; 
DartParser.ExpressionWithoutCascadeContext = ExpressionWithoutCascadeContext; 
DartParser.ExpressionListContext = ExpressionListContext; 
DartParser.PrimaryContext = PrimaryContext; 
DartParser.LiteralContext = LiteralContext; 
DartParser.NullLiteralContext = NullLiteralContext; 
DartParser.NumericLiteralContext = NumericLiteralContext; 
DartParser.BooleanLiteralContext = BooleanLiteralContext; 
DartParser.StringLiteralContext = StringLiteralContext; 
DartParser.SymbolLiteralContext = SymbolLiteralContext; 
DartParser.ListLiteralContext = ListLiteralContext; 
DartParser.SetOrMapLiteralContext = SetOrMapLiteralContext; 
DartParser.ElementsContext = ElementsContext; 
DartParser.ElementContext = ElementContext; 
DartParser.ExpressionElementContext = ExpressionElementContext; 
DartParser.MapElementContext = MapElementContext; 
DartParser.SpreadElementContext = SpreadElementContext; 
DartParser.IfElementContext = IfElementContext; 
DartParser.ForElementContext = ForElementContext; 
DartParser.ThrowExpressionContext = ThrowExpressionContext; 
DartParser.ThrowExpressionWithoutCascadeContext = ThrowExpressionWithoutCascadeContext; 
DartParser.FunctionExpressionContext = FunctionExpressionContext; 
DartParser.FunctionExpressionBodyContext = FunctionExpressionBodyContext; 
DartParser.FunctionExpressionWithoutCascadeContext = FunctionExpressionWithoutCascadeContext; 
DartParser.FunctionExpressionWithoutCascadeBodyContext = FunctionExpressionWithoutCascadeBodyContext; 
DartParser.FunctionPrimaryContext = FunctionPrimaryContext; 
DartParser.FunctionPrimaryBodyContext = FunctionPrimaryBodyContext; 
DartParser.ThisExpressionContext = ThisExpressionContext; 
DartParser.NewExpressionContext = NewExpressionContext; 
DartParser.ConstObjectExpressionContext = ConstObjectExpressionContext; 
DartParser.ArgumentsContext = ArgumentsContext; 
DartParser.ArgumentListContext = ArgumentListContext; 
DartParser.NamedArgumentContext = NamedArgumentContext; 
DartParser.CascadeContext = CascadeContext; 
DartParser.CascadeSectionContext = CascadeSectionContext; 
DartParser.CascadeSelectorContext = CascadeSelectorContext; 
DartParser.CascadeSectionTailContext = CascadeSectionTailContext; 
DartParser.CascadeAssignmentContext = CascadeAssignmentContext; 
DartParser.AssignmentOperatorContext = AssignmentOperatorContext; 
DartParser.CompoundAssignmentOperatorContext = CompoundAssignmentOperatorContext; 
DartParser.ConditionalExpressionContext = ConditionalExpressionContext; 
DartParser.IfNullExpressionContext = IfNullExpressionContext; 
DartParser.LogicalOrExpressionContext = LogicalOrExpressionContext; 
DartParser.LogicalAndExpressionContext = LogicalAndExpressionContext; 
DartParser.EqualityExpressionContext = EqualityExpressionContext; 
DartParser.EqualityOperatorContext = EqualityOperatorContext; 
DartParser.RelationalExpressionContext = RelationalExpressionContext; 
DartParser.RelationalOperatorContext = RelationalOperatorContext; 
DartParser.BitwiseOrExpressionContext = BitwiseOrExpressionContext; 
DartParser.BitwiseXorExpressionContext = BitwiseXorExpressionContext; 
DartParser.BitwiseAndExpressionContext = BitwiseAndExpressionContext; 
DartParser.BitwiseOperatorContext = BitwiseOperatorContext; 
DartParser.ShiftExpressionContext = ShiftExpressionContext; 
DartParser.ShiftOperatorContext = ShiftOperatorContext; 
DartParser.AdditiveExpressionContext = AdditiveExpressionContext; 
DartParser.AdditiveOperatorContext = AdditiveOperatorContext; 
DartParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
DartParser.MultiplicativeOperatorContext = MultiplicativeOperatorContext; 
DartParser.UnaryExpressionContext = UnaryExpressionContext; 
DartParser.PrefixOperatorContext = PrefixOperatorContext; 
DartParser.MinusOperatorContext = MinusOperatorContext; 
DartParser.NegationOperatorContext = NegationOperatorContext; 
DartParser.TildeOperatorContext = TildeOperatorContext; 
DartParser.AwaitExpressionContext = AwaitExpressionContext; 
DartParser.PostfixExpressionContext = PostfixExpressionContext; 
DartParser.PostfixOperatorContext = PostfixOperatorContext; 
DartParser.ConstructorInvocationContext = ConstructorInvocationContext; 
DartParser.SelectorContext = SelectorContext; 
DartParser.ArgumentPartContext = ArgumentPartContext; 
DartParser.IncrementOperatorContext = IncrementOperatorContext; 
DartParser.AssignableExpressionContext = AssignableExpressionContext; 
DartParser.AssignableSelectorPartContext = AssignableSelectorPartContext; 
DartParser.UnconditionalAssignableSelectorContext = UnconditionalAssignableSelectorContext; 
DartParser.AssignableSelectorContext = AssignableSelectorContext; 
DartParser.IdentifierNotFUNCTIONContext = IdentifierNotFUNCTIONContext; 
DartParser.IdentifierContext = IdentifierContext; 
DartParser.QualifiedNameContext = QualifiedNameContext; 
DartParser.TypeIdentifierContext = TypeIdentifierContext; 
DartParser.TypeTestContext = TypeTestContext; 
DartParser.IsOperatorContext = IsOperatorContext; 
DartParser.TypeCastContext = TypeCastContext; 
DartParser.AsOperatorContext = AsOperatorContext; 
DartParser.StatementsContext = StatementsContext; 
DartParser.StatementContext = StatementContext; 
DartParser.NonLabelledStatementContext = NonLabelledStatementContext; 
DartParser.NavigationStatementContext = NavigationStatementContext; 
DartParser.MaterialPageRouteContext = MaterialPageRouteContext; 
DartParser.ClassNameContext = ClassNameContext; 
DartParser.ClassMemberContext = ClassMemberContext; 
DartParser.KeyContext = KeyContext; 
DartParser.ValueContext = ValueContext; 
DartParser.TextControllerContext = TextControllerContext; 
DartParser.ExpressionStatementContext = ExpressionStatementContext; 
DartParser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
DartParser.LocalFunctionDeclarationContext = LocalFunctionDeclarationContext; 
DartParser.IfStatementContext = IfStatementContext; 
DartParser.ForStatementContext = ForStatementContext; 
DartParser.ForLoopPartsContext = ForLoopPartsContext; 
DartParser.ForInitializerStatementContext = ForInitializerStatementContext; 
DartParser.WhileStatementContext = WhileStatementContext; 
DartParser.DoStatementContext = DoStatementContext; 
DartParser.SwitchStatementContext = SwitchStatementContext; 
DartParser.SwitchCaseContext = SwitchCaseContext; 
DartParser.DefaultCaseContext = DefaultCaseContext; 
DartParser.RethrowStatementContext = RethrowStatementContext; 
DartParser.TryStatementContext = TryStatementContext; 
DartParser.OnPartContext = OnPartContext; 
DartParser.CatchPartContext = CatchPartContext; 
DartParser.FinallyPartContext = FinallyPartContext; 
DartParser.ReturnStatementContext = ReturnStatementContext; 
DartParser.LabelContext = LabelContext; 
DartParser.BreakStatementContext = BreakStatementContext; 
DartParser.ContinueStatementContext = ContinueStatementContext; 
DartParser.YieldStatementContext = YieldStatementContext; 
DartParser.YieldEachStatementContext = YieldEachStatementContext; 
DartParser.AssertStatementContext = AssertStatementContext; 
DartParser.AssertionContext = AssertionContext; 
DartParser.TopLevelDefinitionContext = TopLevelDefinitionContext; 
DartParser.IdentifierListContext = IdentifierListContext; 
DartParser.TypeContext = TypeContext; 
DartParser.TypeNotVoidContext = TypeNotVoidContext; 
DartParser.TypeNotFunctionContext = TypeNotFunctionContext; 
DartParser.TypeNotVoidNotFunctionContext = TypeNotVoidNotFunctionContext; 
DartParser.TypeNameContext = TypeNameContext; 
DartParser.TypeArgumentsContext = TypeArgumentsContext; 
DartParser.TypeListContext = TypeListContext; 
DartParser.TypeNotVoidNotFunctionListContext = TypeNotVoidNotFunctionListContext; 
DartParser.FunctionTypeTailContext = FunctionTypeTailContext; 
DartParser.FunctionTypeTailsContext = FunctionTypeTailsContext; 
DartParser.FunctionTypeContext = FunctionTypeContext; 
DartParser.ParameterTypeListContext = ParameterTypeListContext; 
DartParser.NormalParameterTypesContext = NormalParameterTypesContext; 
DartParser.NormalParameterTypeContext = NormalParameterTypeContext; 
DartParser.OptionalParameterTypesContext = OptionalParameterTypesContext; 
DartParser.OptionalPositionalParameterTypesContext = OptionalPositionalParameterTypesContext; 
DartParser.NamedParameterTypesContext = NamedParameterTypesContext; 
DartParser.NamedParameterTypeContext = NamedParameterTypeContext; 
DartParser.TypedIdentifierContext = TypedIdentifierContext; 
DartParser.ConstructorDesignationContext = ConstructorDesignationContext; 
DartParser.TypeAliasContext = TypeAliasContext; 
DartParser.FunctionTypeAliasContext = FunctionTypeAliasContext; 
DartParser.FunctionPrefixContext = FunctionPrefixContext; 
DartParser.SingleLineStringContext = SingleLineStringContext; 
